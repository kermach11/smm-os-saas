interface SyncMessage {
  type: 'SYNC_SETTINGS' | 'REQUEST_SETTINGS' | 'SETTINGS_RESPONSE';
  data?: any;
  settingsKey?: string;
}

class SyncService {
  private targetOrigins = [
    'http://192.168.1.49:8080',
    'http://192.168.1.49:8081',
    'http://localhost:8080',
    'http://localhost:8081',
    'http://localhost:5173'
  ];

  constructor() {
    this.setupMessageListener();
  }

  private setupMessageListener() {
    window.addEventListener('message', (event) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ origin –¥–ª—è –±–µ–∑–ø–µ–∫–∏
      if (!this.targetOrigins.includes(event.origin)) {
        return;
      }

      const message: SyncMessage = event.data;
      
      switch (message.type) {
        case 'REQUEST_SETTINGS':
          this.handleSettingsRequest(event.source as Window, event.origin, message.settingsKey);
          break;
        case 'SYNC_SETTINGS':
          this.handleSyncSettings(message.data, message.settingsKey);
          break;
        case 'SETTINGS_RESPONSE':
          this.handleSettingsResponse(message.data, message.settingsKey);
          break;
      }
    });
  }

  private async handleSettingsRequest(source: Window, origin: string, settingsKey?: string) {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ IndexedDB
      const { default: indexedDBService } = await import('./IndexedDBService');
      const settings = await indexedDBService.loadSettings(settingsKey || 'mainPageSettings');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      source.postMessage({
        type: 'SETTINGS_RESPONSE',
        data: settings,
        settingsKey: settingsKey
      }, origin);
      
      console.log(`üì§ SyncService: –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ${settingsKey || 'mainPageSettings'} –Ω–∞ ${origin}`);
    } catch (error) {
      console.error('‚ùå SyncService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
    }
  }

  private async handleSyncSettings(data: any, settingsKey?: string) {
    try {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ IndexedDB
      const { default: indexedDBService } = await import('./IndexedDBService');
      await indexedDBService.saveSettings(settingsKey || 'mainPageSettings', data, 'project');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      const eventName = settingsKey === 'introSettings' ? 'introSettingsUpdated' : 'mainPageSettingsUpdated';
      window.dispatchEvent(new CustomEvent(eventName, { detail: data }));
      
      console.log(`üì• SyncService: –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ${settingsKey || 'mainPageSettings'}`);
    } catch (error) {
      console.error('‚ùå SyncService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
  }

  private handleSettingsResponse(data: any, settingsKey?: string) {
    // –û–±—Ä–æ–±–ª—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
    console.log(`üì® SyncService: –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ${settingsKey || 'mainPageSettings'} —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å`);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞ —ñ–Ω—à—ñ —Å–∞–π—Ç–∏
  async syncSettings(settingsKey: string, data: any) {
    this.targetOrigins.forEach(origin => {
      if (origin !== window.location.origin) {
        try {
          // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –Ω–µ–≤–∏–¥–∏–º–∏–π iframe –¥–ª—è –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó
          const iframe = document.createElement('iframe');
          iframe.style.display = 'none';
          iframe.src = origin;
          
          iframe.onload = () => {
            iframe.contentWindow?.postMessage({
              type: 'SYNC_SETTINGS',
              data: data,
              settingsKey: settingsKey
            }, origin);
            
            // –í–∏–¥–∞–ª—è—î–º–æ iframe —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
              document.body.removeChild(iframe);
            }, 2000);
          };
          
          document.body.appendChild(iframe);
          console.log(`üîÑ SyncService: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è ${settingsKey} –Ω–∞ ${origin}`);
        } catch (error) {
          console.error(`‚ùå SyncService: –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –Ω–∞ ${origin}:`, error);
        }
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Ç—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ —ñ–Ω—à–∏—Ö —Å–∞–π—Ç—ñ–≤
  async requestSettings(settingsKey: string): Promise<any> {
    return new Promise((resolve, reject) => {
      let responseReceived = false;
      const timeout = 5000; // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      // –°–ª—É—Ö–∞—á –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const responseHandler = (event: MessageEvent) => {
        if (!this.targetOrigins.includes(event.origin)) return;
        
        const message: SyncMessage = event.data;
        if (message.type === 'SETTINGS_RESPONSE' && message.settingsKey === settingsKey) {
          responseReceived = true;
          window.removeEventListener('message', responseHandler);
          resolve(message.data);
        }
      };

      window.addEventListener('message', responseHandler);

      // –¢–∞–π–º–∞—É—Ç
      setTimeout(() => {
        if (!responseReceived) {
          window.removeEventListener('message', responseHandler);
          reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å'));
        }
      }, timeout);

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –≤—Å—ñ —Ü—ñ–ª—å–æ–≤—ñ origins
      this.targetOrigins.forEach(origin => {
        if (origin !== window.location.origin) {
          try {
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.src = origin;
            
            iframe.onload = () => {
              iframe.contentWindow?.postMessage({
                type: 'REQUEST_SETTINGS',
                settingsKey: settingsKey
              }, origin);
              
              setTimeout(() => {
                document.body.removeChild(iframe);
              }, 1000);
            };
            
            document.body.appendChild(iframe);
          } catch (error) {
            console.error(`‚ùå SyncService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –∑ ${origin}:`, error);
          }
        }
      });
    });
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π –∞–¥–º—ñ–Ω —Ä–µ–∂–∏–º
  isAdminMode(): boolean {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.has('admin') || window.location.port === '8081';
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–¥–ª—è –∞–¥–º—ñ–Ω —Ä–µ–∂–∏–º—É)
  enableAutoSync() {
    if (!this.isAdminMode()) return;

    // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    ['mainPageSettingsUpdated', 'introSettingsUpdated', 'welcomeSettingsUpdated'].forEach(eventName => {
      window.addEventListener(eventName, (event: CustomEvent) => {
        const settingsKey = eventName.replace('Updated', '');
        this.syncSettings(settingsKey, event.detail);
      });
    });

    console.log('üîÑ SyncService: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞ –¥–ª—è –∞–¥–º—ñ–Ω —Ä–µ–∂–∏–º—É');
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
export const syncService = new SyncService();
export default syncService; 