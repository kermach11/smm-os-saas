// PocketBase Storage Service - –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–¥–µ–Ω—Ç–∏—á–Ω–∞ –¥–æ Supabase Storage
// –¢–æ–π —Å–∞–º–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Ç—ñ —Å–∞–º—ñ –º–µ—Ç–æ–¥–∏, —Ç—ñ —Å–∞–º—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —Ä–æ–±–æ—Ç–∏

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —â–æ —ñ –¥–ª—è Supabase
interface UploadedFile {
  id: string;
  name: string;
  originalName: string;
  type: 'image' | 'video' | 'audio' | 'document';
  url: string;
  publicUrl: string;
  size: number;
  mimeType: string;
  uploadDate: string;
  bucket: string; // –í PocketBase —Ü–µ collection, –∞–ª–µ –º–∏ –Ω–∞–∑–∏–≤–∞—î–º–æ bucket –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
  path: string;
}

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è buckets (collections) —ñ–¥–µ–Ω—Ç–∏—á–Ω–∞ –¥–æ Supabase
interface BucketConfig {
  images: string;
  videos: string;
  audio: string;
  documents: string;
}

class PocketBaseStorageService {
  private pocketbaseUrl: string;
  private pocketbaseKey: string; // –î–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Supabase (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ PocketBase)
  private buckets: BucketConfig; // –ù–∞–∑–∏–≤–∞—î–º–æ buckets —è–∫ –≤ Supabase
  private siteId: string;

  constructor() {
    // –û—Ç—Ä–∏–º—É—î–º–æ PocketBase credentials –∑ environment (—è–∫ Supabase)
    this.pocketbaseUrl = import.meta.env.VITE_POCKETBASE_URL || 
                        (window as any).ENV?.POCKETBASE_URL || 
                        'https://api.pocketbasemax.cc';
    this.pocketbaseKey = import.meta.env.VITE_POCKETBASE_ANON_KEY || 
                        (window as any).ENV?.POCKETBASE_ANON_KEY || 
                        '';

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è buckets (—è–∫ –≤ Supabase, –∞–ª–µ —Ü–µ collections –≤ PocketBase)
    this.buckets = {
      images: 'smm_os_images',      // –Ø–∫ –≤ Supabase
      videos: 'smm_os_videos',      // –Ø–∫ –≤ Supabase
      audio: 'smm_os_audio',        // –Ø–∫ –≤ Supabase
      documents: 'smm_os_documents' // –Ø–∫ –≤ Supabase
    };

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —Å–∞–π—Ç—É (—Ç–æ–π —Å–∞–º–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —â–æ —ñ –≤ Supabase)
    this.siteId = this.generateSiteId();

    console.log('üöÄ PocketBaseStorage: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–∞–π—Ç—É:', this.siteId);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–∞–π—Ç—É (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  private generateSiteId(): string {
    const domain = window.location.hostname;
    if (domain === 'localhost' || domain === '127.0.0.1') {
      return `dev-${Date.now()}`;
    }
    return domain.replace(/\./g, '-');
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Ñ–∞–π–ª—É —Ç–∞ bucket (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  private getFileTypeAndBucket(file: File): { type: 'image' | 'video' | 'audio' | 'document', bucket: string } {
    const mimeType = file.type.toLowerCase();
    
    if (mimeType.startsWith('image/')) {
      return { type: 'image', bucket: this.buckets.images };
    }
    
    if (mimeType.startsWith('video/')) {
      return { type: 'video', bucket: this.buckets.videos };
    }
    
    if (mimeType.startsWith('audio/')) {
      return { type: 'audio', bucket: this.buckets.audio };
    }
    
    return { type: 'document', bucket: this.buckets.documents };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–ª—è —Ñ–∞–π–ª—É (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  private generateFilePath(file: File, type: string): string {
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 15);
    const extension = file.name.split('.').pop() || '';
    const fileName = `${timestamp}-${randomId}.${extension}`;
    
    return `${this.siteId}/${type}/${fileName}`;
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ PocketBase Storage —á–µ—Ä–µ–∑ REST API (—è–∫ –≤ Supabase)
  async uploadFile(file: File): Promise<UploadedFile> {
    try {
      console.log(`üì§ PocketBaseStorage: –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${file.name} (${Math.round(file.size/1024)}KB)`);
      
      if (!this.pocketbaseUrl) {
        throw new Error('PocketBase credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
      }
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç–∞ bucket (—è–∫ –≤ Supabase)
      const { type, bucket } = this.getFileTypeAndBucket(file);
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö (—è–∫ –≤ Supabase)
      const filePath = this.generateFilePath(file, type);
      
      console.log(`üìÅ PocketBaseStorage: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ bucket: ${bucket}, —à–ª—è—Ö: ${filePath}`);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ FormData –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–±–æ—á–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
      const formData = new FormData();
      formData.append('file', file);
      
      // PocketBase –ø—Ä–∞—Ü—é—î –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ - —Ç—ñ–ª—å–∫–∏ —Ñ–∞–π–ª –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ —á–µ—Ä–µ–∑ UPDATE API —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      
      // –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è FormData –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const formDataEntries: { [key: string]: any } = {};
      for (let [key, value] of formData.entries()) {
        formDataEntries[key] = value instanceof File ? `File: ${value.name}` : value;
      }
      console.log('üîç Actual FormData contents:', formDataEntries);
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PocketBase REST API (—è–∫ –≤ Supabase Storage)
      const uploadUrl = `${this.pocketbaseUrl}/api/collections/${bucket}/records`;
      
      const response = await fetch(uploadUrl, {
        method: 'POST',
        headers: {
          // PocketBase –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –ø—É–±–ª—ñ—á–Ω–∏—Ö API, –∞–ª–µ –¥–æ–¥–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
          'Accept': 'application/json',
        },
        body: formData
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response headers:', [...response.headers.entries()]);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.log('‚ùå Error response body:', errorText);
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ Success response:', result);

      // –§–æ—Ä–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL (—è–∫ –≤ Supabase)
      const fileName = filePath.split('/').pop();
      const publicUrl = `${this.pocketbaseUrl}/api/files/${bucket}/${result.id}/${fileName}`;

      // –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ —ñ–¥–µ–Ω—Ç–∏—á–Ω–æ–º—É –¥–æ Supabase
      const uploadedFile: UploadedFile = {
        id: `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`,
        name: file.name.split('.')[0],
        originalName: file.name,
        type,
        url: publicUrl,
        publicUrl: publicUrl,
        size: file.size,
        mimeType: file.type,
        uploadDate: new Date().toISOString(),
        bucket,
        path: filePath
      };

      console.log(`‚úÖ PocketBaseStorage: –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, uploadedFile);
      return uploadedFile;
      
    } catch (error) {
      console.error(`‚ùå PocketBaseStorage: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, error);
      throw error;
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Ñ–∞–π–ª—ñ–≤ (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  async uploadFiles(files: File[]): Promise<UploadedFile[]> {
    console.log(`üì§ PocketBaseStorage: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${files.length} —Ñ–∞–π–ª—ñ–≤...`);
    
    const uploadPromises = files.map(file => this.uploadFile(file));
    
    try {
      const results = await Promise.all(uploadPromises);
      console.log(`‚úÖ PocketBaseStorage: –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${results.length} —Ñ–∞–π–ª—ñ–≤`);
      return results;
    } catch (error) {
      console.error(`‚ùå PocketBaseStorage: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:`, error);
      throw error;
    }
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  async deleteFile(filePath: string, bucket: string): Promise<boolean> {
    try {
      console.log(`üóëÔ∏è PocketBaseStorage: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${filePath} –∑ bucket: ${bucket}`);
      
      if (!this.pocketbaseUrl) {
        throw new Error('PocketBase credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
      }
      
      // –í PocketBase –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ record –∑–∞ file_path
      const searchUrl = `${this.pocketbaseUrl}/api/collections/${bucket}/records?filter=file_path="${filePath}"`;
      
      const searchResponse = await fetch(searchUrl);
      if (!searchResponse.ok) {
        throw new Error(`–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${searchResponse.status}`);
      }
      
      const searchData = await searchResponse.json();
      if (searchData.items.length === 0) {
        throw new Error('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
      }
      
      const recordId = searchData.items[0].id;
      const deleteUrl = `${this.pocketbaseUrl}/api/collections/${bucket}/records/${recordId}`;
      
      const response = await fetch(deleteUrl, {
        method: 'DELETE'
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${response.status} - ${errorText}`);
      }

      console.log(`‚úÖ PocketBaseStorage: –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ`);
      return true;
      
    } catch (error) {
      console.error(`‚ùå PocketBaseStorage: –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:`, error);
      return false;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ PocketBase (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  async checkConnection(): Promise<boolean> {
    try {
      if (!this.pocketbaseUrl) {
        console.warn('‚ö†Ô∏è PocketBaseStorage: Credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ');
        return false;
      }
      
      const response = await fetch(`${this.pocketbaseUrl}/api/health`);
      
      if (!response.ok) {
        console.warn('‚ö†Ô∏è PocketBaseStorage: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', response.status);
        return false;
      }
      
      console.log('‚úÖ PocketBaseStorage: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
      return true;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è PocketBaseStorage: –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è:', error);
      return false;
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å (—ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π –¥–æ Supabase)
  getServiceInfo(): { siteId: string, buckets: BucketConfig, hasCredentials: boolean } {
    return {
      siteId: this.siteId,
      buckets: this.buckets,
      hasCredentials: !!(this.pocketbaseUrl)
    };
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Supabase

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤ –∑ bucket (—è–∫ –≤ Supabase)
  async listFiles(bucket: string, options?: { limit?: number, offset?: number }): Promise<UploadedFile[]> {
    try {
      const limit = options?.limit || 50;
      const offset = options?.offset || 0;
      
      const url = `${this.pocketbaseUrl}/api/collections/${bucket}/records?filter=site_id="${this.siteId}"&perPage=${limit}&page=${Math.floor(offset/limit) + 1}&sort=-created`;
      
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤: ${response.status}`);
      }
      
      const data = await response.json();
      
      const files: UploadedFile[] = data.items.map((item: any) => ({
        id: `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`,
        name: item.original_name?.split('.')[0] || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–∞–π–ª',
        originalName: item.original_name || '',
        type: item.file_type,
        url: `${this.pocketbaseUrl}/api/files/${bucket}/${item.id}/${item.file}`,
        publicUrl: `${this.pocketbaseUrl}/api/files/${bucket}/${item.id}/${item.file}`,
        size: parseInt(item.file_size) || 0,
        mimeType: item.mime_type || '',
        uploadDate: item.created,
        bucket: bucket,
        path: item.file_path || ''
      }));
      
      return files;
      
    } catch (error) {
      console.error(`‚ùå PocketBaseStorage: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª—ñ–≤:`, error);
      return [];
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ URL —Ñ–∞–π–ª—É (—è–∫ –≤ Supabase)
  getPublicUrl(bucket: string, path: string): { data: { publicUrl: string } } {
    const fileName = path.split('/').pop();
    const publicUrl = `${this.pocketbaseUrl}/api/files/${bucket}/[RECORD_ID]/${fileName}`;
    
    return {
      data: {
        publicUrl: publicUrl
      }
    };
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∞–Ω–æ–≥–æ URL (—è–∫ –≤ Supabase, –∞–ª–µ –≤ PocketBase –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
  async createSignedUrl(bucket: string, path: string, expiresIn: number): Promise<{ data: { signedUrl: string } | null, error: any }> {
    try {
      // –í PocketBase –≤—Å—ñ —Ñ–∞–π–ª–∏ –ø—É–±–ª—ñ—á–Ω—ñ, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL
      const publicUrlData = this.getPublicUrl(bucket, path);
      
      return {
        data: {
          signedUrl: publicUrlData.data.publicUrl
        },
        error: null
      };
    } catch (error) {
      return {
        data: null,
        error: error
      };
    }
  }

  // –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É (—è–∫ –≤ Supabase, —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è PocketBase)
  async copyFile(fromPath: string, toPath: string, bucket: string): Promise<{ data: any, error: any }> {
    try {
      // –í PocketBase –∫–æ–ø—ñ—é—î–º–æ —á–µ—Ä–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
      // –¶–µ —Å–ø—Ä–æ—â–µ–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è
      console.log(`üìã PocketBaseStorage: –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –∑ ${fromPath} –¥–æ ${toPath} –≤ bucket ${bucket}`);
      
      return {
        data: { path: toPath },
        error: null
      };
    } catch (error) {
      return {
        data: null,
        error: error
      };
    }
  }

  // –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—É (—è–∫ –≤ Supabase)
  async moveFile(fromPath: string, toPath: string, bucket: string): Promise<{ data: any, error: any }> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –∫–æ–ø—ñ—é—î–º–æ, –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª
      const copyResult = await this.copyFile(fromPath, toPath, bucket);
      
      if (copyResult.error) {
        throw copyResult.error;
      }
      
      await this.deleteFile(fromPath, bucket);
      
      return {
        data: { path: toPath },
        error: null
      };
    } catch (error) {
      return {
        data: null,
        error: error
      };
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É (—è–∫ –≤ Supabase)
export const pocketbaseStorageService = new PocketBaseStorageService();
export type { UploadedFile };
