interface DBConfig {
  name: string;
  version: number;
  stores: {
    [storeName: string]: {
      keyPath: string;
      indexes?: { name: string; keyPath: string; unique: boolean }[];
    };
  };
}

interface FileItem {
  id: string;
  name: string;
  type: 'image' | 'audio' | 'video';
  url: string;
  originalName: string;
  size: number;
  uploadDate: string;
  optimized: boolean;
  isHeavy?: boolean;
  hasFullFile?: boolean;
}

interface SettingsData {
  [key: string]: any;
}

interface DBData {
  id: string;
  data: any;
  timestamp: number;
  type: string;
}

class IndexedDBService {
  private dbConfig: DBConfig = {
    name: 'SmartContentDB',
    version: 1,
    stores: {
      // –ú–µ–¥—ñ–∞—Ñ–∞–π–ª–∏ (–æ–±'—î–¥–Ω—É—î–º–æ ContentManager —ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏)
      files: {
        keyPath: 'id',
        indexes: [
          { name: 'name', keyPath: 'name', unique: false },
          { name: 'type', keyPath: 'type', unique: false },
          { name: 'uploadDate', keyPath: 'uploadDate', unique: false }
        ]
      },
      
      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É (mainPageSettings, welcomeSettings —Ç–æ—â–æ)
      settings: {
        keyPath: 'settingsKey',
        indexes: [
          { name: 'timestamp', keyPath: 'timestamp', unique: false },
          { name: 'type', keyPath: 'type', unique: false }
        ]
      },
      
      // –î–∞–Ω—ñ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (adminSession, adminSettings)
      admin: {
        keyPath: 'adminKey',
        indexes: [
          { name: 'timestamp', keyPath: 'timestamp', unique: false }
        ]
      },
      
      // –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∫–ª—ñ—î–Ω—Ç–∏ (analyticsData, clientsData)
      analytics: {
        keyPath: 'analyticsKey',
        indexes: [
          { name: 'timestamp', keyPath: 'timestamp', unique: false },
          { name: 'type', keyPath: 'type', unique: false }
        ]
      },
      
      // –Ü–º–º–µ—Ä—Å–∏–≤–Ω–∏–π –¥–æ—Å–≤—ñ–¥ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç (immersiveExperienceData)
      experience: {
        keyPath: 'experienceKey',
        indexes: [
          { name: 'timestamp', keyPath: 'timestamp', unique: false }
        ]
      }
    }
  };

  private db: IDBDatabase | null = null;
  private initPromise: Promise<void> | null = null;

  constructor() {
    this.initPromise = this.initDB();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  async waitForInit(): Promise<void> {
    if (this.initPromise) {
      await this.initPromise;
    }
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  private async initDB(): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbConfig.name, this.dbConfig.version);

      request.onerror = () => {
        console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        reject(new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö'));
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        console.log('üîÑ IndexedDBService: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ö–æ–≤–∏—â–∞
        Object.entries(this.dbConfig.stores).forEach(([storeName, config]) => {
          if (!db.objectStoreNames.contains(storeName)) {
            const store = db.createObjectStore(storeName, { keyPath: config.keyPath });
            
            // –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
            if (config.indexes) {
              config.indexes.forEach(index => {
                store.createIndex(index.name, index.keyPath, { unique: index.unique });
              });
            }
            
            console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ö–æ–≤–∏—â–µ: ${storeName}`);
          }
        });
      };

      request.onsuccess = (event) => {
        this.db = (event.target as IDBOpenDBRequest).result;
        console.log('‚úÖ IndexedDBService: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
        
        // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.logDBStats();
        resolve();
      };
    });
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  private async logDBStats(): Promise<void> {
    if (!this.db) return;

    try {
      const stats = await Promise.all(
        Object.keys(this.dbConfig.stores).map(async (storeName) => {
          const count = await this.countRecords(storeName);
          return { store: storeName, count };
        })
      );

      console.log('üìä IndexedDBService - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:');
      stats.forEach(({ store, count }) => {
        console.log(`   ${store}: ${count} –∑–∞–ø–∏—Å—ñ–≤`);
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ —É —Å—Ö–æ–≤–∏—â—ñ
  private async countRecords(storeName: string): Promise<number> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction([storeName], 'readonly');
      const store = transaction.objectStore(storeName);
      const request = store.count();

      request.onsuccess = () => resolve(request.result);
      request.onerror = () => reject(request.error);
    });
  }

  // === –ú–ï–î–Ü–ê–§–ê–ô–õ–ò ===

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ (–∑–∞–º—ñ–Ω—é—î ContentManager –ª–æ–≥—ñ–∫—É)
  async saveFiles(files: FileItem[]): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['files'], 'readwrite');
      const store = transaction.objectStore('files');

      let completed = 0;
      const total = files.length;

      if (total === 0) {
        resolve();
        return;
      }

      files.forEach(file => {
        const request = store.put(file);
        
        request.onsuccess = () => {
          completed++;
          if (completed === total) {
            console.log(`‚úÖ IndexedDBService: –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${total} —Ñ–∞–π–ª—ñ–≤`);
            resolve();
          }
        };
        
        request.onerror = () => {
          console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', file.name);
          reject(request.error);
        };
      });
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
  async loadFiles(): Promise<FileItem[]> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['files'], 'readonly');
      const store = transaction.objectStore('files');
      const request = store.getAll();

      request.onsuccess = () => {
        const files = request.result || [];
        console.log(`üìÇ IndexedDBService: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤`);
        resolve(files);
      };

      request.onerror = () => {
        console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤');
        reject(new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤'));
      };
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ ID
  async loadFilesByIds(fileIds: string[]): Promise<FileItem[]> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['files'], 'readonly');
      const store = transaction.objectStore('files');
      const results: FileItem[] = [];

      let completed = 0;
      const total = fileIds.length;

      if (total === 0) {
        resolve([]);
        return;
      }

      fileIds.forEach((fileId) => {
        const request = store.get(fileId);

        request.onsuccess = () => {
          completed++;

          if (request.result) {
            results.push(request.result);
          }

          if (completed === total) {
            resolve(results);
          }
        };

        request.onerror = () => {
          completed++;
          console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${fileId}`);

          if (completed === total) {
            resolve(results);
          }
        };
      });
    });
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É
  async deleteFile(fileId: string): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['files'], 'readwrite');
      const store = transaction.objectStore('files');
      const request = store.delete(fileId);

      request.onsuccess = () => {
        console.log(`üóëÔ∏è IndexedDBService: –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: ${fileId}`);
        resolve();
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${fileId}`);
        reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª: ${fileId}`));
      };
    });
  }

  // –û—á–∏—â–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤
  async cleanupInvalidVideoFiles(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        console.warn('‚ö†Ô∏è IndexedDBService: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è');
        resolve();
        return;
      }

      try {
        const transaction = this.db.transaction(['files'], 'readwrite');
        const store = transaction.objectStore('files');
        const getAllRequest = store.getAll();

        getAllRequest.onsuccess = () => {
          const files = getAllRequest.result as FileItem[];
          console.log(`üîç IndexedDBService: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ${files.length} —Ñ–∞–π–ª—ñ–≤ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —Ç–∏–ø—É`);
          
          let fixedCount = 0;
          let deletedCount = 0;
          const filesToUpdate: FileItem[] = [];
          const filesToDelete: string[] = [];

          files.forEach(file => {
            if (!file.url || !file.url.startsWith('data:')) {
              return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–π–ª–∏ –±–µ–∑ data URL
            }

            const mimeType = file.url.split(';')[0].replace('data:', '');
            let shouldFix = false;
            let correctType: 'image' | 'audio' | 'video' | null = null;

            // –í–∏—è–≤–ª—è—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–∏–ø–∏
            if (file.type === 'video' && mimeType.startsWith('image/')) {
              console.warn(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤—ñ–¥–µ–æ, –∞–ª–µ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${mimeType})`);
              correctType = 'image';
              shouldFix = true;
            } else if (file.type === 'image' && mimeType.startsWith('video/')) {
              console.warn(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ —Ü–µ –≤—ñ–¥–µ–æ (${mimeType})`);
              correctType = 'video';
              shouldFix = true;
            } else if (file.type === 'audio' && (mimeType.startsWith('image/') || mimeType.startsWith('video/'))) {
              console.warn(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∞—É–¥—ñ–æ, –∞–ª–µ —Ü–µ ${mimeType.split('/')[0]}`);
              correctType = mimeType.startsWith('image/') ? 'image' : 'video';
              shouldFix = true;
            }

            // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –∑ SVG placeholder –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
            if (file.type === 'video' && file.url.includes('data:image/svg+xml') && file.url.includes('üé¨')) {
              console.warn(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ SVG placeholder –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: ${file.name}`);
              filesToDelete.push(file.id);
              deletedCount++;
              return;
            }

            if (shouldFix && correctType) {
              const fixedFile = {
                ...file,
                type: correctType
              };
              filesToUpdate.push(fixedFile);
              fixedCount++;
            }
          });

          // –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏
          let operationsCompleted = 0;
          const totalOperations = filesToUpdate.length + filesToDelete.length;

          if (totalOperations === 0) {
            console.log('‚úÖ IndexedDBService: –í—Å—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø');
            resolve();
            return;
          }

          const checkCompletion = () => {
            operationsCompleted++;
            if (operationsCompleted === totalOperations) {
              console.log(`‚úÖ IndexedDBService: –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}, –≤–∏–¥–∞–ª–µ–Ω–æ: ${deletedCount}`);
              resolve();
            }
          };

          // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª–∏ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º —Ç–∏–ø–æ–º
          filesToUpdate.forEach(file => {
            const updateRequest = store.put(file);
            updateRequest.onsuccess = () => {
              console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∏–ø —Ñ–∞–π–ª—É: ${file.name} ‚Üí ${file.type}`);
              checkCompletion();
            };
            updateRequest.onerror = () => {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${file.name}`);
              checkCompletion();
            };
          });

          // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
          filesToDelete.forEach(fileId => {
            const deleteRequest = store.delete(fileId);
            deleteRequest.onsuccess = () => {
              console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ñ–∞–π–ª: ${fileId}`);
              checkCompletion();
            };
            deleteRequest.onerror = () => {
              console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: ${fileId}`);
              checkCompletion();
            };
          });
        };

        getAllRequest.onerror = () => {
          console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è');
          reject(new Error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤'));
        };

        transaction.onerror = () => {
          console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è');
          reject(new Error('–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó'));
        };

      } catch (error) {
        console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:', error);
        reject(error);
      }
    });
  }

  // === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é backend)
  async saveSettings(settingsKey: string, data: SettingsData, type: string = 'project'): Promise<void> {
    console.log(`üîÑ IndexedDBService: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${settingsKey}, —Å–ø–æ—á–∞—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ...`);
    
    // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ (—à–≤–∏–¥–∫–æ)
    await this.saveSettingsLocal(settingsKey, data, type);
    
    console.log(`‚òÅÔ∏è IndexedDBService: –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ —Å–µ—Ä–≤–µ—Ä–æ–º...`);
    
    // –ü–æ—Ç—ñ–º –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    this.saveSettingsToBackend(settingsKey, data).catch(error => {
      console.warn(`‚ö†Ô∏è IndexedDBService: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ ${settingsKey} –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:`, error);
    });
  }

  // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  private async saveSettingsLocal(settingsKey: string, data: SettingsData, type: string = 'project'): Promise<void> {
    // –û—á—ñ–∫—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await this.waitForInit();
    
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const settingsData = {
        settingsKey,
        data: {
          ...data,
          lastModified: new Date().toISOString()
        },
        timestamp: Date.now(),
        type
      };

      const transaction = this.db.transaction(['settings'], 'readwrite');
      const store = transaction.objectStore('settings');
      const request = store.put(settingsData);

      request.onsuccess = () => {
        console.log(`üíæ IndexedDBService: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: ${settingsKey}`);
        resolve();
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${settingsKey}`);
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${settingsKey}`));
      };
    });
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ —á–µ—Ä–µ–∑ Backend Service
  private async saveSettingsToBackend(settingsKey: string, data: SettingsData): Promise<void> {
    try {
      console.log(`üåê IndexedDBService: –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ${settingsKey} –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...`);
      
      // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
      console.log(`üì± IndexedDBService: –°–µ—Ä–≤–µ—Ä–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è`);
      return;
      
      // –î–∏–Ω–∞–º—ñ—á–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ BackendService
      console.log(`üì¶ IndexedDBService: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ BackendService...`);
      const { backendService } = await import('./BackendService');
      console.log(`‚úÖ IndexedDBService: BackendService —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å backend
      console.log(`üîó IndexedDBService: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ backend...`);
      const isBackendAvailable = await backendService.checkConnection();
      console.log(`üîó IndexedDBService: Backend –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${isBackendAvailable}`);
      
      if (isBackendAvailable) {
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤–µ–ª–∏–∫—ñ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
        const filteredData = this.filterLargeBase64Images(data);
        
        console.log(`üíæ IndexedDBService: –í–∏–∫–ª–∏–∫–∞—î–º–æ backendService.saveSettings –¥–ª—è ${settingsKey}...`);
        const success = await backendService.saveSettings(settingsKey, filteredData);
        if (success) {
          console.log(`‚òÅÔ∏è IndexedDBService: ${settingsKey} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ`);
        } else {
          throw new Error('Backend –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É');
        }
      } else {
        console.log(`üì± IndexedDBService: Backend –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:`, error);
      // –ù–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—î–º–æ —Ä–æ–±–æ—Ç—É - –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω–∞–Ω–µ
    }
  }

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–µ–ª–∏–∫–∏—Ö base64 –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  private filterLargeBase64Images(data: any): any {
    const MAX_BASE64_SIZE = 500000; // 500KB –ª—ñ–º—ñ—Ç –¥–ª—è base64
    
    const filterObject = (obj: any): any => {
      if (typeof obj === 'string') {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if (obj.startsWith('data:image/') && obj.includes('base64,')) {
          const base64Size = obj.length;
          if (base64Size > MAX_BASE64_SIZE) {
            console.warn(`üö´ IndexedDBService: –í–∏–¥–∞–ª—è—î–º–æ –≤–µ–ª–∏–∫–µ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${Math.round(base64Size/1024)}KB) –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è`);
            return '[LARGE_IMAGE_FILTERED]'; // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
          }
        }
        return obj;
      }
      
      if (Array.isArray(obj)) {
        return obj.map(filterObject);
      }
      
      if (obj && typeof obj === 'object') {
        const filtered: any = {};
        for (const [key, value] of Object.entries(obj)) {
          filtered[key] = filterObject(value);
        }
        return filtered;
      }
      
      return obj;
    };
    
    return filterObject(data);
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é backend)
  async loadSettings(settingsKey: string): Promise<SettingsData | null> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞
      const serverData = await this.loadSettingsFromBackend(settingsKey);
      
      if (serverData) {
        // –Ø–∫—â–æ —î —Å–µ—Ä–≤–µ—Ä–Ω—ñ –¥–∞–Ω—ñ, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö –ª–æ–∫–∞–ª—å–Ω–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
        await this.saveSettingsLocal(settingsKey, serverData);
        console.log(`‚òÅÔ∏è IndexedDBService: ${settingsKey} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞`);
        return serverData;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è IndexedDBService: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ${settingsKey} –∑ —Å–µ—Ä–≤–µ—Ä–∞:`, error);
    }

    // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
    return await this.loadSettingsLocal(settingsKey);
  }

  // –õ–æ–∫–∞–ª—å–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  private async loadSettingsLocal(settingsKey: string): Promise<SettingsData | null> {
    // –û—á—ñ–∫—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await this.waitForInit();
    
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['settings'], 'readonly');
      const store = transaction.objectStore('settings');
      const request = store.get(settingsKey);

      request.onsuccess = () => {
        if (request.result) {
          console.log(`üìÇ IndexedDBService: ${settingsKey} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ`);
          resolve(request.result.data);
        } else {
          console.log(`üìÇ IndexedDBService: ${settingsKey} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ`);
          resolve(null);
        }
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${settingsKey}`);
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${settingsKey}`));
      };
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Backend Service
  private async loadSettingsFromBackend(settingsKey: string): Promise<SettingsData | null> {
    try {
      // –î–∏–Ω–∞–º—ñ—á–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ BackendService
      const { backendService } = await import('./BackendService');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å backend
      const isBackendAvailable = await backendService.checkConnection();
      
      if (isBackendAvailable) {
        const data = await backendService.loadSettings(settingsKey);
        return data;
      } else {
        return null;
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–∞:`, error);
      return null;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö —Ç–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –¥–∞–Ω–∏—Ö
  async syncSettingsWithBackend(settingsKey: string): Promise<SettingsData | null> {
    try {
      const { backendService } = await import('./BackendService');
      const localData = await this.loadSettingsLocal(settingsKey);
      
      if (localData) {
        return await backendService.syncWithServer(settingsKey, localData);
      } else {
        return await this.loadSettingsFromBackend(settingsKey);
      }
    } catch (error) {
      console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ${settingsKey}:`, error);
      return await this.loadSettingsLocal(settingsKey);
    }
  }

  // === –ê–î–ú–Ü–ù –î–ê–ù–Ü ===

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö
  async saveAdminData(adminKey: string, data: any): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const adminData = {
        adminKey,
        data,
        timestamp: Date.now()
      };

      const transaction = this.db.transaction(['admin'], 'readwrite');
      const store = transaction.objectStore('admin');
      const request = store.put(adminData);

      request.onsuccess = () => {
        console.log(`üíæ IndexedDBService: –ê–¥–º—ñ–Ω –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${adminKey}`);
        resolve();
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö: ${adminKey}`);
        reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–¥–º—ñ–Ω –¥–∞–Ω—ñ: ${adminKey}`));
      };
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö
  async loadAdminData(adminKey: string): Promise<any | null> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['admin'], 'readonly');
      const store = transaction.objectStore('admin');
      const request = store.get(adminKey);

      request.onsuccess = () => {
        if (request.result) {
          console.log(`üìÇ IndexedDBService: –ê–¥–º—ñ–Ω –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${adminKey}`);
          resolve(request.result.data);
        } else {
          console.log(`üìÇ IndexedDBService: –ê–¥–º—ñ–Ω –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${adminKey}`);
          resolve(null);
        }
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö: ${adminKey}`);
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö: ${adminKey}`));
      };
    });
  }

  // === –ê–ù–ê–õ–Ü–¢–ò–ö–ê ===

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  async saveAnalytics(analyticsKey: string, data: any, type: string = 'general'): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const analyticsData = {
        analyticsKey,
        data,
        type,
        timestamp: Date.now()
      };

      const transaction = this.db.transaction(['analytics'], 'readwrite');
      const store = transaction.objectStore('analytics');
      const request = store.put(analyticsData);

      request.onsuccess = () => {
        console.log(`üìä IndexedDBService: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: ${analyticsKey}`);
        resolve();
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: ${analyticsKey}`);
        reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É: ${analyticsKey}`));
      };
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  async loadAnalytics(analyticsKey: string): Promise<any | null> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['analytics'], 'readonly');
      const store = transaction.objectStore('analytics');
      const request = store.get(analyticsKey);

      request.onsuccess = () => {
        if (request.result) {
          console.log(`üìä IndexedDBService: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: ${analyticsKey}`);
          resolve(request.result.data);
        } else {
          console.log(`üìä IndexedDBService: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: ${analyticsKey}`);
          resolve(null);
        }
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: ${analyticsKey}`);
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: ${analyticsKey}`));
      };
    });
  }

  // === –Ü–ú–ú–ï–†–°–ò–í–ù–ò–ô –î–û–°–í–Ü–î ===

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ—Å–≤—ñ–¥—É
  async saveExperience(experienceKey: string, data: any): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const experienceData = {
        experienceKey,
        data,
        timestamp: Date.now()
      };

      const transaction = this.db.transaction(['experience'], 'readwrite');
      const store = transaction.objectStore('experience');
      const request = store.put(experienceData);

      request.onsuccess = () => {
        console.log(`üåü IndexedDBService: –î–æ—Å–≤—ñ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${experienceKey}`);
        resolve();
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É: ${experienceKey}`);
        reject(new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–æ—Å–≤—ñ–¥: ${experienceKey}`));
      };
    });
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ—Å–≤—ñ–¥—É
  async loadExperience(experienceKey: string): Promise<any | null> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const transaction = this.db.transaction(['experience'], 'readonly');
      const store = transaction.objectStore('experience');
      const request = store.get(experienceKey);

      request.onsuccess = () => {
        if (request.result) {
          console.log(`üåü IndexedDBService: –î–æ—Å–≤—ñ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${experienceKey}`);
          resolve(request.result.data);
        } else {
          console.log(`üåü IndexedDBService: –î–æ—Å–≤—ñ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${experienceKey}`);
          resolve(null);
        }
      };

      request.onerror = () => {
        console.error(`‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É: ${experienceKey}`);
        reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å–≤—ñ–¥—É: ${experienceKey}`));
      };
    });
  }

  // === –ú–Ü–ì–†–ê–¶–Ü–Ø –ó LOCALSTORAGE ===

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –∑ localStorage –≤ IndexedDB
  async migrateFromLocalStorage(): Promise<void> {
    console.log('üîÑ IndexedDBService: –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ localStorage...');

    try {
      // –ú—ñ–≥—Ä–∞—Ü—ñ—è –º–µ–¥—ñ–∞—Ñ–∞–π–ª—ñ–≤
      await this.migrateContentManagerFiles();
      
      // –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–µ–∫—Ç—É
      await this.migrateProjectSettings();
      
      // –ú—ñ–≥—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö
      await this.migrateAdminData();
      
      // –ú—ñ–≥—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
      await this.migrateAnalyticsData();
      
      // –ú—ñ–≥—Ä–∞—Ü—ñ—è —ñ–º–º–µ—Ä—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É
      await this.migrateExperienceData();

      console.log('‚úÖ IndexedDBService: –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå IndexedDBService: –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ ContentManager
  private async migrateContentManagerFiles(): Promise<void> {
    const contentManagerData = localStorage.getItem('smartContentManager_v2');
    if (contentManagerData) {
      try {
        const files: FileItem[] = JSON.parse(contentManagerData);
        await this.saveFiles(files);
        console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –∑ ContentManager`);
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤ ContentManager:', error);
      }
    }
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–æ–µ–∫—Ç—É
  private async migrateProjectSettings(): Promise<void> {
    const settingsKeys = [
      'mainPageSettings',
      'welcomeSettings', 
      'introSettings',
      'previewSettings'
    ];

    for (const key of settingsKeys) {
      const data = localStorage.getItem(key);
      if (data) {
        try {
          const parsedData = JSON.parse(data);
          await this.saveSettings(key, parsedData, 'project');
          console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: ${key}`);
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å ${key}:`, error);
        }
      }
    }
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö
  private async migrateAdminData(): Promise<void> {
    const adminKeys = ['adminSession', 'adminSettings'];

    for (const key of adminKeys) {
      const data = localStorage.getItem(key);
      if (data) {
        try {
          const parsedData = JSON.parse(data);
          await this.saveAdminData(key, parsedData);
          console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω –¥–∞–Ω—ñ: ${key}`);
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω –¥–∞–Ω–∏—Ö ${key}:`, error);
        }
      }
    }
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
  private async migrateAnalyticsData(): Promise<void> {
    const analyticsKeys = ['analyticsData', 'clientsData'];

    for (const key of analyticsKeys) {
      const data = localStorage.getItem(key);
      if (data) {
        try {
          const parsedData = JSON.parse(data);
          await this.saveAnalytics(key, parsedData, key === 'clientsData' ? 'clients' : 'analytics');
          console.log(`‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É: ${key}`);
        } catch (error) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ${key}:`, error);
        }
      }
    }
  }

  // –ú—ñ–≥—Ä–∞—Ü—ñ—è —ñ–º–º–µ—Ä—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É
  private async migrateExperienceData(): Promise<void> {
    const data = localStorage.getItem('immersiveExperienceData');
    if (data) {
      try {
        const parsedData = JSON.parse(data);
        await this.saveExperience('immersiveExperienceData', parsedData);
        console.log('‚úÖ –ú—ñ–≥—Ä–æ–≤–∞–Ω–æ –¥–∞–Ω—ñ —ñ–º–º–µ—Ä—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó —ñ–º–º–µ—Ä—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É:', error);
      }
    }
  }

  // === –û–ß–ò–©–ï–ù–ù–Ø ===

  // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
  async clearAllData(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (!this.db) {
        reject(new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞'));
        return;
      }

      const storeNames = Object.keys(this.dbConfig.stores);
      const transaction = this.db.transaction(storeNames, 'readwrite');

      let completed = 0;
      const total = storeNames.length;

      storeNames.forEach((storeName) => {
        const store = transaction.objectStore(storeName);
        const request = store.clear();

        request.onsuccess = () => {
          completed++;
          console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ö–æ–≤–∏—â–µ: ${storeName}`);

          if (completed === total) {
            console.log('‚úÖ IndexedDBService: –í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
            resolve();
          }
        };

        request.onerror = () => {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞: ${storeName}`);
          reject(new Error(`–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞: ${storeName}`));
        };
      });

      transaction.onerror = () => {
        reject(new Error('–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è'));
      };
    });
  }

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
  close(): void {
    if (this.db) {
      this.db.close();
      this.db = null;
      console.log('üìõ IndexedDBService: –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∑–∞–∫—Ä–∏—Ç–∞');
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç —î–¥–∏–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤—ñ—Å—É
export const indexedDBService = new IndexedDBService();
export default indexedDBService; 