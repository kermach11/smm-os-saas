import { AnalyticsData, SessionData, ClickEvent } from '../types/analytics';

interface IAnalyticsStorageService {
  saveAnalyticsData(data: AnalyticsData): Promise<void>;
  loadAnalyticsData(): Promise<AnalyticsData | null>;
  syncAnalytics(localClicks: ClickEvent[], localSessions: SessionData[]): Promise<{
    clicks: ClickEvent[];
    sessions: SessionData[];
  }>;
}

class AnalyticsStorageService implements IAnalyticsStorageService {
  private baseUrl: string;
  
  constructor() {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ localhost –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    this.baseUrl = import.meta.env.VITE_POCKETBASE_URL || 'http://127.0.0.1:8090';
  }

  async saveAnalyticsData(data: AnalyticsData): Promise<void> {
    try {
      console.log('üì° AnalyticsStorage: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      
      const response = await fetch(`${this.baseUrl}/api/collections/analytics_data/records`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          data: JSON.stringify(data),
          timestamp: new Date().toISOString(),
          device_id: this.getDeviceId()
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      console.log('‚úÖ AnalyticsStorage: –î–∞–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
    }
  }

  async loadAnalyticsData(): Promise<AnalyticsData | null> {
    try {
      console.log('üì° AnalyticsStorage: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑ —Å–µ—Ä–≤–µ—Ä–∞');
      
      const deviceId = this.getDeviceId();
      const response = await fetch(
        `${this.baseUrl}/api/collections/analytics_data/records?filter=(device_id='${deviceId}')&sort=-created`
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.items && result.items.length > 0) {
        const latestRecord = result.items[0];
        const data = JSON.parse(latestRecord.data);
        console.log('‚úÖ AnalyticsStorage: –î–∞–Ω—ñ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞');
        return data;
      }

      console.log('üì° AnalyticsStorage: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ');
      return null;
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return null;
    }
  }

  async syncAnalytics(localClicks: ClickEvent[], localSessions: SessionData[]): Promise<{
    clicks: ClickEvent[];
    sessions: SessionData[];
  }> {
    try {
      console.log('üîÑ AnalyticsStorage: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑ —Å–µ—Ä–≤–µ—Ä–æ–º');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞
      const serverClicks = await this.loadClicks();
      const serverSessions = await this.loadSessions();
      
      // –û–±'—î–¥–Ω—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ —Ç–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –¥–∞–Ω—ñ –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
      const mergedClicks = this.mergeClickData(localClicks, serverClicks);
      const mergedSessions = this.mergeSessionData(localSessions, serverSessions);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±'—î–¥–Ω–∞–Ω—ñ –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      await this.saveClicks(mergedClicks);
      await this.saveSessions(mergedSessions);
      
      console.log('‚úÖ AnalyticsStorage: –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        totalClicks: mergedClicks.length,
        totalSessions: mergedSessions.length
      });
      
      return {
        clicks: mergedClicks,
        sessions: mergedSessions
      };
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      return {
        clicks: localClicks,
        sessions: localSessions
      };
    }
  }

  private async loadClicks(): Promise<ClickEvent[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/collections/analytics_clicks/records?perPage=1000`);
      if (!response.ok) return [];
      
      const result = await response.json();
      return result.items.map((item: any) => JSON.parse(item.data));
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤:', error);
      return [];
    }
  }

  private async loadSessions(): Promise<SessionData[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/collections/analytics_sessions/records?perPage=1000`);
      if (!response.ok) return [];
      
      const result = await response.json();
      return result.items.map((item: any) => JSON.parse(item.data));
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π:', error);
      return [];
    }
  }

  private async saveClicks(clicks: ClickEvent[]): Promise<void> {
    try {
      // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
      await this.clearCollection('analytics_clicks');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ—Ä—Ü—ñ—è–º–∏
      const batchSize = 50;
      for (let i = 0; i < clicks.length; i += batchSize) {
        const batch = clicks.slice(i, i + batchSize);
        const promises = batch.map(click => 
          fetch(`${this.baseUrl}/api/collections/analytics_clicks/records`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              data: JSON.stringify(click),
              click_id: click.id,
              timestamp: new Date(click.timestamp).toISOString()
            })
          })
        );
        await Promise.all(promises);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤:', error);
    }
  }

  private async saveSessions(sessions: SessionData[]): Promise<void> {
    try {
      // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏
      await this.clearCollection('analytics_sessions');
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ—Ä—Ü—ñ—è–º–∏
      const batchSize = 50;
      for (let i = 0; i < sessions.length; i += batchSize) {
        const batch = sessions.slice(i, i + batchSize);
        const promises = batch.map(session => 
          fetch(`${this.baseUrl}/api/collections/analytics_sessions/records`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              data: JSON.stringify(session),
              session_id: session.id,
              start_time: new Date(session.startTime).toISOString()
            })
          })
        );
        await Promise.all(promises);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π:', error);
    }
  }

  private async clearCollection(collectionName: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/api/collections/${collectionName}/records?perPage=1000`);
      if (!response.ok) return;
      
      const result = await response.json();
      const deletePromises = result.items.map((item: any) =>
        fetch(`${this.baseUrl}/api/collections/${collectionName}/records/${item.id}`, {
          method: 'DELETE'
        })
      );
      await Promise.all(deletePromises);
    } catch (error) {
      console.warn(`‚ö†Ô∏è AnalyticsStorage: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó ${collectionName}:`, error);
    }
  }

  private mergeClickData(local: ClickEvent[], server: ClickEvent[]): ClickEvent[] {
    const allClicks = [...server, ...local];
    const uniqueClicks = allClicks.filter((click, index, arr) =>
      arr.findIndex(c => c.id === click.id) === index
    );
    return uniqueClicks.sort((a, b) => a.timestamp - b.timestamp);
  }

  private mergeSessionData(local: SessionData[], server: SessionData[]): SessionData[] {
    const allSessions = [...server, ...local];
    const uniqueSessions = allSessions.filter((session, index, arr) =>
      arr.findIndex(s => s.id === session.id) === index
    );
    return uniqueSessions.sort((a, b) => a.startTime - b.startTime);
  }

  private getDeviceId(): string {
    let deviceId = localStorage.getItem('analytics_device_id');
    if (!deviceId) {
      deviceId = `device_${Math.random().toString(36).substr(2, 9)}_${Date.now()}`;
      localStorage.setItem('analytics_device_id', deviceId);
    }
    return deviceId;
  }
}

export default AnalyticsStorageService;