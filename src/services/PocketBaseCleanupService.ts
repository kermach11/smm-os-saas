/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–ª—É–∂–±–∞ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö PocketBase —Ñ–∞–π–ª—ñ–≤
 */

import { indexedDBService } from './IndexedDBService';
import { FileItem } from '../types/contentManager';

class PocketBaseCleanupService {
  private static instance: PocketBaseCleanupService;
  private isRunning = false;
  private cleanupPromise: Promise<void> | null = null;

  static getInstance(): PocketBaseCleanupService {
    if (!PocketBaseCleanupService.instance) {
      PocketBaseCleanupService.instance = new PocketBaseCleanupService();
    }
    return PocketBaseCleanupService.instance;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ñ–∞–π–ª —î PocketBase —Ñ–∞–π–ª–æ–º (–ø–æ URL –∞–±–æ —Ñ–ª–∞–≥—É)
   */
  private isPocketBaseFile(file: FileItem): boolean {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–ª–∞–≥
    if (file.isPocketBaseFile) return true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL
    if (file.url && file.url.includes('api.pocketbasemax.cc')) return true;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ pocketbaseData
    if (file.pocketbaseData?.publicUrl) return true;
    
    return false;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î URL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É
   */
  private getFileUrl(file: FileItem): string | null {
    if (file.pocketbaseData?.publicUrl) {
      return file.pocketbaseData.publicUrl;
    }
    
    if (file.url && file.url.includes('api.pocketbasemax.cc')) {
      return file.url;
    }
    
    return null;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É
   */
  private async isFileAccessible(url: string): Promise<boolean> {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  /**
   * –û—á–∏—â—É—î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ PocketBase —Ñ–∞–π–ª–∏ –∑ —É—Å—ñ—Ö –∫–µ—à—ñ–≤
   */
  async cleanupInvalidFiles(): Promise<{ removed: number; total: number }> {
    // –Ø–∫—â–æ –æ—á–∏—â–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —á–µ–∫–∞—î–º–æ –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    if (this.isRunning && this.cleanupPromise) {
      await this.cleanupPromise;
      return { removed: 0, total: 0 };
    }

    this.isRunning = true;
    
    this.cleanupPromise = this.performCleanup();
    const result = await this.cleanupPromise;
    
    this.isRunning = false;
    this.cleanupPromise = null;
    
    return result;
  }

  private async performCleanup(): Promise<{ removed: number; total: number }> {
    try {
      console.log('üßπ PocketBaseCleanupService: –ü–æ—á–∏–Ω–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è...');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ IndexedDB
      const allFiles = await indexedDBService.loadFiles();
      console.log(`üìÇ PocketBaseCleanupService: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`);
      
      const validFiles: FileItem[] = [];
      const invalidFiles: FileItem[] = [];
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
      for (const file of allFiles) {
        if (this.isPocketBaseFile(file)) {
          const fileUrl = this.getFileUrl(file);
          
          if (fileUrl) {
            const isAccessible = await this.isFileAccessible(fileUrl);
            
            if (isAccessible) {
              validFiles.push(file);
              console.log(`‚úÖ PocketBaseCleanupService: –§–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π: ${file.name}`);
            } else {
              invalidFiles.push(file);
              console.warn(`üóëÔ∏è PocketBaseCleanupService: –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: ${file.name} (${fileUrl})`);
            }
          } else {
            // –§–∞–π–ª –±–µ–∑ URL - –≤–∏–¥–∞–ª—è—î–º–æ
            invalidFiles.push(file);
            console.warn(`üóëÔ∏è PocketBaseCleanupService: –§–∞–π–ª –±–µ–∑ URL: ${file.name}`);
          }
        } else {
          // –ù–µ PocketBase —Ñ–∞–π–ª - –∑–∞–ª–∏—à–∞—î–º–æ
          validFiles.push(file);
        }
        
        // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ —â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
      if (invalidFiles.length > 0) {
        await indexedDBService.saveFiles(validFiles);
        console.log(`üßπ PocketBaseCleanupService: –í–∏–¥–∞–ª–µ–Ω–æ ${invalidFiles.length} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤`);
        
        // –û—á–∏—â—É—î–º–æ localStorage —è–∫ —Ä–µ–∑–µ—Ä–≤
        this.cleanupLocalStorage(invalidFiles);
      }
      
      return {
        removed: invalidFiles.length,
        total: allFiles.length
      };
      
    } catch (error) {
      console.error('‚ùå PocketBaseCleanupService: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:', error);
      return { removed: 0, total: 0 };
    }
  }

  /**
   * –û—á–∏—â–∞—î localStorage –≤—ñ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
   */
  private cleanupLocalStorage(invalidFiles: FileItem[]) {
    try {
      const savedFiles = localStorage.getItem('smartContentManager_v2');
      if (savedFiles) {
        const allFiles = JSON.parse(savedFiles) as FileItem[];
        const invalidIds = new Set(invalidFiles.map(f => f.id));
        
        const validFiles = allFiles.filter(file => !invalidIds.has(file.id));
        
        if (validFiles.length !== allFiles.length) {
          localStorage.setItem('smartContentManager_v2', JSON.stringify(validFiles));
          console.log(`üßπ PocketBaseCleanupService: –û—á–∏—â–µ–Ω–æ localStorage –≤—ñ–¥ ${allFiles.length - validFiles.length} —Ñ–∞–π–ª—ñ–≤`);
        }
      }
    } catch (error) {
      console.error('‚ùå PocketBaseCleanupService: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è localStorage:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –æ—á–∏—â–µ–Ω–Ω—è –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
   */
  async scheduleCleanup(delayMs: number = 2000): Promise<void> {
    setTimeout(async () => {
      const result = await this.cleanupInvalidFiles();
      if (result.removed > 0) {
        console.log(`üéØ PocketBaseCleanupService: –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –≤–∏–¥–∞–ª–µ–Ω–æ ${result.removed} –∑ ${result.total} —Ñ–∞–π–ª—ñ–≤`);
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —ñ–Ω—à—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –ø—Ä–æ –∑–º—ñ–Ω–∏
        window.dispatchEvent(new CustomEvent('pocketbaseCleanupCompleted', {
          detail: result
        }));
      }
    }, delayMs);
  }
}

export const pocketbaseCleanupService = PocketBaseCleanupService.getInstance();
