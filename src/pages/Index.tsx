import { useState, useEffect, createContext, useContext } from "react";
import { AnimatePresence } from "framer-motion";
// –ó–∞—Å—Ç–∞—Ä—ñ–ª—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∞—É–¥—ñ–æ –≤–∏–¥–∞–ª–µ–Ω—ñ - —Ç–µ–ø–µ—Ä –≤—Å—è –º—É–∑–∏–∫–∞ –∫–µ—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
import indexedDBService from '../services/IndexedDBService';
import syncService from '../services/SyncService';
import domainSyncService from '../services/DomainSyncService';

// Screen components
import IntroScreen from "../components/IntroScreen";
import MainScreen from "../components/MainScreen";
import WelcomeScreen from "../components/WelcomeScreen";

// Audio context for global sound management
interface AudioContextType {
  isPlaying: boolean;
  toggle: () => void;
  isLoaded: boolean;
  canAutoPlay: boolean;
}

const AudioContext = createContext<AudioContextType | null>(null);

export const useGlobalAudio = () => {
  // –ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∞—É–¥—ñ–æ –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è - –≤—Å—è –º—É–∑–∏–∫–∞ —Ç–µ–ø–µ—Ä –∫–µ—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏
  return {
    isPlaying: false,
    toggle: () => {},
    isLoaded: true,
    canAutoPlay: true,
    play: () => Promise.resolve()
  };
};

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
let hasInitialLoadCompleted = false;

const Index = () => {
  const [screenState, setScreenState] = useState<'welcome' | 'intro' | 'main'>(() => {
    // –Ø–∫—â–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ - –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
    return hasInitialLoadCompleted ? 'main' : 'welcome';
  });

  const [welcomeSettings, setWelcomeSettings] = useState<any>(null);

  // Global audio management with auto-play disabled
  const { isPlaying, isLoaded, canAutoPlay, toggle, play } = useGlobalAudio();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–µ–≤—é —á–µ—Ä–µ–∑ IndexedDB
  useEffect(() => {
    const loadWelcomeSettings = async () => {
      try {
        console.log('üîÑ Index: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Welcome —á–µ—Ä–µ–∑ IndexedDBService...');
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ IndexedDB
        let indexedDBSettings = await indexedDBService.loadSettings('welcomeSettings');
        
        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —ñ —Ü–µ –Ω–µ –∞–¥–º—ñ–Ω —Ä–µ–∂–∏–º, –ª–æ–≥—É—î–º–æ —Ü–µ
        if (!indexedDBSettings && !domainSyncService.isAdminMode()) {
          console.log('üîÑ Index: –õ–æ–∫–∞–ª—å–Ω—ñ Welcome –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—É–±–ª—ñ—á–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ');
          // –í Domain-based —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ localStorage events
        }
        
        if (indexedDBSettings) {
          console.log('‚úÖ Index: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Welcome –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ IndexedDB');
          setWelcomeSettings(indexedDBSettings);
        } else {
          // –Ø–∫—â–æ IndexedDB –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–±—É—î–º–æ localStorage —è–∫ —Ä–µ–∑–µ—Ä–≤
          console.log('‚ÑπÔ∏è Index: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Welcome –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage...');
          const savedSettings = localStorage.getItem('welcomeSettings');
          if (savedSettings) {
            const parsed = JSON.parse(savedSettings);
            console.log('‚úÖ Index: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Welcome –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage');
            setWelcomeSettings(parsed);
            
            // –ú—ñ–≥—Ä—É—î–º–æ –≤ IndexedDB
            console.log('üîÑ Index: –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Welcome –≤ IndexedDB...');
            await indexedDBService.saveSettings('welcomeSettings', parsed, 'project');
            console.log('‚úÖ Index: –ú—ñ–≥—Ä–∞—Ü—ñ—è Welcome –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
        }
      } catch (error) {
        console.error('‚ùå Index: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Welcome:', error);
      }
    };

    loadWelcomeSettings();

    // –°–ª—É—Ö–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    const handleSettingsUpdate = (event: CustomEvent) => {
      setWelcomeSettings(event.detail);
    };

    window.addEventListener('welcomeSettingsUpdated', handleSettingsUpdate as EventListener);
    
    return () => {
      window.removeEventListener('welcomeSettingsUpdated', handleSettingsUpdate as EventListener);
    };
  }, []);

  // Handle welcome screen completion (user tapped to enter)
  const handleWelcomeComplete = async () => {
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—É –º—É–∑–∏–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤ –ø—Ä–µ–≤—é –Ω–µ–º–∞—î –≤–ª–∞—Å–Ω–æ—ó –º—É–∑–∏–∫–∏
    const hasCustomMusic = welcomeSettings?.hasMusic && welcomeSettings?.musicUrl;
    
    if (!hasCustomMusic && isLoaded) {
      try {
        await play();
      } catch (error) {
        // –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∞—É–¥—ñ–æ
      }
    }
    
    // Move to intro screen
    setScreenState('intro');
  };

  // Handle intro screen completion
  const handleIntroComplete = () => {
    setTimeout(() => {
      setScreenState('main');
      hasInitialLoadCompleted = true; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    }, 300);
  };

  // Fallback: Try to start audio on any user interaction (if not started yet)
  useEffect(() => {
    const handleFirstInteraction = async () => {
      const hasCustomMusic = welcomeSettings?.hasMusic && welcomeSettings?.musicUrl;
      
      if (!hasCustomMusic && isLoaded && !canAutoPlay && !isPlaying && screenState !== 'welcome') {
        await play();
      }
    };

    // Listen for first user interaction
    const events = ['click', 'touchstart', 'keydown'];
    events.forEach(event => {
      document.addEventListener(event, handleFirstInteraction, { once: true });
    });

    return () => {
      events.forEach(event => {
        document.removeEventListener(event, handleFirstInteraction);
      });
    };
  }, [isLoaded, canAutoPlay, isPlaying, play, screenState, welcomeSettings]);

  // –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä—É –º—É–∑–∏–∫—É –∫–æ–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  useEffect(() => {
    if (screenState === 'main' && isPlaying) {
      // –ó—É–ø–∏–Ω—è—î–º–æ —Å—Ç–∞—Ä—É –≥–ª–æ–±–∞–ª—å–Ω—É –º—É–∑–∏–∫—É –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
      toggle(); // –¶–µ –∑—É–ø–∏–Ω–∏—Ç—å —Å—Ç–∞—Ä—É –º—É–∑–∏–∫—É
    }
  }, [screenState, isPlaying, toggle]);

  const audioContextValue = {
    isPlaying,
    toggle,
    isLoaded,
    canAutoPlay
  };

  return (
    <AudioContext.Provider value={audioContextValue}>
      <div className="w-full h-screen overflow-hidden bg-gradient-to-b from-[#f9fafb] to-[#f7f8fa]">
        <AnimatePresence mode="wait" initial={false}>
          {screenState === 'welcome' && !hasInitialLoadCompleted && (
            <WelcomeScreen 
              key="welcome" 
              onComplete={handleWelcomeComplete}
              isAudioLoaded={isLoaded}
            />
          )}
          
          {screenState === 'intro' && !hasInitialLoadCompleted && (
            <IntroScreen 
              key="intro" 
              onComplete={handleIntroComplete} 
            />
          )}
          
          {(screenState === 'main' || hasInitialLoadCompleted) && (
            <MainScreen key="main" />
          )}
        </AnimatePresence>
      </div>
    </AudioContext.Provider>
  );
};

export default Index;
