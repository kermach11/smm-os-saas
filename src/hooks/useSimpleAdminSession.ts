import { useState, useEffect, useCallback } from 'react';

interface AdminSessionData {
  timestamp: number;
  expiry: number;
}

export const useSimpleAdminSession = () => {
  const [isAdmin, setIsAdmin] = useState(false);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    checkExistingSession();
    checkAdminUrlParameter();
  }, []);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ admin
  const checkAdminUrlParameter = useCallback(() => {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.has('admin');
  }, []);

  const checkExistingSession = useCallback(() => {
    try {
      const sessionData = localStorage.getItem('adminSession');
      if (sessionData) {
        const session = JSON.parse(sessionData) as { expiry: number };
        const now = new Date().getTime();
        return now < session.expiry;
      }
    } catch (error) {
      console.error('Error checking session:', error);
    }
    return false;
  }, []);

  const login = useCallback(() => {
    setIsAdmin(true);
  }, []);

  const logout = useCallback(() => {
    localStorage.removeItem('adminSession');
    setIsAdmin(false);
  }, []);

  const shouldShowAdminButton = useCallback((): boolean => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('admin')) {
      console.log('üîß Admin button: –ü–æ–∫–∞–∑—É—é —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä ?admin');
      return true;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ localStorage
    try {
      const savedData = localStorage.getItem('immersiveExperienceData');
      if (savedData) {
        const data = JSON.parse(savedData);
        if (data.adminSettings?.showAdminButton) {
          console.log('üîß Admin button: –ü–æ–∫–∞–∑—É—é —á–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è showAdminButton');
          return true;
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    if (isAdmin) {
      console.log('üîß Admin button: –ü–æ–∫–∞–∑—É—é –±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      return true;
    }
    
    console.log('üîß Admin button: –ü—Ä–∏—Ö–æ–≤—É—é - –Ω–µ–º–∞—î –ø—ñ–¥—Å—Ç–∞–≤ –¥–ª—è –ø–æ–∫–∞–∑—É');
    return false;
  }, [isAdmin]);

  return {
    isAdmin,
    login,
    logout,
    checkExistingSession,
    shouldShowAdminButton,
    checkAdminUrlParameter
  };
}; 