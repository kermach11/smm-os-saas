import { useState, useEffect, useCallback } from 'react';
import { adminManager, AdminPanelVersion, DeviceType } from '../../components/admin-v2/AdminManager';

interface AdminPanelV2State {
  isVisible: boolean;
  currentVersion: AdminPanelVersion;
  deviceType: DeviceType;
  activeTab: string;
  isAuthenticated: boolean;
}

interface AdminPanelV2Config {
  width: string;
  height: string;
  padding: string;
  fontSize: {
    header: string;
    body: string;
    small: string;
  };
  spacing: {
    tabs: string;
    content: string;
    margins: string;
  };
}

/**
 * üéØ Hook –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª–ª—é V2
 * 
 * –ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞–¥ —Å—Ç–∞—Ä–æ—é —Å–∏—Å—Ç–µ–º–æ—é:
 * - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é
 * - –õ–µ–≥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
 * - –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
 */
export const useAdminPanelV2 = () => {
  const [state, setState] = useState<AdminPanelV2State>(adminManager.getState());
  const [config, setConfig] = useState<AdminPanelV2Config>(adminManager.getDeviceConfig());

  // üì° –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
  useEffect(() => {
    const unsubscribe = adminManager.subscribe((newState) => {
      setState(newState);
      setConfig(adminManager.getDeviceConfig());
    });

    return unsubscribe;
  }, []);

  // üéõÔ∏è –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–Ω–µ–ª–ª—é
  const togglePanel = useCallback((forceState?: boolean) => {
    adminManager.togglePanel(forceState);
  }, []);

  const switchVersion = useCallback((version: AdminPanelVersion) => {
    adminManager.switchVersion(version);
  }, []);

  const setActiveTab = useCallback((tab: string) => {
    adminManager.setActiveTab(tab);
  }, []);

  const setAuthenticated = useCallback((isAuthenticated: boolean) => {
    adminManager.setAuthenticated(isAuthenticated);
  }, []);

  // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞
  const shouldShowAdminButton = useCallback(() => {
    return adminManager.shouldShowAdminButton();
  }, []);

  // üìê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
  const getOptimalDimensions = useCallback(() => {
    return adminManager.getOptimalDimensions();
  }, []);

  // üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
  const getDeviceStyles = useCallback(() => {
    const { isMobile, isTablet, isDesktop } = adminManager.getOptimalDimensions();
    
    return {
      container: {
        width: config.width,
        height: config.height,
        padding: config.padding,
        fontSize: config.fontSize.body,
        // Responsive –∫–ª–∞—Å–∏
        className: `
          ${isMobile ? 'admin-panel-mobile' : ''}
          ${isTablet ? 'admin-panel-tablet' : ''}
          ${isDesktop ? 'admin-panel-desktop' : ''}
        `.trim()
      },
      header: {
        fontSize: config.fontSize.header,
        marginBottom: config.spacing.margins
      },
      tabs: {
        gap: config.spacing.tabs,
        fontSize: config.fontSize.small
      },
      content: {
        padding: config.spacing.content,
        fontSize: config.fontSize.body
      }
    };
  }, [config]);

  // üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –≤–µ—Ä—Å—ñ—è–º–∏
  const toggleVersionSafely = useCallback(() => {
    const newVersion: AdminPanelVersion = state.currentVersion === 'v1' ? 'v2' : 'v1';
    switchVersion(newVersion);
  }, [state.currentVersion, switchVersion]);

  // üö® –ê–≤–∞—Ä—ñ–π–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ v1
  const forceV1 = useCallback(() => {
    switchVersion('v1');
    console.log('üö® Forced switch to Admin Panel V1');
  }, [switchVersion]);

  // üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
  const testV2 = useCallback(() => {
    switchVersion('v2');
    console.log('üß™ Testing Admin Panel V2');
  }, [switchVersion]);

  return {
    // –°—Ç–∞–Ω
    isVisible: state.isVisible,
    currentVersion: state.currentVersion,
    deviceType: state.deviceType,
    activeTab: state.activeTab,
    isAuthenticated: state.isAuthenticated,
    
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config,
    
    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    togglePanel,
    switchVersion,
    setActiveTab,
    setAuthenticated,
    
    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    shouldShowAdminButton,
    getOptimalDimensions,
    getDeviceStyles,
    
    // –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
    toggleVersionSafely,
    forceV1,
    testV2,
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ
    isV1: state.currentVersion === 'v1',
    isV2: state.currentVersion === 'v2',
    isMobile: state.deviceType === 'mobile',
    isTablet: state.deviceType === 'tablet',
    isDesktop: state.deviceType === 'desktop'
  };
}; 