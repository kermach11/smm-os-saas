import { useState, useEffect, useCallback } from 'react';
import { adminManager, AdminPanelVersion, DeviceType } from '../../components/admin-v2/AdminManager';

interface AdminPanelV2State {
  isVisible: boolean;
  currentVersion: AdminPanelVersion;
  deviceType: DeviceType;
  activeTab: string;
  isAuthenticated: boolean;
}

interface AdminPanelV2Config {
  width: string;
  height: string;
  padding: string;
  fontSize: {
    header: string;
    body: string;
    small: string;
  };
  spacing: {
    tabs: string;
    content: string;
    margins: string;
  };
}

interface AdminSessionData {
  timestamp: number;
  expiry: number;
}

/**
 * üéØ Hook –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª–ª—é V2
 * 
 * –ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞–¥ —Å—Ç–∞—Ä–æ—é —Å–∏—Å—Ç–µ–º–æ—é:
 * - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—Å—Ç—Ä–æ—é
 * - –õ–µ–≥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
 * - –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
 * - –ü–æ–≤–Ω–∞ –∑–∞–º—ñ–Ω–∞ V1 useSimpleAdminSession
 */
export const useAdminPanelV2 = () => {
  const [state, setState] = useState<AdminPanelV2State>(adminManager.getState());
  const [config, setConfig] = useState<AdminPanelV2Config>(adminManager.getDeviceConfig());

  // üì° –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
  useEffect(() => {
    const unsubscribe = adminManager.subscribe((newState) => {
      setState(newState);
      setConfig(adminManager.getDeviceConfig());
    });

    return unsubscribe;
  }, []);

  // üîê SESSION MANAGEMENT (–∑ V1 useSimpleAdminSession)
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è showAdminButton
    try {
      const savedData = localStorage.getItem('immersiveExperienceData');
      if (savedData) {
        const data = JSON.parse(savedData);
        if (data.adminSettings?.showAdminButton) {
          delete data.adminSettings.showAdminButton;
          localStorage.setItem('immersiveExperienceData', JSON.stringify(data));
          console.log('üîß –û—á–∏—â–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É showAdminButton');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–æ–∫:', error);
    }

    const hasValidSession = checkExistingSession();
    if (hasValidSession) {
      setAuthenticated(true);
      console.log('‚úÖ Admin session V2: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω—É —Å–µ—Å—ñ—é');
    }
    checkAdminUrlParameter();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π logout –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó
  useEffect(() => {
    if (state.isAuthenticated) {
      const sessionData = localStorage.getItem('adminSession');
      if (sessionData) {
        try {
          const session = JSON.parse(sessionData) as AdminSessionData;
          const now = new Date().getTime();
          const timeLeft = session.expiry - now;
          
          if (timeLeft > 0) {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ logout
            const timer = setTimeout(() => {
              console.log('‚è∞ Admin session V2: –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ö—ñ–¥');
              logout();
            }, timeLeft);
            
            return () => clearTimeout(timer);
          } else {
            // –°–µ—Å—ñ—è –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
            logout();
          }
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ logout:', error);
          logout();
        }
      }
    }
  }, [state.isAuthenticated]);

  // üéõÔ∏è –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–Ω–µ–ª–ª—é
  const togglePanel = useCallback((forceState?: boolean) => {
    adminManager.togglePanel(forceState);
  }, []);

  const switchVersion = useCallback((version: AdminPanelVersion) => {
    adminManager.switchVersion(version);
  }, []);

  const setActiveTab = useCallback((tab: string) => {
    adminManager.setActiveTab(tab);
  }, []);

  const setAuthenticated = useCallback((isAuthenticated: boolean) => {
    adminManager.setAuthenticated(isAuthenticated);
  }, []);

  // üîê SESSION METHODS (–∑ V1 useSimpleAdminSession)
  const checkExistingSession = useCallback(() => {
    try {
      const sessionData = localStorage.getItem('adminSession');
      if (sessionData) {
        const session = JSON.parse(sessionData) as AdminSessionData;
        const now = new Date().getTime();
        
        if (now < session.expiry) {
          console.log('‚úÖ Admin session V2: –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω—É —Å–µ—Å—ñ—é, –∑–∞–ª–∏—à–∏–ª–æ—Å—å:', Math.round((session.expiry - now) / 1000 / 60), '—Ö–≤–∏–ª–∏–Ω');
          return true;
        } else {
          console.log('‚è∞ Admin session V2: –°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞, –≤–∏–¥–∞–ª—è—î–º–æ');
          localStorage.removeItem('adminSession');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–µ—Å—ñ—ó:', error);
      localStorage.removeItem('adminSession');
    }
    return false;
  }, []);

  const login = useCallback(() => {
    setAuthenticated(true);
    console.log('üîê Admin session V2: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤');
  }, [setAuthenticated]);

  const logout = useCallback(() => {
    localStorage.removeItem('adminSession');
    setAuthenticated(false);
    console.log('üîê Admin session V2: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤');
  }, [setAuthenticated]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ admin
  const checkAdminUrlParameter = useCallback(() => {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.has('admin');
  }, []);

  // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞ (–ø–æ–∫—Ä–∞—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ V1)
  const shouldShowAdminButton = useCallback((): boolean => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('admin')) {
      return true;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Ä—Ç 8081 (–∞–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä)
    if (window.location.port === '8081') {
      return true;
    }
    
    // V2: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è development mode
    if (process.env.NODE_ENV === 'development') {
      return true;
    }
    
    return false;
  }, []);

  // üìê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
  const getOptimalDimensions = useCallback(() => {
    return adminManager.getOptimalDimensions();
  }, []);

  // üé® –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
  const getDeviceStyles = useCallback(() => {
    const { isMobile, isTablet, isDesktop } = adminManager.getOptimalDimensions();
    
    return {
      container: {
        width: config.width,
        height: config.height,
        padding: config.padding,
        fontSize: config.fontSize.body,
        // Responsive –∫–ª–∞—Å–∏
        className: `
          ${isMobile ? 'admin-panel-mobile' : ''}
          ${isTablet ? 'admin-panel-tablet' : ''}
          ${isDesktop ? 'admin-panel-desktop' : ''}
        `.trim()
      },
      header: {
        fontSize: config.fontSize.header,
        marginBottom: config.spacing.margins
      },
      tabs: {
        gap: config.spacing.tabs,
        fontSize: config.fontSize.small
      },
      content: {
        padding: config.spacing.content,
        fontSize: config.fontSize.body
      }
    };
  }, [config]);

  // üîÑ –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –≤–µ—Ä—Å—ñ—è–º–∏
  const toggleVersionSafely = useCallback(() => {
    const newVersion: AdminPanelVersion = state.currentVersion === 'v1' ? 'v2' : 'v1';
    switchVersion(newVersion);
  }, [state.currentVersion, switchVersion]);

  // üö® –ê–≤–∞—Ä—ñ–π–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ v1
  const forceV1 = useCallback(() => {
    switchVersion('v1');
    console.log('üö® Forced switch to Admin Panel V1');
  }, [switchVersion]);

  // üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
  const testV2 = useCallback(() => {
    switchVersion('v2');
    console.log('üß™ Testing Admin Panel V2');
  }, [switchVersion]);

  return {
    // –°—Ç–∞–Ω
    isVisible: state.isVisible,
    currentVersion: state.currentVersion,
    deviceType: state.deviceType,
    activeTab: state.activeTab,
    isAuthenticated: state.isAuthenticated,
    
    // V1 Compatibility (alias –¥–ª—è isAuthenticated)
    isAdmin: state.isAuthenticated,
    
    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    config,
    
    // –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    togglePanel,
    switchVersion,
    setActiveTab,
    setAuthenticated,
    
    // V1 Session Management
    login,
    logout,
    checkExistingSession,
    checkAdminUrlParameter,
    
    // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    shouldShowAdminButton,
    getOptimalDimensions,
    getDeviceStyles,
    
    // –ë–µ–∑–ø–µ—á–Ω–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
    toggleVersionSafely,
    forceV1,
    testV2,
    
    // –ú–µ—Ç–∞–¥–∞–Ω—ñ
    isV1: state.currentVersion === 'v1',
    isV2: state.currentVersion === 'v2',
    isMobile: state.deviceType === 'mobile',
    isTablet: state.deviceType === 'tablet',
    isDesktop: state.deviceType === 'desktop'
  };
}; 