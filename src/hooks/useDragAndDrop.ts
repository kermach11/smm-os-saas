import { useState, useCallback, useRef, useEffect } from 'react';
import { MainScreenBoxes } from '../config/responsiveConfig';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º IndexedDB —Å–µ—Ä–≤–∏—Å
import { indexedDBService } from '../services/IndexedDBService';

interface Position {
  x: number;
  y: number;
}

// üéØ –ù–û–í–ò–ô: –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π (—É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö)
interface RelativePosition {
  x: number; // –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (0-100)
  y: number; // –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (0-100)
}

interface BoxPosition extends Position {
  boxName: keyof MainScreenBoxes;
  deviceType: 'mobile' | 'tablet' | 'desktop';
  width?: number;
  height?: number;
  scale?: number;
  // üéØ –ù–û–í–ò–ô: –î–æ–¥–∞—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
  relativeX?: number; // –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞
  relativeY?: number; // –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞
}

interface DragState {
  isDragging: boolean;
  draggedBox: keyof MainScreenBoxes | null;
  startPosition: Position;
  currentPosition: Position;
  offset: Position;
}

// üéØ –ù–û–í–ò–ô —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π
interface SnapLines {
  showVerticalCenter: boolean;
  showHorizontalCenter: boolean;
  snapToVerticalCenter: boolean;
  snapToHorizontalCenter: boolean;
  snapThreshold: number;
}

interface UseDragAndDropReturn {
  // –°—Ç–∞–Ω–∏
  isConstructorMode: boolean;
  dragState: DragState;
  boxPositions: Record<string, BoxPosition>;
  
  // üéØ –ù–û–í–ò–ô —Å—Ç–∞–Ω –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π
  snapLines: SnapLines;
  
  // –§—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
  enableConstructorMode: () => void;
  disableConstructorMode: () => void;
  toggleConstructorMode: () => void;
  
  // Drag & Drop —Ñ—É–Ω–∫—Ü—ñ—ó
  handleMouseDown: (boxName: keyof MainScreenBoxes, event: React.MouseEvent) => void;
  handleMouseMove: (event: React.MouseEvent) => void;
  handleMouseUp: () => void;
  
  // üéØ –ù–û–í–ò–ô: Touch —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
  handleTouchStart: (boxName: keyof MainScreenBoxes, event: React.TouchEvent) => void;
  handleTouchMove: (event: React.TouchEvent) => void;
  handleTouchEnd: () => void;
  
  // –ü–æ–∑–∏—Ü—ñ—ó –±–æ–∫—Å—ñ–≤
  getBoxPosition: (boxName: keyof MainScreenBoxes) => Position | null;
  setBoxPosition: (boxName: keyof MainScreenBoxes, position: Position, shouldSave?: boolean) => void;
  resetBoxPosition: (boxName: keyof MainScreenBoxes) => Promise<void>;
  resetAllPositions: () => Promise<void>;
  
  // –†–æ–∑–º—ñ—Ä–∏ –±–æ–∫—Å—ñ–≤
  getBoxSize: (boxName: keyof MainScreenBoxes) => { width?: number; height?: number; scale?: number } | null;
  setBoxSize: (boxName: keyof MainScreenBoxes, size: { width?: number; height?: number; scale?: number }) => void;
  increaseBoxSize: (boxName: keyof MainScreenBoxes, step?: number) => void;
  decreaseBoxSize: (boxName: keyof MainScreenBoxes, step?: number) => void;
  
  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  savePositions: () => Promise<void>;
  loadPositions: () => Promise<void>;
  saveAllPositions: () => Promise<{ success: boolean; savedCount?: number; error?: any }>;
  
  // üéØ –ù–û–í–ò–ô: –ó–∞–≤–æ–¥—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  setCurrentPositionsAsDefault: () => Record<string, RelativePosition>;
  
  // –£—Ç–∏–ª—ñ—Ç–∏
  snapToGrid: boolean;
  gridSize: number;
  setSnapToGrid: (snap: boolean) => void;
  setGridSize: (size: number) => void;
}

export const useDragAndDrop = (deviceType: 'mobile' | 'tablet' | 'desktop'): UseDragAndDropReturn => {
  // –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞–Ω–∏
  const [isConstructorMode, setIsConstructorMode] = useState<boolean>(() => {
    // üéØ –ù–û–í–ò–ô: –ó–∞–≤–∂–¥–∏ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    // –¶–µ –ø–æ–∫—Ä–∞—â—É—î UX - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –≤–∏–ø–∞–¥–∫–æ–≤–æ
    return false;
  });
  const [boxPositions, setBoxPositions] = useState<Record<string, BoxPosition>>({});
  const [snapToGrid, setSnapToGrid] = useState<boolean>(true);
  const [gridSize, setGridSize] = useState<number>(8);
  
  // üéØ –ù–û–í–ò–ô —Å—Ç–∞–Ω –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π
  const [snapLines, setSnapLines] = useState<SnapLines>({
    showVerticalCenter: false,
    showHorizontalCenter: false,
    snapToVerticalCenter: false,
    snapToHorizontalCenter: false,
    snapThreshold: 15 // –ø—ñ–∫—Å–µ–ª—ñ–≤ –¥–ª—è —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—è
  });
  
  // –°—Ç–∞–Ω –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  const [dragState, setDragState] = useState<DragState>({
    isDragging: false,
    draggedBox: null,
    startPosition: { x: 0, y: 0 },
    currentPosition: { x: 0, y: 0 },
    offset: { x: 0, y: 0 }
  });

  // –†–µ—Ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π
  const isDraggingRef = useRef<boolean>(false);

  // üéØ –ù–û–í–ò–ô: –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –º—ñ–∂ –∞–±—Å–æ–ª—é—Ç–Ω–∏–º–∏ —ñ –≤—ñ–¥–Ω–æ—Å–Ω–∏–º–∏ –ø–æ–∑–∏—Ü—ñ—è–º–∏
  const absoluteToRelative = useCallback((position: Position): RelativePosition => {
    const { innerWidth, innerHeight } = window;
    return {
      x: (position.x / innerWidth) * 100,
      y: (position.y / innerHeight) * 100
    };
  }, []);

  const relativeToAbsolute = useCallback((relativePosition: RelativePosition): Position => {
    const { innerWidth, innerHeight } = window;
    return {
      x: (relativePosition.x / 100) * innerWidth,
      y: (relativePosition.y / 100) * innerHeight
    };
  }, []);

  // üéØ –ù–û–í–ò–ô: –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó paginationBox
  const adjustPositionForPagination = useCallback((position: Position, boxName: keyof MainScreenBoxes): Position => {
    if (boxName !== 'paginationBox') return position;
    
    // –î–ª—è paginationBox –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ flex center
    // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
    const estimatedWidth = 200; // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —à–∏—Ä–∏–Ω–∞ pagination –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    
    return {
      x: position.x - estimatedWidth / 2,
      y: position.y
    };
  }, []);

  // –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è snap to grid
  const snapPositionToGrid = useCallback((position: Position): Position => {
    if (!snapToGrid) return position;
    
    return {
      x: Math.round(position.x / gridSize) * gridSize,
      y: Math.round(position.y / gridSize) * gridSize
    };
  }, [snapToGrid, gridSize]);

  // üéØ –ù–û–í–ò–ô: –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π
  const calculateSnapLines = useCallback((boxName: keyof MainScreenBoxes, position: Position, boxSize?: { width?: number; height?: number }) => {
    const windowCenterX = window.innerWidth / 2;
    const windowCenterY = window.innerHeight / 2;
    
    // üì± –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –±–æ–∫—Å—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    const estimatedBoxSizes = deviceType === 'mobile' ? {
      // –ú–æ–±—ñ–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (–º–µ–Ω—à—ñ)
      logoBox: { width: 150, height: 45 },
      soundToggleBox: { width: 45, height: 45 },
      headerTextBox: { width: 280, height: 80 },
      carouselBox: { width: 320, height: 240 },
      paginationBox: { width: 150, height: 40 },
      adminButtonBox: { width: 45, height: 45 },
      adminPanelBox: { width: 300, height: 200 }
    } : deviceType === 'tablet' ? {
      // –ü–ª–∞–Ω—à–µ—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å–µ—Ä–µ–¥–Ω—ñ)
      logoBox: { width: 175, height: 52 },
      soundToggleBox: { width: 52, height: 52 },
      headerTextBox: { width: 350, height: 90 },
      carouselBox: { width: 480, height: 320 },
      paginationBox: { width: 175, height: 45 },
      adminButtonBox: { width: 52, height: 52 },
      adminPanelBox: { width: 350, height: 250 }
    } : {
      // –î–µ—Å–∫—Ç–æ–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ)
      logoBox: { width: 200, height: 60 },
      soundToggleBox: { width: 60, height: 60 },
      headerTextBox: { width: 400, height: 100 },
      carouselBox: { width: 600, height: 400 },
      paginationBox: { width: 200, height: 50 },
      adminButtonBox: { width: 60, height: 60 },
      adminPanelBox: { width: 400, height: 300 }
    };
    
    const boxDimensions = boxSize || estimatedBoxSizes[boxName] || { width: 100, height: 100 };
    
    // –¶–µ–Ω—Ç—Ä –±–æ–∫—Å—É
    const boxCenterX = position.x + boxDimensions.width / 2;
    const boxCenterY = position.y + boxDimensions.height / 2;
    
    // –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –æ—Å–µ–π
    const distanceToVerticalCenter = Math.abs(boxCenterX - windowCenterX);
    const distanceToHorizontalCenter = Math.abs(boxCenterY - windowCenterY);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—ó
    const showVerticalCenter = distanceToVerticalCenter <= snapLines.snapThreshold * 3; // –ø–æ–∫–∞–∑—É—î–º–æ —Ç—Ä–æ—Ö–∏ —Ä–∞–Ω—ñ—à–µ
    const showHorizontalCenter = distanceToHorizontalCenter <= snapLines.snapThreshold * 3;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ snap-–∏—Ç–∏
    const snapToVerticalCenter = distanceToVerticalCenter <= snapLines.snapThreshold;
    const snapToHorizontalCenter = distanceToHorizontalCenter <= snapLines.snapThreshold;
    
    return {
      showVerticalCenter,
      showHorizontalCenter,
      snapToVerticalCenter,
      snapToHorizontalCenter,
      windowCenterX,
      windowCenterY,
      boxCenterX,
      boxCenterY,
      distanceToVerticalCenter,
      distanceToHorizontalCenter
    };
  }, [snapLines.snapThreshold, deviceType]);

  // üéØ –ù–û–í–ò–ô: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è snap –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π
  const snapToCenter = useCallback((position: Position, boxName: keyof MainScreenBoxes) => {
    const snapInfo = calculateSnapLines(boxName, position);
    
    let snappedPosition = { ...position };
    
    // Snap –¥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É (–≤—ñ—Å—å X)
    if (snapInfo.snapToVerticalCenter) {
      const estimatedBoxSizes = deviceType === 'mobile' ? {
        // –ú–æ–±—ñ–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (–º–µ–Ω—à—ñ)
        logoBox: { width: 150, height: 45 },
        soundToggleBox: { width: 45, height: 45 },
        headerTextBox: { width: 280, height: 80 },
        carouselBox: { width: 320, height: 240 },
        paginationBox: { width: 150, height: 40 },
        adminButtonBox: { width: 45, height: 45 },
        adminPanelBox: { width: 300, height: 200 }
      } : deviceType === 'tablet' ? {
        // –ü–ª–∞–Ω—à–µ—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å–µ—Ä–µ–¥–Ω—ñ)
        logoBox: { width: 175, height: 52 },
        soundToggleBox: { width: 52, height: 52 },
        headerTextBox: { width: 350, height: 90 },
        carouselBox: { width: 480, height: 320 },
        paginationBox: { width: 175, height: 45 },
        adminButtonBox: { width: 52, height: 52 },
        adminPanelBox: { width: 350, height: 250 }
      } : {
        // –î–µ—Å–∫—Ç–æ–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ)
        logoBox: { width: 200, height: 60 },
        soundToggleBox: { width: 60, height: 60 },
        headerTextBox: { width: 400, height: 100 },
        carouselBox: { width: 600, height: 400 },
        paginationBox: { width: 200, height: 50 },
        adminButtonBox: { width: 60, height: 60 },
        adminPanelBox: { width: 400, height: 300 }
      };
      
      const boxWidth = estimatedBoxSizes[boxName]?.width || 100;
      snappedPosition.x = snapInfo.windowCenterX - boxWidth / 2;
    }
    
    // Snap –¥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É (–≤—ñ—Å—å Y)
    if (snapInfo.snapToHorizontalCenter) {
      const estimatedBoxSizes = deviceType === 'mobile' ? {
        // –ú–æ–±—ñ–ª—å–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (–º–µ–Ω—à—ñ)
        logoBox: { width: 150, height: 45 },
        soundToggleBox: { width: 45, height: 45 },
        headerTextBox: { width: 280, height: 80 },
        carouselBox: { width: 320, height: 240 },
        paginationBox: { width: 150, height: 40 },
        adminButtonBox: { width: 45, height: 45 },
        adminPanelBox: { width: 300, height: 200 }
      } : deviceType === 'tablet' ? {
        // –ü–ª–∞–Ω—à–µ—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å–µ—Ä–µ–¥–Ω—ñ)
        logoBox: { width: 175, height: 52 },
        soundToggleBox: { width: 52, height: 52 },
        headerTextBox: { width: 350, height: 90 },
        carouselBox: { width: 480, height: 320 },
        paginationBox: { width: 175, height: 45 },
        adminButtonBox: { width: 52, height: 52 },
        adminPanelBox: { width: 350, height: 250 }
      } : {
        // –î–µ—Å–∫—Ç–æ–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ)
        logoBox: { width: 200, height: 60 },
        soundToggleBox: { width: 60, height: 60 },
        headerTextBox: { width: 400, height: 100 },
        carouselBox: { width: 600, height: 400 },
        paginationBox: { width: 200, height: 50 },
        adminButtonBox: { width: 60, height: 60 },
        adminPanelBox: { width: 400, height: 300 }
      };
      
      const boxHeight = estimatedBoxSizes[boxName]?.height || 100;
      snappedPosition.y = snapInfo.windowCenterY - boxHeight / 2;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π
    setSnapLines(prev => ({
      ...prev,
      showVerticalCenter: snapInfo.showVerticalCenter,
      showHorizontalCenter: snapInfo.showHorizontalCenter,
      snapToVerticalCenter: snapInfo.snapToVerticalCenter,
      snapToHorizontalCenter: snapInfo.snapToHorizontalCenter
    }));
    
    return snappedPosition;
  }, [calculateSnapLines, deviceType]);

  // –§—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
  const enableConstructorMode = useCallback(() => {
    setIsConstructorMode(true);
    document.body.style.userSelect = 'none';
    document.body.style.cursor = 'crosshair';
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º—ñ–∂ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    window.dispatchEvent(new CustomEvent('constructorModeChanged', { 
      detail: { isConstructorMode: true } 
    }));
    

  }, []);

  const disableConstructorMode = useCallback(() => {
    setIsConstructorMode(false);
    setDragState(prev => ({ ...prev, isDragging: false, draggedBox: null }));
    document.body.style.userSelect = '';
    document.body.style.cursor = '';
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º—ñ–∂ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    window.dispatchEvent(new CustomEvent('constructorModeChanged', { 
      detail: { isConstructorMode: false } 
    }));
    

  }, []);

  const toggleConstructorMode = useCallback(() => {
    if (isConstructorMode) {
      disableConstructorMode();
    } else {
      enableConstructorMode();
    }
  }, [isConstructorMode, enableConstructorMode, disableConstructorMode]);



  // Drag & Drop –æ–±—Ä–æ–±–Ω–∏–∫–∏ (—ñ—Å–Ω—É—é—á—ñ mouse –æ–±—Ä–æ–±–Ω–∏–∫–∏)
  const handleMouseDown = useCallback((boxName: keyof MainScreenBoxes, event: React.MouseEvent) => {
    if (!isConstructorMode) return;
    
    event.preventDefault();
    event.stopPropagation();
    
    const element = event.currentTarget as HTMLElement;
    const rect = element.getBoundingClientRect();
    
    // Offset - —Ü–µ –∑–º—ñ—â–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä–∞ –≤—ñ–¥ –ª—ñ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –∫—É—Ç–∞ –µ–ª–µ–º–µ–Ω—Ç–∞
    const offset = {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top
    };
    
    // –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
    const currentPosition = { x: rect.left, y: rect.top };
    
    setDragState({
      isDragging: true,
      draggedBox: boxName,
      startPosition: { x: event.clientX, y: event.clientY },
      currentPosition,
      offset
    });
    
    isDraggingRef.current = true;
    document.body.style.cursor = 'grabbing';
    

  }, [isConstructorMode]);

  const handleMouseMove = useCallback((event: React.MouseEvent) => {
    if (!isDraggingRef.current || !dragState.isDragging || !dragState.draggedBox) return;
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é: –ø–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –º–∏—à—ñ –º—ñ–Ω—É—Å offset
    const newPosition = {
      x: event.clientX - dragState.offset.x,
      y: event.clientY - dragState.offset.y
    };
    
    // üéØ –°–ü–†–û–©–ï–ù–Ü –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö, –ê–î–ê–ü–¢–ò–í–ù–Ü –¥–ª—è –±—ñ–ª—å—à–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤
    const getBoxConstraints = (boxName: string) => {
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const isMobile = screenWidth <= 768;
      
      if (isMobile) {
        // üì± –ú–û–ë–Ü–õ–¨–ù–Ü: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–≤–æ–±–æ–¥–∞ - –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è  
        const margin = 0; // –ë–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –≤—ñ–¥ –∫—Ä–∞—é
        return {
          minX: margin,
          maxX: screenWidth - 10 - margin, // –†–µ–∑–µ—Ä–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10px –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
          minY: margin,
          maxY: screenHeight - 10 - margin // –†–µ–∑–µ—Ä–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10px –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
        };
      } else {
        // üíª –î–ï–°–ö–¢–û–ü/–ü–õ–ê–ù–®–ï–¢: –î–µ—Ç–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—ñ–≤ –±–æ–∫—Å—ñ–≤
        const margin = 20;
        const isTablet = screenWidth <= 1024;
        
        const getAdaptiveBoxSize = (boxName: string) => {
          const sizes = {
            adminButtonBox: { width: 60, height: 60 },
            logoBox: { width: isTablet ? 250 : 200, height: isTablet ? 80 : 100 },
            soundToggleBox: { width: 60, height: 60 },
            headerTextBox: { width: isTablet ? 450 : 400, height: isTablet ? 150 : 200 },
            carouselBox: { width: isTablet ? 500 : 600, height: isTablet ? 350 : 400 },
            paginationBox: { width: isTablet ? 280 : 300, height: 50 }
          };
          return sizes[boxName] || { width: 100, height: 100 };
        };
        
        const boxSize = getAdaptiveBoxSize(boxName);
        const maxX = Math.max(margin, screenWidth - boxSize.width - margin);
        const maxY = Math.max(margin, screenHeight - boxSize.height - margin);
        
        return {
          minX: margin,
          maxX: maxX,
          minY: margin,
          maxY: maxY
        };
      }
    };
    
    const constraints = getBoxConstraints(dragState.draggedBox);
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
    const boundedPosition = {
      x: Math.max(constraints.minX, Math.min(constraints.maxX, newPosition.x)),
      y: Math.max(constraints.minY, Math.min(constraints.maxY, newPosition.y))
    };
    
    const gridSnappedPosition = snapPositionToGrid(boundedPosition);
    
    // üéØ –ù–û–í–ò–ô: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ snap –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π
    const centerSnappedPosition = snapToCenter(gridSnappedPosition, dragState.draggedBox);
    
    setDragState(prev => ({
      ...prev,
      currentPosition: centerSnappedPosition
    }));
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setBoxPosition –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è (shouldSave = false)
    setBoxPosition(dragState.draggedBox, centerSnappedPosition, false);
    

      }, [dragState, deviceType, snapPositionToGrid, snapToCenter]);

  const handleMouseUp = useCallback(async () => {
    if (!isDraggingRef.current || !dragState.isDragging) return;
    

    
    // –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    if (dragState.draggedBox && dragState.currentPosition) {
      setBoxPosition(dragState.draggedBox, dragState.currentPosition, true);

      
      // –ù–µ–≥–∞–π–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ IndexedDB –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
      try {
        const key = `${dragState.draggedBox}_${deviceType}`;
        const updatedPositions = {
          ...boxPositions,
          [key]: {
            boxName: dragState.draggedBox,
            deviceType,
            ...dragState.currentPosition
          }
        };
        
        await indexedDBService.saveSettings('boxPositions', updatedPositions, 'constructor');

      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–µ–≥–∞–π–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó:', error);
      }
    }
    
    setDragState({
      isDragging: false,
      draggedBox: null,
      startPosition: { x: 0, y: 0 },
      currentPosition: { x: 0, y: 0 },
      offset: { x: 0, y: 0 }
    });
    
    isDraggingRef.current = false;
    document.body.style.cursor = isConstructorMode ? 'crosshair' : '';
    
    // üéØ –ù–û–í–ò–ô: –°–∫–∏–¥–∞—î–º–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—á—ñ –ª—ñ–Ω—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    setSnapLines(prev => ({
      ...prev,
      showVerticalCenter: false,
      showHorizontalCenter: false,
      snapToVerticalCenter: false,
      snapToHorizontalCenter: false
    }));
  }, [dragState, isConstructorMode, deviceType, boxPositions]);



  // –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  useEffect(() => {
    const handleGlobalMouseMove = (event: MouseEvent) => {
      if (isDraggingRef.current) {
        handleMouseMove(event as any);
      }
    };

    const handleGlobalMouseUp = () => {
      if (isDraggingRef.current) {
        handleMouseUp();
      }
    };

    if (isConstructorMode) {
      document.addEventListener('mousemove', handleGlobalMouseMove);
      document.addEventListener('mouseup', handleGlobalMouseUp);
    }

    return () => {
      document.removeEventListener('mousemove', handleGlobalMouseMove);
      document.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isConstructorMode, handleMouseMove, handleMouseUp]);

  // üéØ –û–ù–û–í–õ–ï–ù–û: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –±–æ–∫—Å—ñ–≤ —É –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (–∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤)
  const getDefaultRelativePosition = useCallback((boxName: keyof MainScreenBoxes): RelativePosition => {
    // üì± –ú–û–ë–Ü–õ–¨–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è, –º–µ–Ω—à–∏–π –µ–∫—Ä–∞–Ω)
    if (deviceType === 'mobile') {
      switch (boxName) {
        case 'logoBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 5.0   // 5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –∑ –±—ñ–ª—å—à–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
          };
        case 'soundToggleBox':
          return {
            x: 85.0, // 85% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—Ä–∞–≤–æ—Ä—É—á, –∞–ª–µ –Ω–µ –≤–ø—Ä–∏—Ç—É–ª)
            y: 5.0   // 5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –ø–æ—Ä—É—á –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º)
          };
        case 'headerTextBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 12.0  // 12% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—ñ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º)
          };
        case 'carouselBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 35.0  // 35% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å)
          };
        case 'paginationBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 75.0  // 75% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—ñ–¥ –∫–∞—Ä—É—Å–µ–ª–ª—é)
          };
        case 'adminButtonBox':
          return {
            x: 15.0, // 15% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –≤–Ω–∏–∑—É)
            y: 85.0  // 85% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–Ω–∏–∑—É)
          };
        case 'adminPanelBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
            y: 50.0  // 50% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
          };
        default:
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
            y: 50.0  // 50% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä)
          };
      }
    }
    
    // üìü –ü–õ–ê–ù–®–ï–¢–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (—Å–µ—Ä–µ–¥–Ω—ñ–π –µ–∫—Ä–∞–Ω, –≥—ñ–±—Ä–∏–¥–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è)
    if (deviceType === 'tablet') {
      switch (boxName) {
        case 'logoBox':
          return {
            x: 50.0, // 50% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 3.5   // 3.5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –∑ –ø–æ–º—ñ—Ä–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
          };
        case 'soundToggleBox':
          return {
            x: 90.0, // 90% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—Ä–∞–≤–æ—Ä—É—á –∑ –ø–æ–º—ñ—Ä–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
            y: 3.5   // 3.5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –ø–æ—Ä—É—á –∑ –ª–æ–≥–æ—Ç–∏–ø–æ–º)
          };
        case 'headerTextBox':
          return {
            x: 25.0, // 25% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)
            y: 9.0   // 9% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—ñ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º)
          };
        case 'carouselBox':
          return {
            x: 25.0, // 25% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É, —è–∫ header)
            y: 30.0  // 30% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å)
          };
        case 'paginationBox':
          return {
            x: 50.5, // 50.5% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
            y: 85.0  // 85% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–Ω–∏–∑—É –ø—ñ–¥ –∫–∞—Ä—É—Å–µ–ª–ª—é)
          };
        case 'adminButtonBox':
          return {
            x: 85.0, // 85% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—Ä–∞–≤–æ—Ä—É—á –≤–Ω–∏–∑—É)
            y: 80.0  // 80% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–Ω–∏–∑—É)
          };
        case 'adminPanelBox':
          return {
            x: 35.0, // 35% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ç—Ä–æ—Ö–∏ –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)
            y: 35.0  // 35% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ç—Ä–æ—Ö–∏ –≤–∏—â–µ —Ü–µ–Ω—Ç—Ä—É)
          };
        default:
          return {
            x: 35.0, // 35% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞
            y: 35.0  // 35% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞
          };
      }
    }
    
    // üíª –î–ï–°–ö–¢–û–ü–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è, –±—ñ–ª—å—à–∏–π –µ–∫—Ä–∞–Ω)
    switch (boxName) {
      case 'logoBox':
        return {
          x: 50.0, // 50.0% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
          y: 2.5   // 2.5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
        };
      case 'soundToggleBox':
        return {
          x: 95.8, // 95.8% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—Ä–∞–≤–æ—Ä—É—á –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
          y: 2.5   // 2.5% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º)
        };
      case 'headerTextBox':
        return {
          x: 10.0, // 10.0% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º)
          y: 6.7   // 6.7% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—ñ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º)
        };
      case 'carouselBox':
        return {
          x: 10.0, // 10.0% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º, —è–∫ header)
          y: 26.8  // 26.8% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±–ª–∞—Å—Ç—å)
        };
      case 'paginationBox':
        return {
          x: 51.0, // 51.0% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (—Ü–µ–Ω—Ç—Ä –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ)
          y: 92.0  // 92.0% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–Ω–∏–∑—É –ø—ñ–¥ –∫–∞—Ä—É—Å–µ–ª–ª—é)
        };
      case 'adminButtonBox':
        return {
          x: 95.0, // 95.0% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ø—Ä–∞–≤–æ—Ä—É—á –∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º)
          y: 88.6  // 88.6% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–Ω–∏–∑—É)
        };
      case 'adminPanelBox':
        return {
          x: 25.0, // 25% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞ (–ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)
          y: 25.0  // 25% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞ (–≤–≥–æ—Ä—ñ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É)
        };
      default:
        return {
          x: 10.0, // 10% –≤—ñ–¥ —à–∏—Ä–∏–Ω–∏ –µ–∫—Ä–∞–Ω–∞
          y: 10.0  // 10% –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω–∞
        };
    }
  }, [deviceType]);

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –±–æ–∫—Å—ñ–≤ (–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –∑ –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö)
  const getDefaultBoxPosition = useCallback((boxName: keyof MainScreenBoxes): Position => {
    const relativePos = getDefaultRelativePosition(boxName);
    return relativeToAbsolute(relativePos);
  }, [getDefaultRelativePosition, relativeToAbsolute]);

  // üéØ –û–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–∑–∏—Ü—ñ—è–º–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const getBoxPosition = useCallback((boxName: keyof MainScreenBoxes): Position | null => {
    const key = `${boxName}_${deviceType}`;
    const position = boxPositions[key];
    

    
    // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É
    if (!position) {
      const defaultPos = getDefaultBoxPosition(boxName);
      // üéØ –ù–û–í–ò–ô: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è paginationBox
      const adjustedDefaultPos = adjustPositionForPagination(defaultPos, boxName);

      return adjustedDefaultPos;
    }
    
    // üéØ –ù–û–í–ò–ô: –Ø–∫—â–æ —î –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö (–º–∞—Å—à—Ç–∞–±—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    if (position.relativeX !== undefined && position.relativeY !== undefined) {
      const relativePos: RelativePosition = {
        x: position.relativeX,
        y: position.relativeY
      };
      const absolutePos = relativeToAbsolute(relativePos);
      // üéØ –ù–û–í–ò–ô: –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –¥–ª—è paginationBox
      const adjustedPos = adjustPositionForPagination(absolutePos, boxName);

      return adjustedPos;
    }
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é (–∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    const result = { x: position.x, y: position.y };
    return result;
  }, [boxPositions, deviceType, getDefaultBoxPosition, relativeToAbsolute, adjustPositionForPagination]);

  // üéØ –û–ù–û–í–õ–ï–ù–û: setBoxPosition —Ç–µ–ø–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —ñ –∞–±—Å–æ–ª—é—Ç–Ω—ñ, —ñ –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
  const setBoxPosition = useCallback((boxName: keyof MainScreenBoxes, position: Position, shouldSave: boolean = true) => {
    const key = `${boxName}_${deviceType}`;
    
    // üéØ –ù–û–í–ò–ô: –î–ª—è paginationBox –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–µ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ
    const adjustedPosition = boxName === 'paginationBox' ? {
      x: position.x + 100, // –î–æ–¥–∞—î–º–æ –ø–æ–ª–æ–≤–∏–Ω—É —à–∏—Ä–∏–Ω–∏ –Ω–∞–∑–∞–¥
      y: position.y
    } : position;
    
    // üéØ –ù–û–í–ò–ô: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é —É –≤—ñ–¥–Ω–æ—Å–Ω—É –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    const relativePosition = absoluteToRelative(adjustedPosition);
    
    setBoxPositions(prev => {
      const newPositions = {
        ...prev,
        [key]: {
          boxName,
          deviceType,
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (–∑ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è–º)
          x: adjustedPosition.x,
          y: adjustedPosition.y,
          // üéØ –ù–û–í–ò–ô: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
          relativeX: relativePosition.x,
          relativeY: relativePosition.y,
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—à—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —è–∫—â–æ –≤–æ–Ω–∏ —î
          ...(prev[key] && {
            width: prev[key].width,
            height: prev[key].height,
            scale: prev[key].scale
          })
        }
      };
      

      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ —Ñ–æ–Ω—É)
      if (shouldSave) {
        try {
          const syncEvent = new CustomEvent('boxPositionsUpdated', { 
            detail: { 
              boxPositions: newPositions, 
              deviceType,
              updatedBox: boxName,
              newPosition: position,
              newRelativePosition: relativePosition
            } 
          });
          window.dispatchEvent(syncEvent);

        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—ñ—ó:', error);
        }
      }
      
      return newPositions;
    });
  }, [deviceType, absoluteToRelative]);

  const resetBoxPosition = useCallback(async (boxName: keyof MainScreenBoxes) => {
    const key = `${boxName}_${deviceType}`;
    setBoxPositions(prev => {
      const newPositions = { ...prev };
      delete newPositions[key];
      return newPositions;
    });
    
    // –ù–µ–≥–∞–π–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ IndexedDB
    try {
      const updatedPositions = { ...boxPositions };
      delete updatedPositions[key];
      
      await indexedDBService.saveSettings('boxPositions', updatedPositions, 'constructor');
      console.log('üíæ –°–∫–∏–Ω—É—Ç–æ –ø–æ–∑–∏—Ü—ñ—é –±–æ–∫—Å—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ IndexedDB:', boxName);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó:', error);
    }
  }, [deviceType, boxPositions]);

  const resetAllPositions = useCallback(async () => {
    // –°–∫–∏–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é, –∞ –Ω–µ –≤—Å—ñ
    const updatedPositions = { ...boxPositions };
    
    // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ deviceType
    Object.keys(updatedPositions).forEach(key => {
      if (key.endsWith(`_${deviceType}`)) {
        delete updatedPositions[key];
      }
    });
    
    setBoxPositions(updatedPositions);
    console.log(`üéØ –°–∫–∏–Ω—É—Ç–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –±–æ–∫—Å—ñ–≤ –¥–ª—è ${deviceType}`);
    
    // –ù–µ–≥–∞–π–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ IndexedDB
    try {
      await indexedDBService.saveSettings('boxPositions', updatedPositions, 'constructor');
      console.log(`üíæ –°–∫–∏–Ω—É—Ç–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è ${deviceType} —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ IndexedDB`);
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
    }
  }, [boxPositions, deviceType]);

  // –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏
  const getBoxSize = useCallback((boxName: keyof MainScreenBoxes): { width?: number; height?: number; scale?: number } | null => {
    const key = `${boxName}_${deviceType}`;
    const position = boxPositions[key];
    return position ? { width: position.width, height: position.height, scale: position.scale } : null;
  }, [boxPositions, deviceType]);

  const setBoxSize = useCallback((boxName: keyof MainScreenBoxes, size: { width?: number; height?: number; scale?: number }) => {
    const key = `${boxName}_${deviceType}`;
    setBoxPositions(prev => {
      const newPositions = {
        ...prev,
        [key]: {
          ...prev[key],
          boxName,
          deviceType,
          x: prev[key]?.x || 0,
          y: prev[key]?.y || 0,
          ...size
        }
      };
      
      return newPositions;
    });
  }, [deviceType]);

  const increaseBoxSize = useCallback((boxName: keyof MainScreenBoxes, step?: number) => {
    const currentSize = getBoxSize(boxName);
    const newScale = Math.min(3, (currentSize?.scale || 1) + (step || 0.1));
    setBoxSize(boxName, { 
      ...currentSize, 
      scale: newScale
    });
    console.log(`üéØ –ó–±—ñ–ª—å—à–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä ${boxName}: ${newScale}`);
  }, [getBoxSize, setBoxSize]);

  const decreaseBoxSize = useCallback((boxName: keyof MainScreenBoxes, step?: number) => {
    const currentSize = getBoxSize(boxName);
    const newScale = Math.max(0.2, (currentSize?.scale || 1) - (step || 0.1));
    setBoxSize(boxName, { 
      ...currentSize, 
      scale: newScale
    });
    console.log(`üéØ –ó–º–µ–Ω—à–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä ${boxName}: ${newScale}`);
  }, [getBoxSize, setBoxSize]);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const savePositions = useCallback(async () => {
    try {
      console.log('üîÑ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô - –Ω–∞—á–∞–ª–æ');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º IndexedDB —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–ª—è —Ñ–æ–Ω–∞
      await indexedDBService.saveSettings('boxPositions', boxPositions, 'constructor');
      
      console.log('‚úÖ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô - —É—Å–ø–µ—à–Ω–æ:', boxPositions);
    } catch (error) {
      console.error('‚ùå –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô - –æ—à–∏–±–∫–∞:', error);
    }
  }, [boxPositions]);

  const saveAllPositions = useCallback(async () => {
    try {
      console.log('üîÑ –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô - –Ω–∞—á–∞–ª–æ');
      
      // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –±–æ–∫—Å—ñ–≤
      const currentPositions = { ...boxPositions };
      
      // –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ DOM, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
      const boxNames: (keyof MainScreenBoxes)[] = [
        'logoBox', 'soundToggleBox', 'headerTextBox', 
        'carouselBox', 'paginationBox', 'adminButtonBox'
      ];
      
      let updatedCount = 0;
      boxNames.forEach(boxName => {
        const key = `${boxName}_${deviceType}`;
        if (currentPositions[key]) {
          updatedCount++;
        }
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º IndexedDB —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–ª—è —Ñ–æ–Ω–∞
      await indexedDBService.saveSettings('boxPositions', currentPositions, 'constructor');
      
      console.log('üíæ ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô - –£–°–ü–ï–®–ù–û =====');
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${updatedCount} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è ${deviceType}:`);
      
      Object.entries(currentPositions).forEach(([key, position]) => {
        if (key.includes(`_${deviceType}`)) {
          console.log(`üìç ${key}: x=${position.x}, y=${position.y}`);
        }
      });
      
      console.log('üéØ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ IndexedDB!');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      const syncEvent = new CustomEvent('allBoxPositionsSaved', { 
        detail: { 
          boxPositions: currentPositions, 
          deviceType,
          timestamp: Date.now(),
          savedCount: updatedCount
        } 
      });
      window.dispatchEvent(syncEvent);
      
      return { success: true, savedCount: updatedCount };
    } catch (error) {
      console.error('‚ùå –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –ü–û–ó–ò–¶–ò–ô - –æ—à–∏–±–∫–∞:', error);
      return { success: false, error };
    }
  }, [boxPositions, deviceType]);

  const loadPositions = useCallback(async () => {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –±–æ–∫—Å—ñ–≤
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º IndexedDB —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–ª—è —Ñ–æ–Ω–∞
      const positions = await indexedDBService.loadSettings('boxPositions');
      
      // –î–∞–Ω—ñ –∑ IndexedDB –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
      console.log('üîç –¢–µ–∫—É—â–∏–π deviceType:', deviceType);
      
      if (positions) {
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ deviceType
        const devicePositions = Object.entries(positions).filter(([key]) => 
          key.includes(`_${deviceType}`)
        );
        console.log('üîç –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ deviceType:', devicePositions);
        
        // üéØ –ù–û–í–ò–ô: –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø–æ–∑–∏—Ü—ñ–π –º—ñ–∂ –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏
        if (devicePositions.length === 0) {
          console.log('üîÑ –ü–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏ –∑ —ñ–Ω—à–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤');
          
          // –®—É–∫–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è —ñ–Ω—à–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
          const allDeviceTypes = ['desktop', 'tablet', 'mobile'];
          const sourceDeviceType = allDeviceTypes.find(type => 
            type !== deviceType && 
            Object.keys(positions).some(key => key.includes(`_${type}`))
          );
          
          if (sourceDeviceType) {
            console.log(`üîÑ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è ${sourceDeviceType}, –∞–¥–∞–ø—Ç—É—î–º–æ –¥–ª—è ${deviceType}`);
            
            const adaptedPositions = { ...positions };
            
            // –ê–¥–∞–ø—Ç—É—î–º–æ –∫–æ–∂–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∑ sourceDeviceType –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ deviceType
            Object.entries(positions).forEach(([key, position]) => {
              if (key.includes(`_${sourceDeviceType}`)) {
                const boxName = key.replace(`_${sourceDeviceType}`, '') as keyof MainScreenBoxes;
                const newKey = `${boxName}_${deviceType}`;
                
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó
                let adaptedPosition;
                if (position.relativeX !== undefined && position.relativeY !== undefined) {
                  // –Ø–∫—â–æ —î –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ —ó—Ö
                  adaptedPosition = {
                    ...position,
                    deviceType: deviceType as 'mobile' | 'tablet' | 'desktop',
                    boxName: boxName
                  };
                } else {
                  // –Ø–∫—â–æ –Ω–µ–º–∞—î –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—ñ –≤ –≤—ñ–¥–Ω–æ—Å–Ω—ñ
                  const absolutePos = { x: position.x, y: position.y };
                  const relativePos = absoluteToRelative(absolutePos);
                  adaptedPosition = {
                    ...position,
                    deviceType: deviceType as 'mobile' | 'tablet' | 'desktop',
                    boxName: boxName,
                    relativeX: relativePos.x,
                    relativeY: relativePos.y
                  };
                }
                
                adaptedPositions[newKey] = adaptedPosition;
                console.log(`üîÑ –ê–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—é ${boxName}: ${sourceDeviceType} -> ${deviceType}`, {
                  original: position,
                  adapted: adaptedPosition
                });
              }
            });
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
            await indexedDBService.saveSettings('boxPositions', adaptedPositions, 'constructor');
            setBoxPositions(adaptedPositions);
            console.log('‚úÖ –ê–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            return;
          }
        }
        
        setBoxPositions(positions);
        // –ü–æ–∑–∏—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
      } else {
        // –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB
      }
    } catch (error) {
      console.error('‚ùå –ó–ê–ì–†–£–ó–ö–ê –ü–û–ó–ò–¶–ò–ô - –æ—à–∏–±–∫–∞:', error);
    }
  }, [deviceType, absoluteToRelative]);

  // ÔøΩÔøΩ –ù–û–í–ò–ô: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó —Å—Ç–∞—Ä–∏—Ö –∞–±—Å–æ–ª—é—Ç–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö
  const migrateAbsoluteToRelativePositions = useCallback(async () => {

    
    const updatedPositions = { ...boxPositions };
    let hasUpdates = false;
    
    Object.entries(boxPositions).forEach(([key, position]) => {
      // –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –Ω–µ –º–∞—î –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –¥–æ–¥–∞—î–º–æ —ó—Ö
      if (position.relativeX === undefined || position.relativeY === undefined) {
        const absolutePos: Position = { x: position.x, y: position.y };
        const relativePos = absoluteToRelative(absolutePos);
        
        updatedPositions[key] = {
          ...position,
          relativeX: relativePos.x,
          relativeY: relativePos.y
        };
        
        hasUpdates = true;

      }
    });
    
    if (hasUpdates) {
      setBoxPositions(updatedPositions);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
      try {
        await indexedDBService.saveSettings('boxPositions', updatedPositions, 'constructor');
        console.log('üíæ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
      }
    }
  }, [boxPositions, absoluteToRelative]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    loadPositions();
  }, [loadPositions]);

  // üéØ –ù–û–í–ò–ô: –í–∏–∫–æ–Ω—É—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π
  useEffect(() => {
    if (Object.keys(boxPositions).length > 0) {
      migrateAbsoluteToRelativePositions();
    }
  }, [boxPositions, migrateAbsoluteToRelativePositions]);

  // üî• –ù–û–í–ò–ô useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –ø—Ä–∏ —ó—Ö –∑–º—ñ–Ω—ñ
  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    const hasPositions = Object.keys(boxPositions).length > 0;
    
    if (hasPositions) {
      // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —á–∞—Å—Ç–∏—Ö –∑–±–µ—Ä–µ–∂–µ–Ω—å –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
      const saveTimeout = setTimeout(async () => {
        try {
          await indexedDBService.saveSettings('boxPositions', boxPositions, 'constructor');
          console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –±–æ–∫—Å—ñ–≤:', boxPositions);
        } catch (error) {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
        }
      }, 500); // –ó–∞—Ç—Ä–∏–º–∫–∞ 500–º—Å
      
      return () => clearTimeout(saveTimeout);
    }
  }, [boxPositions]); // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ boxPositions

  // üéØ –ù–û–í–ò–ô: –û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É –ø–æ–∑–∏—Ü—ñ–π
  useEffect(() => {
    const handleWindowResize = () => {

      
      // –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, —â–æ–± –ø–æ–∑–∏—Ü—ñ—ó –æ–Ω–æ–≤–∏–ª–∏—Å—è
      // –¶–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î —Ç–æ–º—É, —â–æ getBoxPosition —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
      setBoxPositions(prev => ({ ...prev }));
    };

    window.addEventListener('resize', handleWindowResize);
    return () => {
      window.removeEventListener('resize', handleWindowResize);
    };
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –º—ñ–∂ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  useEffect(() => {
    const handleConstructorModeChange = (event: CustomEvent) => {
      const { isConstructorMode: newMode } = event.detail;
      console.log('üéØ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥—ñ—é –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:', newMode);
      setIsConstructorMode(newMode);
      
      if (newMode) {
        document.body.style.userSelect = 'none';
        document.body.style.cursor = 'crosshair';
      } else {
        document.body.style.userSelect = '';
        document.body.style.cursor = '';
        setDragState(prev => ({ ...prev, isDragging: false, draggedBox: null }));
      }
    };

    window.addEventListener('constructorModeChanged', handleConstructorModeChange as EventListener);
    return () => {
      window.removeEventListener('constructorModeChanged', handleConstructorModeChange as EventListener);
    };
  }, []);

  // üéØ –ù–û–í–ò–ô: Touch –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
  const handleTouchStart = useCallback((boxName: keyof MainScreenBoxes, event: React.TouchEvent) => {
    if (!isConstructorMode) return;
    
    event.preventDefault();
    event.stopPropagation();
    
    const touch = event.touches[0];
    const element = event.currentTarget as HTMLElement;
    const rect = element.getBoundingClientRect();
    
    // Offset - —Ü–µ –∑–º—ñ—â–µ–Ω–Ω—è –ø–∞–ª—å—Ü—è –≤—ñ–¥ –ª—ñ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –∫—É—Ç–∞ –µ–ª–µ–º–µ–Ω—Ç–∞
    const offset = {
      x: touch.clientX - rect.left,
      y: touch.clientY - rect.top
    };
    
    // –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
    const currentPosition = { x: rect.left, y: rect.top };
    
    setDragState({
      isDragging: true,
      draggedBox: boxName,
      startPosition: { x: touch.clientX, y: touch.clientY },
      currentPosition,
      offset
    });
    
    isDraggingRef.current = true;
    
    console.log(`üì± –ü–æ—á–∞—Ç–æ touch –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è: ${boxName}`, { 
      offset, 
      currentPosition, 
      touchPosition: { x: touch.clientX, y: touch.clientY },
      elementRect: { left: rect.left, top: rect.top, width: rect.width, height: rect.height }
    });
  }, [isConstructorMode]);

  const handleTouchMove = useCallback((event: React.TouchEvent) => {
    if (!isDraggingRef.current || !dragState.isDragging || !dragState.draggedBox) return;
    
    event.preventDefault(); // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    
    const touch = event.touches[0];
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é: –ø–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –ø–∞–ª—å—Ü—è –º—ñ–Ω—É—Å offset
    const newPosition = {
      x: touch.clientX - dragState.offset.x,
      y: touch.clientY - dragState.offset.y
    };
    
    // üéØ –°–ü–†–û–©–ï–ù–Ü –æ–±–º–µ–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö Touch (—Ç–æ–π –∂–µ –∫–æ–¥ —â–æ —ñ –¥–ª—è –º–∏—à—ñ)
    const getBoxConstraints = (boxName: string) => {
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const isMobile = screenWidth <= 768;
      
      if (isMobile) {
        // üì± –ú–û–ë–Ü–õ–¨–ù–Ü: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å–≤–æ–±–æ–¥–∞ - –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è  
        const margin = 0; // –ë–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –≤—ñ–¥ –∫—Ä–∞—é
        return {
          minX: margin,
          maxX: screenWidth - 10 - margin, // –†–µ–∑–µ—Ä–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10px –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
          minY: margin,
          maxY: screenHeight - 10 - margin // –†–µ–∑–µ—Ä–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 10px –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
        };
      } else {
        // üíª –î–ï–°–ö–¢–û–ü/–ü–õ–ê–ù–®–ï–¢: –î–µ—Ç–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–∑–º—ñ—Ä—ñ–≤ –±–æ–∫—Å—ñ–≤
        const margin = 20;
        const isTablet = screenWidth <= 1024;
        
        const getAdaptiveBoxSize = (boxName: string) => {
          const sizes = {
            adminButtonBox: { width: 60, height: 60 },
            logoBox: { width: isTablet ? 250 : 200, height: isTablet ? 80 : 100 },
            soundToggleBox: { width: 60, height: 60 },
            headerTextBox: { width: isTablet ? 450 : 400, height: isTablet ? 150 : 200 },
            carouselBox: { width: isTablet ? 500 : 600, height: isTablet ? 350 : 400 },
            paginationBox: { width: isTablet ? 280 : 300, height: 50 }
          };
          return sizes[boxName] || { width: 100, height: 100 };
        };
        
        const boxSize = getAdaptiveBoxSize(boxName);
        const maxX = Math.max(margin, screenWidth - boxSize.width - margin);
        const maxY = Math.max(margin, screenHeight - boxSize.height - margin);
        
        return {
          minX: margin,
          maxX: maxX,
          minY: margin,
          maxY: maxY
        };
      }
    };
    
    const constraints = getBoxConstraints(dragState.draggedBox);
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –æ–±–º–µ–∂–µ–Ω–Ω—è
    const boundedPosition = {
      x: Math.max(constraints.minX, Math.min(constraints.maxX, newPosition.x)),
      y: Math.max(constraints.minY, Math.min(constraints.maxY, newPosition.y))
    };
    
    const gridSnappedPosition = snapPositionToGrid(boundedPosition);
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ snap –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –ª—ñ–Ω—ñ–π
    const centerSnappedPosition = snapToCenter(gridSnappedPosition, dragState.draggedBox);
    
    setDragState(prev => ({
      ...prev,
      currentPosition: centerSnappedPosition
    }));
    
    // –ù–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    setBoxPosition(dragState.draggedBox, centerSnappedPosition, false);
    
    console.log(`üì± Touch –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è: ${dragState.draggedBox}`, {
      constraints,
      touchPosition: { x: touch.clientX, y: touch.clientY },
      offset: dragState.offset,
      newPosition,
      boundedPosition,
      gridSnappedPosition,
      centerSnappedPosition
    });
  }, [dragState, snapPositionToGrid, snapToCenter, setBoxPosition]);

  const handleTouchEnd = useCallback(async () => {
    if (!isDraggingRef.current || !dragState.isDragging) return;
    
    console.log(`üì± –ó–∞–≤–µ—Ä—à–µ–Ω–æ touch –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è: ${dragState.draggedBox}`, {
      finalPosition: dragState.currentPosition
    });
    
    // –§—ñ–Ω–∞–ª—å–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    if (dragState.draggedBox && dragState.currentPosition) {
      setBoxPosition(dragState.draggedBox, dragState.currentPosition, true);
      console.log('üíæ Touch: –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞:', dragState.draggedBox, dragState.currentPosition);
      
      // –ù–µ–≥–∞–π–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ IndexedDB –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
      try {
        const key = `${dragState.draggedBox}_${deviceType}`;
        const updatedPositions = {
          ...boxPositions,
          [key]: {
            boxName: dragState.draggedBox,
            deviceType,
            ...dragState.currentPosition
          }
        };
        
        await indexedDBService.saveSettings('boxPositions', updatedPositions, 'constructor');
        console.log('üíæ Touch: –ù–µ–≥–∞–π–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –≤ IndexedDB:', dragState.draggedBox, dragState.currentPosition);
      } catch (error) {
        console.error('‚ùå Touch: –ü–æ–º–∏–ª–∫–∞ –Ω–µ–≥–∞–π–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó:', error);
      }
    }
    
    setDragState({
      isDragging: false,
      draggedBox: null,
      startPosition: { x: 0, y: 0 },
      currentPosition: { x: 0, y: 0 },
      offset: { x: 0, y: 0 }
    });
    
    isDraggingRef.current = false;
    
    // –°–∫–∏–¥–∞—î–º–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é—á—ñ –ª—ñ–Ω—ñ—ó –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
    setSnapLines(prev => ({
      ...prev,
      showVerticalCenter: false,
      showHorizontalCenter: false,
      snapToVerticalCenter: false,
      snapToHorizontalCenter: false
    }));
  }, [dragState, deviceType, boxPositions, setBoxPosition, setSnapLines]);

  // üéØ –ù–û–í–ò–ô: –ì–ª–æ–±–∞–ª—å–Ω—ñ touch –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
  useEffect(() => {
    const handleGlobalTouchMove = (event: TouchEvent) => {
      if (isDraggingRef.current) {
        handleTouchMove(event as any);
      }
    };

    const handleGlobalTouchEnd = () => {
      if (isDraggingRef.current) {
        handleTouchEnd();
      }
    };

    if (isConstructorMode) {
      // üéØ –ù–û–í–ò–ô: –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ touch –æ–±—Ä–æ–±–Ω–∏–∫–∏
      document.addEventListener('touchmove', handleGlobalTouchMove, { passive: false });
      document.addEventListener('touchend', handleGlobalTouchEnd);
    }

    return () => {
      document.removeEventListener('touchmove', handleGlobalTouchMove);
      document.removeEventListener('touchend', handleGlobalTouchEnd);
    };
  }, [isConstructorMode, handleTouchMove, handleTouchEnd]);

  // üéØ –ù–û–í–ò–ô: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —è–∫ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö
  const setCurrentPositionsAsDefault = useCallback(() => {
    console.log('üè≠ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —è–∫ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö...');
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
    const currentPositions: Record<string, RelativePosition> = {};
    
    Object.keys(boxPositions).forEach(key => {
      const position = boxPositions[key];
      if (position.relativeX !== undefined && position.relativeY !== undefined) {
        const boxName = position.boxName;
        const deviceKey = `${boxName}_${position.deviceType}`;
        currentPositions[deviceKey] = {
          x: position.relativeX,
          y: position.relativeY
        };
      }
    });
    
    console.log('üìä –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫ –∑–∞–≤–æ–¥—Å—å–∫—ñ:', currentPositions);
    
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ü–∏—Ö –ø–æ–∑–∏—Ü—ñ–π —è–∫ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö
    // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –µ–∫—Å–ø–æ—Ä—Ç –≤ JSON –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É
    const exportCode = generateDefaultPositionsCode(currentPositions);
    console.log('üìù –ö–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π:');
    console.log(exportCode);
    
    return currentPositions;
  }, [boxPositions]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
  const generateDefaultPositionsCode = useCallback((positions: Record<string, RelativePosition>) => {
    const desktopPositions: Record<string, RelativePosition> = {};
    const mobilePositions: Record<string, RelativePosition> = {};
    
    Object.keys(positions).forEach(key => {
      if (key.includes('_desktop')) {
        const boxName = key.replace('_desktop', '');
        desktopPositions[boxName] = positions[key];
      } else if (key.includes('_mobile')) {
        const boxName = key.replace('_mobile', '');
        mobilePositions[boxName] = positions[key];
      }
    });
    
    let code = `// –ó–∞–≤–æ–¥—Å—å–∫—ñ –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\n`;
    code += `const getDefaultRelativePosition = (boxName, deviceType = 'desktop') => {\n`;
    code += `  const positions = {\n`;
    code += `    desktop: {\n`;
    
    Object.keys(desktopPositions).forEach(boxName => {
      const pos = desktopPositions[boxName];
      code += `      ${boxName}: { x: ${pos.x.toFixed(1)}, y: ${pos.y.toFixed(1)} },\n`;
    });
    
    code += `    },\n`;
    code += `    mobile: {\n`;
    
    Object.keys(mobilePositions).forEach(boxName => {
      const pos = mobilePositions[boxName];
      code += `      ${boxName}: { x: ${pos.x.toFixed(1)}, y: ${pos.y.toFixed(1)} },\n`;
    });
    
    code += `    }\n`;
    code += `  };\n`;
    code += `  return positions[deviceType][boxName] || { x: 10, y: 10 };\n`;
    code += `};\n`;
    
    return code;
  }, []);

  return {
    // –°—Ç–∞–Ω–∏
    isConstructorMode,
    dragState,
    boxPositions,
    
    // üéØ –ù–û–í–ò–ô —Å—Ç–∞–Ω –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π
    snapLines,
    
    // –§—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    enableConstructorMode,
    disableConstructorMode,
    toggleConstructorMode,
    
    // Drag & Drop —Ñ—É–Ω–∫—Ü—ñ—ó
    handleMouseDown,
    handleMouseMove,
    handleMouseUp,
    
    // üéØ –ù–û–í–ò–ô: Touch —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    handleTouchStart,
    handleTouchMove,
    handleTouchEnd,
    
    // –ü–æ–∑–∏—Ü—ñ—ó –±–æ–∫—Å—ñ–≤
    getBoxPosition,
    setBoxPosition,
    resetBoxPosition,
    resetAllPositions,
    
    // –†–æ–∑–º—ñ—Ä–∏ –±–æ–∫—Å—ñ–≤
    getBoxSize,
    setBoxSize,
    increaseBoxSize,
    decreaseBoxSize,
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    savePositions,
    loadPositions,
    saveAllPositions,
    
    // üéØ –ù–û–í–ò–ô: –ó–∞–≤–æ–¥—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    setCurrentPositionsAsDefault,
    
    // –£—Ç–∏–ª—ñ—Ç–∏
    snapToGrid,
    gridSize,
    setSnapToGrid,
    setGridSize
  };
};

export default useDragAndDrop; 