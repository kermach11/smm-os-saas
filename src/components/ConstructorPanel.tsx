import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import useDragAndDrop from '../hooks/useDragAndDrop';
import { useResponsive } from '../hooks/useResponsive';
import { MainScreenBoxes } from '../config/responsiveConfig';

const ConstructorPanel: React.FC = () => {
  const { deviceType } = useResponsive();
  const {
    isConstructorMode,
    toggleConstructorMode,
    enableConstructorMode,
    disableConstructorMode,
    boxPositions,
    resetBoxPosition,
    resetAllPositions,
    snapToGrid,
    gridSize,
    setSnapToGrid,
    setGridSize,
    savePositions,
    loadPositions,
    snapLines,
    setCurrentPositionsAsDefault
  } = useDragAndDrop(deviceType);

  const [showAdvanced, setShowAdvanced] = useState(false);
  const [showBoxList, setShowBoxList] = useState(false);

  // –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –±–æ–∫—Å—ñ–≤
  const allBoxes: Array<{ key: keyof MainScreenBoxes; name: string; emoji: string }> = [
    { key: 'logoBox', name: '–õ–æ–≥–æ—Ç–∏–ø', emoji: 'üè∑Ô∏è' },
    { key: 'soundToggleBox', name: 'Sound Toggle', emoji: 'üîä' },
    { key: 'headerTextBox', name: 'Header Text', emoji: 'üìù' },
    { key: 'carouselBox', name: 'Carousel', emoji: 'üé†' },
    { key: 'paginationBox', name: 'Pagination', emoji: 'üìñ' },
    { key: 'adminButtonBox', name: 'Admin Button', emoji: '‚öôÔ∏è' },
    { key: 'adminPanelBox', name: 'Admin Panel', emoji: 'üéõÔ∏è' }
  ];

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∑–∏—Ü—ñ–π
  const getPositionStats = () => {
    const devicePositions = Object.entries(boxPositions).filter(([key]) => 
      key.includes(`_${deviceType}`)
    );
    return {
      total: allBoxes.length,
      customized: devicePositions.length,
      percentage: Math.round((devicePositions.length / allBoxes.length) * 100)
    };
  };

  const stats = getPositionStats();

  return (
    <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-white flex items-center gap-2">
          üéØ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        </h2>
        <div className="flex items-center gap-2">
          <span className="text-sm text-white/70">
            {deviceType.toUpperCase()}
          </span>
          <div className={`w-3 h-3 rounded-full ${
            isConstructorMode ? 'bg-green-500' : 'bg-gray-500'
          }`} />
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–Ω—Ç—Ä–æ–ª—ñ */}
      <div className="space-y-4">
        {/* –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä */}
        <div className="flex items-center justify-between p-4 bg-black/20 rounded-xl">
          <div>
            <h3 className="text-lg font-semibold text-white">
              {isConstructorMode ? 'üü¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–∏–π' : 'üî¥ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
            </h3>
            <p className="text-sm text-white/70">
              {isConstructorMode 
                ? '–ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –±–æ–∫—Å–∏ –º–∏—à–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è' 
                : '–£–≤—ñ–º–∫–Ω—ñ—Ç—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –±–æ–∫—Å—ñ–≤'
              }
            </p>
          </div>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={toggleConstructorMode}
            className={`px-6 py-3 rounded-xl font-semibold transition-all duration-300 ${
              isConstructorMode
                ? 'bg-red-500 hover:bg-red-600 text-white'
                : 'bg-green-500 hover:bg-green-600 text-white'
            }`}
          >
            {isConstructorMode ? '–í–∏–º–∫–Ω—É—Ç–∏' : '–£–≤—ñ–º–∫–Ω—É—Ç–∏'}
          </motion.button>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-3 gap-4">
          <div className="bg-black/20 rounded-xl p-4 text-center">
            <div className="text-2xl font-bold text-white">{stats.total}</div>
            <div className="text-sm text-white/70">–í—Å—å–æ–≥–æ –±–æ–∫—Å—ñ–≤</div>
          </div>
          <div className="bg-black/20 rounded-xl p-4 text-center">
            <div className="text-2xl font-bold text-blue-400">{stats.customized}</div>
            <div className="text-sm text-white/70">–ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ</div>
          </div>
          <div className="bg-black/20 rounded-xl p-4 text-center">
            <div className="text-2xl font-bold text-green-400">{stats.percentage}%</div>
            <div className="text-sm text-white/70">–ü—Ä–æ–≥—Ä–µ—Å</div>
          </div>
        </div>

        {/* üéØ –ù–û–í–ò–ô: –°—Ç–∞–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—é—á–∏—Ö –ª—ñ–Ω—ñ–π */}
        {(snapLines.showVerticalCenter || snapLines.showHorizontalCenter) && (
          <div className="bg-purple-500/20 rounded-xl p-4 border border-purple-500/30">
            <h3 className="text-lg font-semibold text-purple-300 mb-3">üéØ –ù–∞–ø—Ä–∞–≤–ª—è—é—á—ñ –ª—ñ–Ω—ñ—ó</h3>
            <div className="space-y-2">
              <div className="flex items-center gap-2 text-sm">
                <div className={`w-2 h-2 rounded-full ${snapLines.showVerticalCenter ? 'bg-purple-400' : 'bg-gray-500'}`} />
                <span className="text-white/70">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –≤—ñ—Å—å (X):</span>
                <span className={`font-semibold ${snapLines.snapToVerticalCenter ? 'text-purple-300' : 'text-white/50'}`}>
                  {snapLines.snapToVerticalCenter ? '–ó–ê–•–û–ü–õ–ï–ù–û' : snapLines.showVerticalCenter ? '–í–∏–¥–∏–º–∞' : '–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ'}
                </span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <div className={`w-2 h-2 rounded-full ${snapLines.showHorizontalCenter ? 'bg-purple-400' : 'bg-gray-500'}`} />
                <span className="text-white/70">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ –≤—ñ—Å—å (Y):</span>
                <span className={`font-semibold ${snapLines.snapToHorizontalCenter ? 'text-purple-300' : 'text-white/50'}`}>
                  {snapLines.snapToHorizontalCenter ? '–ó–ê–•–û–ü–õ–ï–ù–û' : snapLines.showHorizontalCenter ? '–í–∏–¥–∏–º–∞' : '–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ'}
                </span>
              </div>
              {snapLines.snapToVerticalCenter && snapLines.snapToHorizontalCenter && (
                <div className="mt-2 p-2 bg-purple-600/30 rounded text-center">
                  <span className="text-purple-200 text-sm font-semibold">‚ú® –Ü–î–ï–ê–õ–¨–ù–ò–ô –¶–ï–ù–¢–† ‚ú®</span>
                </div>
              )}
            </div>
          </div>
        )}

        {/* üéØ –ù–û–í–ò–ô: –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –¥–æ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å */}
        <div className="bg-green-500/20 rounded-xl p-4 border border-green-500/30">
          <h3 className="text-lg font-semibold text-green-300 mb-3">
            {deviceType === 'mobile' ? 'üì± –ú–æ–±—ñ–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' : 
             deviceType === 'tablet' ? 'üìü –ü–ª–∞–Ω—à–µ—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' : 
             'üíª –î–µ—Å–∫—Ç–æ–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è'}
          </h3>
          <p className="text-sm text-white/70 mb-4">
            –°–∫–∏–Ω—É—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó –¥–æ –Ω–æ–≤–∏—Ö –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è {deviceType === 'mobile' ? '–º–æ–±—ñ–ª—å–Ω–∏—Ö' : deviceType === 'tablet' ? '–ø–ª–∞–Ω—à–µ—Ç–Ω–∏—Ö' : '–¥–µ—Å–∫—Ç–æ–ø–Ω–∏—Ö'} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={async () => {
              // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
              await resetAllPositions();
              
              // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
              console.log(`‚úÖ –ü–æ–∑–∏—Ü—ñ—ó —Å–∫–∏–Ω—É—Ç—ñ –¥–æ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è ${deviceType}`);
              
              // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω
              setTimeout(() => {
                window.location.reload();
              }, 500);
            }}
            className="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-3 rounded-xl font-semibold transition-all duration-300"
          >
            üè≠ –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–∞–≤–æ–¥—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ({deviceType.toUpperCase()})
          </motion.button>
        </div>

        {/* –®–≤–∏–¥–∫—ñ –¥—ñ—ó */}
        <div className="flex gap-3">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => savePositions()}
            className="flex-1 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300"
          >
            üíæ –ó–±–µ—Ä–µ–≥—Ç–∏
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => loadPositions()}
            className="flex-1 bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300"
          >
            üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
          </motion.button>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={resetAllPositions}
            className="flex-1 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300"
          >
            üîÑ –°–∫–∏–Ω—É—Ç–∏ –≤—Å–µ
          </motion.button>
                </div>

        {/* üéØ –ù–û–í–ò–ô: –ó–∞–≤–æ–¥—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="bg-orange-500/20 rounded-xl p-4 border border-orange-500/30">
          <h3 className="text-lg font-semibold text-orange-300 mb-3">üè≠ –ó–∞–≤–æ–¥—Å—å–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h3>
          <p className="text-sm text-white/70 mb-4">
            –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –±–æ–∫—Å—ñ–≤ —è–∫ –∑–∞–≤–æ–¥—Å—å–∫—ñ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
          </p>
          
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */}
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => {
              console.log('=== –ü–û–¢–û–ß–ù–Ü –ü–û–ó–ò–¶–Ü–á –ë–û–ö–°–Ü–í ===');
              console.log('–¢–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é:', deviceType);
              console.log('–í—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó:', boxPositions);
              
              // –§–æ—Ä–º—É—î–º–æ –∫–æ–¥ –¥–ª—è –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –ø–æ–∑–∏—Ü—ñ–π
              const positions: Record<string, { x: number; y: number }> = {};
              Object.keys(boxPositions).forEach(key => {
                const pos = boxPositions[key];
                if (pos.relativeX !== undefined && pos.relativeY !== undefined) {
                  positions[pos.boxName] = {
                    x: Math.round(pos.relativeX * 10) / 10,
                    y: Math.round(pos.relativeY * 10) / 10
                  };
                }
              });
              
              console.log('üìã –ö–û–î –î–õ–Ø –ó–ê–í–û–î–°–¨–ö–ò–• –ü–û–ó–ò–¶–Ü–ô:');
              console.log(JSON.stringify(positions, null, 2));
              
              alert(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å!\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\n–ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(positions).length} –ø–æ–∑–∏—Ü—ñ–π.`);
            }}
            className="w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-3 rounded-xl font-semibold transition-all duration-300 mb-3"
          >
            üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
          </motion.button>
          
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => {
              const positions = setCurrentPositionsAsDefault();
              alert(`‚úÖ –ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ –∑–∞–≤–æ–¥—Å—å–∫—ñ!\n\n–ó–±–µ—Ä–µ–∂–µ–Ω–æ ${Object.keys(positions).length} –ø–æ–∑–∏—Ü—ñ–π.\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`);
            }}
            className="w-full bg-orange-500 hover:bg-orange-600 text-white px-4 py-3 rounded-xl font-semibold transition-all duration-300"
          >
            üè≠ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —è–∫ –∑–∞–≤–æ–¥—Å—å–∫—ñ
          </motion.button>
          <p className="text-xs text-orange-200/70 mt-2">
            ‚ö†Ô∏è –ü—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è, –∫–æ–¥ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
          </p>
        </div>

        {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ */}
        <div className="bg-black/20 rounded-xl p-4">
          <h3 className="text-lg font-semibold text-white mb-3">‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-white/70">–ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ —Å—ñ—Ç–∫–∏</span>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => setSnapToGrid(!snapToGrid)}
                className={`px-3 py-1 rounded-lg font-semibold transition-all duration-300 ${
                  snapToGrid
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-500 text-white'
                }`}
              >
                {snapToGrid ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ'}
              </motion.button>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-white/70">–†–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏</span>
              <div className="flex items-center gap-2">
                <input
                  type="range"
                  min="4"
                  max="32"
                  value={gridSize}
                  onChange={(e) => setGridSize(Number(e.target.value))}
                  className="w-20"
                />
                <span className="text-white text-sm w-8">{gridSize}px</span>
              </div>
            </div>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –±–æ–∫—Å—ñ–≤ */}
        <div className="bg-black/20 rounded-xl p-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-white">üì¶ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ–∫—Å–∞–º–∏</h3>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowBoxList(!showBoxList)}
              className="text-white/70 hover:text-white transition-colors"
            >
              {showBoxList ? '‚ñº' : '‚ñ∂'}
            </motion.button>
          </div>
          
          <AnimatePresence>
            {showBoxList && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="space-y-2"
              >
                {allBoxes.map((box) => {
                  const hasCustomPosition = boxPositions[`${box.key}_${deviceType}`];
                  const position = hasCustomPosition ? boxPositions[`${box.key}_${deviceType}`] : null;
                  
                  return (
                    <div
                      key={box.key}
                      className="flex items-center justify-between p-3 bg-black/20 rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <span className="text-lg">{box.emoji}</span>
                        <div>
                          <div className="text-white font-semibold">{box.name}</div>
                          {position && (
                            <div className="text-xs text-white/50">
                              {/* –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î */}
                              {position.relativeX !== undefined && position.relativeY !== undefined ? (
                                <div>
                                  <div>üìç {Math.round(position.x)}px, {Math.round(position.y)}px</div>
                                  <div className="text-purple-300">üìê {position.relativeX.toFixed(1)}%, {position.relativeY.toFixed(1)}%</div>
                                </div>
                              ) : (
                                <div>üìç {Math.round(position.x)}px, {Math.round(position.y)}px</div>
                              )}
                            </div>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className={`w-2 h-2 rounded-full ${
                          hasCustomPosition ? 'bg-green-500' : 'bg-gray-500'
                        }`} />
                        {hasCustomPosition && (
                          <motion.button
                            whileHover={{ scale: 1.05 }}
                            whileTap={{ scale: 0.95 }}
                            onClick={() => {
                              resetBoxPosition(box.key).catch(error => {
                                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó:', error);
                              });
                            }}
                            className="text-red-400 hover:text-red-300 text-sm"
                          >
                            ‚Ü∫
                          </motion.button>
                        )}
                      </div>
                    </div>
                  );
                })}
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è */}
        <div className="bg-black/20 rounded-xl p-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-semibold text-white">üîß –†–æ–∑—à–∏—Ä–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h3>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setShowAdvanced(!showAdvanced)}
              className="text-white/70 hover:text-white transition-colors"
            >
              {showAdvanced ? '‚ñº' : '‚ñ∂'}
            </motion.button>
          </div>
          
          <AnimatePresence>
            {showAdvanced && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.3 }}
                className="space-y-3"
              >
                <div className="text-sm text-white/70">
                  <p className="mb-2">
                    <strong>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:</strong>
                  </p>
                  <ul className="space-y-1 text-xs">
                    <li>‚Ä¢ –£–≤—ñ–º–∫–Ω—ñ—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–∂–∏–º—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è</li>
                    <li>‚Ä¢ –ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –±–æ–∫—Å–∏ –º–∏—à–∫–æ—é –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è</li>
                    <li>‚Ä¢ –ü–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</li>
                    <li>‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é</li>
                  </ul>
                </div>
                <div className="text-sm text-white/70">
                  <p className="mb-2">
                    <strong>–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π:</strong> {deviceType}
                  </p>
                  <p className="text-xs mb-2">
                    –ü–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö, –ø–ª–∞–Ω—à–µ—Ç—ñ–≤ —Ç–∞ –¥–µ—Å–∫—Ç–æ–ø—ñ–≤
                  </p>
                  <div className="bg-purple-500/20 rounded p-2 text-xs">
                    <p className="text-purple-300 font-semibold mb-1">üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è</p>
                    <p className="text-white/70">
                      –ü–æ–∑–∏—Ü—ñ—ó —Ç–µ–ø–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –≤—ñ–¥–Ω–æ—Å–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (%) —ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º–∞—Å—à—Ç–∞–±—É—é—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω–∞
                    </p>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
};

export default ConstructorPanel; 