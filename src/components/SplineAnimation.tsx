import React, { useEffect, useRef, useState, memo } from 'react';
import Spline from '@splinetool/react-spline';

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à –¥–ª—è preload –æ–ø–µ—Ä–∞—Ü—ñ–π
const splinePreloadCache = new Map<string, Promise<boolean>>();
const isPreloadingMap = new Map<string, boolean>();

interface SplineAnimationProps {
  sceneUrl?: string;
  embedCode?: string;
  localFile?: string; // –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª .spline
  position?: 'background' | 'foreground' | 'overlay';
  opacity?: number;
  scale?: number;
  autoplay?: boolean;
  controls?: boolean;
  className?: string;
  method?: 'iframe' | 'component' | 'local'; // –î–æ–¥–∞–Ω–æ 'local' –º–µ—Ç–æ–¥
}

const SplineAnimation: React.FC<SplineAnimationProps> = ({
  sceneUrl,
  embedCode,
  localFile,
  position = 'background',
  opacity = 1,
  scale = 1,
  autoplay = true,
  controls = false,
  className = '',
  method = 'component'
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isPreloaded, setIsPreloaded] = useState(false);
  const [splineOpacity, setSplineOpacity] = useState(0);

  // üöÄ Ultra-optimized Preloading –∑ –∂–æ—Ä—Å—Ç–∫–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º
  useEffect(() => {
    if (!sceneUrl && !embedCode && !localFile) {
      setIsLoading(false);
      return;
    }
    
    // –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –º–∏—Ç—Ç—î–≤–æ
    if (method === 'local' && localFile) {
      setIsLoading(false);
      return;
    }

    // Preload –¥–ª—è .splinecode —Ñ–∞–π–ª—ñ–≤ –∑ –∂–æ—Ä—Å—Ç–∫–∏–º –∫–µ—à—É–≤–∞–Ω–Ω—è–º
    if (sceneUrl && sceneUrl.includes('.splinecode')) {
      // –Ø–∫—â–æ –≤–∂–µ –∫–µ—à–æ–≤–∞–Ω–æ - –º–∏—Ç—Ç—î–≤–æ –∑–∞–≤–µ—Ä—à—É—î–º–æ
      if (splinePreloadCache.has(sceneUrl)) {
        setIsPreloaded(true);
        setIsLoading(false);
        return;
      }
      
      // –Ø–∫—â–æ –∑–∞—Ä–∞–∑ –π–¥–µ preload —Ü—å–æ–≥–æ URL - —á–µ–∫–∞—î–º–æ
      if (isPreloadingMap.get(sceneUrl)) {
        setIsLoading(false);
        return;
      }
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ preload —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
      isPreloadingMap.set(sceneUrl, true);
      
      const preloadPromise = fetch(sceneUrl)
        .then(response => response.ok)
        .catch(() => false)
        .finally(() => {
          isPreloadingMap.set(sceneUrl, false);
        });
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      splinePreloadCache.set(sceneUrl, preloadPromise);
      
      // –í–∏–∫–æ–Ω—É—î–º–æ preload
      preloadPromise.then((success) => {
        if (success) {
          setIsPreloaded(true);
        }
        setIsLoading(false);
      });
      
      return;
    }
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∞–π–º–µ—Ä –±–µ–∑–ø–µ–∫–∏
    setIsLoading(false);
  }, [sceneUrl, method]);

  // üéØ Resource Hints –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  useEffect(() => {
    if (sceneUrl && sceneUrl.includes('.splinecode')) {
      // –î–æ–¥–∞—î–º–æ prefetch link –¥–ª—è —Å—Ü–µ–Ω–∏
      const prefetchLink = document.createElement('link');
      prefetchLink.rel = 'prefetch';
      prefetchLink.href = sceneUrl;
      document.head.appendChild(prefetchLink);
      
      // –î–æ–¥–∞—î–º–æ preconnect –¥–ª—è –¥–æ–º–µ–Ω—É Spline
      const preconnectLink = document.createElement('link');
      preconnectLink.rel = 'preconnect';
      preconnectLink.href = 'https://prod.spline.design';
      document.head.appendChild(preconnectLink);

      return () => {
        document.head.removeChild(prefetchLink);
        document.head.removeChild(preconnectLink);
      };
    }
  }, [sceneUrl]);

  useEffect(() => {
    if (!sceneUrl && !embedCode && !localFile) {
      return;
    }

    // –Ø–∫—â–æ —î embed –∫–æ–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (embedCode && containerRef.current) {
      containerRef.current.innerHTML = embedCode;
      return;
    }

    // –Ø–∫—â–æ —î URL Spline —Å—Ü–µ–Ω–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ iframe
    if (sceneUrl && containerRef.current && method === 'iframe') {
      try {
        const iframe = document.createElement('iframe');
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.style.border = 'none';
        iframe.allow = 'camera; microphone; xr-spatial-tracking';
        iframe.allowFullscreen = true;
        
        // üöÄ –î–æ–¥–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        iframe.loading = 'eager'; // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        
        // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤ URL
        try {
          const url = new URL(sceneUrl);
          if (!autoplay) url.searchParams.set('autoplay', '0');
          if (!controls) url.searchParams.set('controls', '0');
          
          // üéØ Spline performance –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
          url.searchParams.set('quality', 'high');
          url.searchParams.set('antialiasing', 'true');
          url.searchParams.set('shadows', 'true');
          url.searchParams.set('postprocessing', 'true');
          
          iframe.src = url.toString();
        } catch (urlError) {
          iframe.src = sceneUrl;
        }
        
        // üöÄ –®–≤–∏–¥–∫–µ –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –ª–æ–∞–¥–µ—Ä–∞ –ø—ñ—Å–ª—è load
        iframe.onload = () => {
          setIsLoading(false);
        };
        
        containerRef.current.innerHTML = '';
        containerRef.current.appendChild(iframe);
      } catch (error) {
        console.error('Error creating iframe:', error);
        setIsLoading(false);
      }
    }
  }, [sceneUrl, embedCode, localFile, autoplay, controls, method]);

  const getPositionClasses = () => {
    const classes = (() => {
      switch (position) {
        case 'background':
          return 'absolute inset-0 z-0'; // –ü—ñ–¥ —É—Å—ñ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        case 'overlay':
          return 'absolute inset-0 z-5'; // –ù–∞–¥ —Ñ–æ–Ω–æ–º, –ø—ñ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º  
        case 'foreground':
          return 'absolute inset-0 z-40'; // –ù–∞–¥ —É—Å—ñ–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        default:
          return 'absolute inset-0 z-0';
      }
    })();
    
    return classes;
  };



  if (!sceneUrl && !embedCode && !localFile) return null;

  // üöÄ –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π Spline –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è–º–∏
  if (method === 'component' && sceneUrl && sceneUrl.includes('.splinecode')) {
    return (
      <div 
        className={`${getPositionClasses()} ${className}`}
        style={{
          opacity: opacity,
          transform: `scale(${scale})`,
          transformOrigin: 'center',
          pointerEvents: controls ? 'auto' : 'none'
        }}
      >
        <Spline 
          scene={sceneUrl}
          style={{ 
            width: '100%', 
            height: '100%',
            // üéØ CSS –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ + —à–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç
            opacity: splineOpacity,
            transition: 'opacity 1.2s ease-out',
            willChange: 'transform, opacity',
            backfaceVisibility: 'hidden',
            perspective: '1000px'
          }}
          onLoad={() => {
            console.log('‚úÖ Spline component loaded');
            setIsLoading(false);
            
            // üéØ –ú–∏—Ç—Ç—î–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥: –ø–æ–∫–∞–∑—É—î–º–æ Spline –∞–Ω—ñ–º–∞—Ü—ñ—é –û–î–†–ê–ó–£
            setSplineOpacity(1); // –ü–æ–∫–∞–∑—É—î–º–æ Spline –º–∏—Ç—Ç—î–≤–æ –±–µ–∑ –∑–∞—Ç—Ä–∏–º–∫–∏
          }}
          onError={(error) => {
            console.error('‚ùå Spline load error:', error);
            setIsLoading(false);
          }}
          // üöÄ Performance –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
          renderOnDemand={false} // –ó–∞–≤–∂–¥–∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó performance
        />

      </div>
    );
  }

  // –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
  if (method === 'local' && localFile) {
    return (
      <div 
        className={`${getPositionClasses()} ${className}`}
        style={{
          opacity: opacity,
          transform: `scale(${scale})`,
          transformOrigin: 'center',
          pointerEvents: controls ? 'auto' : 'none'
        }}
      >
        <Spline 
          scene={localFile}
          style={{ 
            width: '100%', 
            height: '100%',
            willChange: 'transform',
            backfaceVisibility: 'hidden'
          }}
          onLoad={() => {
            setIsLoading(false);
          }}
          renderOnDemand={false}
        />
      </div>
    );
  }

  // Fallback –Ω–∞ iframe –º–µ—Ç–æ–¥ –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è–º–∏
  return (
    <div 
      ref={containerRef}
      className={`${getPositionClasses()} ${className}`}
      style={{
        opacity: opacity,
        transform: `scale(${scale})`,
        transformOrigin: 'center',
        pointerEvents: controls ? 'auto' : 'none',
        // üéØ CSS –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        willChange: 'transform',
        backfaceVisibility: 'hidden'
      }}
    />
  );
};

// –ú–µ–º–æ—ñ–∑—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–π–≤–∏—Ö re-render'—ñ–≤
export default memo(SplineAnimation, (prevProps, nextProps) => {
  // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ prop'–∏
  return (
    prevProps.sceneUrl === nextProps.sceneUrl &&
    prevProps.embedCode === nextProps.embedCode &&
    prevProps.localFile === nextProps.localFile &&
    prevProps.method === nextProps.method &&
    prevProps.position === nextProps.position &&
    prevProps.opacity === nextProps.opacity &&
    prevProps.scale === nextProps.scale &&
    prevProps.autoplay === nextProps.autoplay &&
    prevProps.controls === nextProps.controls
  );
}); 