import React, { ReactNode, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { MainScreenBoxes } from '../config/responsiveConfig';
import BoxResizeControls from './BoxResizeControls';
import useDragAndDrop from '../hooks/useDragAndDrop';

interface ConstructorWrapperProps {
  boxName: keyof MainScreenBoxes;
  deviceType: 'mobile' | 'tablet' | 'desktop';
  children: ReactNode;
  className?: string;
  style?: React.CSSProperties;
  onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;
  onMouseEnter?: (event: React.MouseEvent<HTMLDivElement>) => void;
  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement>) => void;
  onDoubleClick?: (event: React.MouseEvent<HTMLDivElement>) => void;
  onContextMenu?: (event: React.MouseEvent<HTMLDivElement>) => void;
}

const ConstructorWrapper: React.FC<ConstructorWrapperProps> = ({
  boxName,
  deviceType,
  children,
  className = '',
  style = {},
  onClick,
  onMouseEnter,
  onMouseLeave,
  onDoubleClick,
  onContextMenu
}) => {
  const {
    isConstructorMode,
    handleMouseDown,
    handleTouchStart,
    getBoxPosition,
    getBoxSize,
    increaseBoxSize,
    decreaseBoxSize,
    snapLines,
    boxPositions
  } = useDragAndDrop(deviceType);

  const position = getBoxPosition(boxName);
  const size = getBoxSize(boxName);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
  const boxKey = `${boxName}_${deviceType}`;
  const savedPosition = boxPositions[boxKey];
  const hasRelativeCoords = savedPosition?.relativeX !== undefined && savedPosition?.relativeY !== undefined;

  // –°–ª—É—Ö–∞—á –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø–æ–∑–∏—Ü—ñ–π –∑ —ñ–Ω—à–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ —Ñ–æ–Ω—É)
  useEffect(() => {
    const handleBoxPositionsUpdate = (event: CustomEvent) => {
      const { updatedBox, deviceType: eventDeviceType } = event.detail;
      
      // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–∞—à –±–æ–∫—Å —ñ –Ω–∞—à deviceType
      if (updatedBox === boxName && eventDeviceType === deviceType) {
        console.log(`üì° ConstructorWrapper [${boxName}]: –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó`);
        // React –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ getBoxPosition
      }
    };

    // –°–ª—É—Ö–∞—á –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π
    const handleAllBoxPositionsSaved = (event: CustomEvent) => {
      const { savedCount, deviceType: eventDeviceType } = event.detail;
      console.log(`üì° ConstructorWrapper [${boxName}]: –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${savedCount} –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è ${eventDeviceType}`);
    };

    window.addEventListener('boxPositionsUpdated', handleBoxPositionsUpdate as EventListener);
    window.addEventListener('allBoxPositionsSaved', handleAllBoxPositionsSaved as EventListener);
    
    return () => {
      window.removeEventListener('boxPositionsUpdated', handleBoxPositionsUpdate as EventListener);
      window.removeEventListener('allBoxPositionsSaved', handleAllBoxPositionsSaved as EventListener);
    };
  }, [boxName, deviceType]);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  if (isConstructorMode && position) {
    console.log(`üéØ ConstructorWrapper [${boxName}]:`, {
      position,
      size,
      deviceType
    });
  }

  // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ transform –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  const getTransform = () => {
    const transforms = [];
    
    if (size?.scale && size.scale !== 1) {
      transforms.push(`scale(${size.scale})`);
    }
    
    return transforms.length > 0 ? transforms.join(' ') : undefined;
  };

  const constructorStyles: React.CSSProperties = {
    ...style,
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É –ø–æ–∑–∏—Ü—ñ—é —è–∫—â–æ –≤–æ–Ω–∞ —î
    ...(position && {
      position: 'absolute',
      left: position.x,
      top: position.y,
      zIndex: isConstructorMode ? 1000 : 'auto' // –ü—ñ–¥–Ω—ñ–º–∞—î–º–æ z-index –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    }),
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º–∞—Å—à—Ç–∞–± —è–∫—â–æ –≤—ñ–Ω —î
    ...(size?.scale && {
      transform: getTransform(),
      transformOrigin: 'center'
    }),
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏
    ...(size?.width && { width: size.width }),
    ...(size?.height && { height: size.height })
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–ª—ñ–∫—ñ–≤ - –≤—Ä–∞—Ö–æ–≤—É—é —Ä–µ–∂–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (isConstructorMode) {
      // –£ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —ñ–≥–Ω–æ—Ä—É—é –∫–ª—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
      return;
    }
    if (onClick) {
      onClick(event);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ mouseEnter
  const handleMouseEnter = (event: React.MouseEvent<HTMLDivElement>) => {
    if (onMouseEnter) {
      onMouseEnter(event);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ mouseLeave
  const handleMouseLeave = (event: React.MouseEvent<HTMLDivElement>) => {
    if (onMouseLeave) {
      onMouseLeave(event);
    }
  };

  return (
    <>
      {/* –°—ñ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ */}
      {isConstructorMode && (
        <>
          {/* –°—ñ—Ç–∫–∞ */}
          <div
            className="fixed inset-0 z-10 pointer-events-none"
            style={{
              backgroundImage: `
                linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px)
              `,
              backgroundSize: '20px 20px'
            }}
          />
          
          {/* üéØ –ù–û–í–ò–ô: –ù–∞–ø—Ä–∞–≤–ª—è—é—á—ñ –ª—ñ–Ω—ñ—ó (snap lines) */}
          {(snapLines.showVerticalCenter || snapLines.showHorizontalCenter) && (
            <div className="fixed inset-0 z-20 pointer-events-none">
              {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è (–≤—ñ—Å—å X) */}
              {snapLines.showVerticalCenter && (
                <motion.div
                  initial={{ opacity: 0, scaleY: 0 }}
                  animate={{ 
                    opacity: snapLines.snapToVerticalCenter ? 1 : 0.6,
                    scaleY: 1
                  }}
                  exit={{ opacity: 0, scaleY: 0 }}
                  transition={{ duration: 0.15 }}
                  className="absolute top-0 bottom-0 w-0.5"
                  style={{
                    left: '50%',
                    transform: 'translateX(-50%)',
                    background: snapLines.snapToVerticalCenter 
                      ? 'linear-gradient(to bottom, #8B5CF6, #A855F7, #8B5CF6)'
                      : 'rgba(139, 92, 246, 0.6)',
                    boxShadow: snapLines.snapToVerticalCenter 
                      ? '0 0 20px rgba(139, 92, 246, 0.8), 0 0 10px rgba(139, 92, 246, 0.4)'
                      : '0 0 10px rgba(139, 92, 246, 0.3)'
                  }}
                />
              )}
              
              {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è (–≤—ñ—Å—å Y) */}
              {snapLines.showHorizontalCenter && (
                <motion.div
                  initial={{ opacity: 0, scaleX: 0 }}
                  animate={{ 
                    opacity: snapLines.snapToHorizontalCenter ? 1 : 0.6,
                    scaleX: 1
                  }}
                  exit={{ opacity: 0, scaleX: 0 }}
                  transition={{ duration: 0.15 }}
                  className="absolute left-0 right-0 h-0.5"
                  style={{
                    top: '50%',
                    transform: 'translateY(-50%)',
                    background: snapLines.snapToHorizontalCenter 
                      ? 'linear-gradient(to right, #8B5CF6, #A855F7, #8B5CF6)'
                      : 'rgba(139, 92, 246, 0.6)',
                    boxShadow: snapLines.snapToHorizontalCenter 
                      ? '0 0 20px rgba(139, 92, 246, 0.8), 0 0 10px rgba(139, 92, 246, 0.4)'
                      : '0 0 10px rgba(139, 92, 246, 0.3)'
                  }}
                />
              )}
              
              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ —Ç–æ—á–∫–∞ (–ø–µ—Ä–µ—Ç–∏–Ω –æ—Å–µ–π) */}
              {snapLines.showVerticalCenter && snapLines.showHorizontalCenter && (
                <motion.div
                  initial={{ opacity: 0, scale: 0 }}
                  animate={{ 
                    opacity: (snapLines.snapToVerticalCenter && snapLines.snapToHorizontalCenter) ? 1 : 0.7,
                    scale: (snapLines.snapToVerticalCenter && snapLines.snapToHorizontalCenter) ? 1.2 : 1
                  }}
                  exit={{ opacity: 0, scale: 0 }}
                  transition={{ duration: 0.15 }}
                  className="absolute w-3 h-3 rounded-full"
                  style={{
                    left: '50%',
                    top: '50%',
                    transform: 'translate(-50%, -50%)',
                    background: (snapLines.snapToVerticalCenter && snapLines.snapToHorizontalCenter)
                      ? 'radial-gradient(circle, #A855F7, #8B5CF6)'
                      : 'rgba(139, 92, 246, 0.8)',
                    boxShadow: (snapLines.snapToVerticalCenter && snapLines.snapToHorizontalCenter)
                      ? '0 0 15px rgba(139, 92, 246, 1), 0 0 30px rgba(139, 92, 246, 0.5)'
                      : '0 0 10px rgba(139, 92, 246, 0.4)'
                  }}
                />
              )}
            </div>
          )}
          
          {/* –í—ñ–∑—É–∞–ª—å–Ω—ñ –º–µ–∂—ñ –±–µ–∑–ø–µ—á–Ω–æ—ó –∑–æ–Ω–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤) */}
          <div 
            className="fixed z-10 pointer-events-none border-2 border-dashed border-yellow-400 opacity-30 hidden lg:block"
            style={{
              top: '20px',
              left: '20px',
              right: '20px',
              bottom: '20px'
            }}
          />
        </>
      )}

      {/* –û–±–≥–æ—Ä—Ç–∫–∞ –±–æ–∫—Å—É */}
      <motion.div
        className={`relative ${className} ${isConstructorMode ? 'cursor-move' : ''}`}
        style={constructorStyles}
        onMouseDown={isConstructorMode ? (e) => handleMouseDown(boxName, e) : undefined}
        onTouchStart={isConstructorMode ? (e) => handleTouchStart(boxName, e) : undefined}
        onClick={handleClick}
        onMouseEnter={handleMouseEnter}
        onMouseLeave={handleMouseLeave}
        onDoubleClick={onDoubleClick}
        onContextMenu={onContextMenu}
        whileHover={isConstructorMode ? { 
          boxShadow: '0 0 20px rgba(59, 130, 246, 0.5)',
          border: '2px dashed rgba(59, 130, 246, 0.8)'
        } : {}}
        transition={{ duration: 0.2 }}
      >
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –±–æ–∫—Å—É */}
        {children}

        {/* –ö–Ω–æ–ø–∫–∏ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É */}
        <BoxResizeControls
          boxName={boxName}
          isVisible={isConstructorMode}
          onIncrease={() => increaseBoxSize(boxName)}
          onDecrease={() => decreaseBoxSize(boxName)}
          position="top-right"
        />

        {/* üéØ –ü–û–ö–†–ê–©–ï–ù–ò–ô –Ü–ù–î–ò–ö–ê–¢–û–† –ó –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò –≤ —Ä–µ–∂–∏–º—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ */}
        <AnimatePresence>
          {isConstructorMode && (
            <>
              {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–∑–≤–∏ –±–æ–∫—Å—É */}
              <motion.div
                initial={{ opacity: 0, y: -10, scale: 0.8 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: -10, scale: 0.8 }}
                className="absolute -top-8 left-0 bg-gradient-to-r from-blue-600 to-blue-500 text-white text-xs px-3 py-1.5 rounded-lg pointer-events-none z-50 shadow-lg border border-blue-400"
                style={{ fontSize: '10px', fontWeight: '600' }}
              >
                <div className="flex items-center gap-1">
                  <span>üì¶</span>
                  <span className="uppercase tracking-wide">{boxName}</span>
                  {size?.scale && size.scale !== 1 && (
                    <span className="text-blue-200 ml-1">({Math.round(size.scale * 100)}%)</span>
                  )}
                </div>
              </motion.div>

              {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */}
              {position && (
                <motion.div
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: 10 }}
                  className="absolute -bottom-8 left-0 bg-gradient-to-r from-gray-900 to-gray-800 text-white text-xs px-2 py-1 rounded-lg pointer-events-none z-50 shadow-lg border border-gray-600"
                  style={{ fontSize: '9px', fontWeight: '500' }}
                >
                  {/* –ê–±—Å–æ–ª—é—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ */}
                  <div className="flex items-center gap-1">
                    <span className="text-blue-300">üìç</span>
                    <span>{Math.round(position.x)}px, {Math.round(position.y)}px</span>
                  </div>
                  
                  {/* –í—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö */}
                  {(() => {
                    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤—ñ–¥–Ω–æ—Å–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
                    const relativeX = hasRelativeCoords 
                      ? savedPosition.relativeX 
                      : (position.x / window.innerWidth) * 100;
                    const relativeY = hasRelativeCoords 
                      ? savedPosition.relativeY 
                      : (position.y / window.innerHeight) * 100;
                    
                    return (
                      <div className="flex items-center gap-1 text-purple-300 mt-0.5">
                        <span>üìê</span>
                        <span>{relativeX.toFixed(1)}%, {relativeY.toFixed(1)}%</span>
                        {hasRelativeCoords && (
                          <span className="text-green-400 ml-1" title="–ó–±–µ—Ä–µ–∂–µ–Ω–æ">üíæ</span>
                        )}
                      </div>
                    );
                  })()}
                </motion.div>
              )}
            </>
          )}
        </AnimatePresence>
      </motion.div>
    </>
  );
};

export default ConstructorWrapper; 