/**
 * üéØ ADMIN MANAGER - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª–ª—é V2
 * 
 * –¶–µ–π —Ñ–∞–π–ª —É–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ–º–∞ –∞—Å–ø–µ–∫—Ç–∞–º–∏ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ:
 * - –í–µ—Ä—Å—ñ—è–º–∏ (V1/V2)
 * - Responsive –ø–æ–≤–µ–¥—ñ–Ω–∫–æ—é
 * - –°—Ç–∞–Ω–æ–º —Å–µ—Å—ñ—ó
 * - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
 */

export type AdminPanelVersion = 'v1' | 'v2';
export type DeviceType = 'mobile' | 'tablet' | 'desktop';

interface AdminPanelState {
  isVisible: boolean;
  currentVersion: AdminPanelVersion;
  deviceType: DeviceType;
  activeTab: string;
  isAuthenticated: boolean;
}

interface AdminPanelConfig {
  width: string;
  height: string;
  padding: string;
  fontSize: {
    header: string;
    body: string;
    small: string;
  };
  spacing: {
    tabs: string;
    content: string;
    margins: string;
  };
}

/**
 * üéØ ADMIN MANAGER CLASS - Singleton –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª–ª—é
 */
class AdminManager {
  private state: AdminPanelState;
  private listeners: Array<(state: AdminPanelState) => void> = [];
  private configs: Record<DeviceType, AdminPanelConfig>;

  constructor() {
    // üéØ –ü–û–ß–ê–¢–ö–û–í–ò–ô –°–¢–ê–ù - V2 —è–∫ default!
    this.state = {
      isVisible: false,
      currentVersion: 'v2', // üöÄ –ó–ú–Ü–ù–ï–ù–û: V2 —è–∫ –æ—Å–Ω–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
      deviceType: this.detectDeviceType(),
      activeTab: 'preview',
      isAuthenticated: false
    };

    // üìê –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    this.configs = {
      mobile: {
        width: '100%',
        height: '100vh',
        padding: '8px',
        fontSize: {
          header: '16px',
          body: '14px',
          small: '12px'
        },
        spacing: {
          tabs: '4px',
          content: '8px',
          margins: '8px'
        }
      },
      tablet: {
        width: '90%',
        height: '85vh',
        padding: '16px',
        fontSize: {
          header: '18px',
          body: '15px',
          small: '13px'
        },
        spacing: {
          tabs: '6px',
          content: '12px',
          margins: '12px'
        }
      },
      desktop: {
        width: '85%',
        height: '90vh',
        padding: '24px',
        fontSize: {
          header: '20px',
          body: '16px',
          small: '14px'
        },
        spacing: {
          tabs: '8px',
          content: '16px',
          margins: '16px'
        }
      }
    };

    // üéß –°–ª—É—Ö–∞—î–º–æ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', this.handleResize.bind(this));
    }
  }

  /**
   * üì± –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–∏—Å—Ç—Ä–æ—é
   */
  private detectDeviceType(): DeviceType {
    if (typeof window === 'undefined') return 'desktop';
    
    const width = window.innerWidth;
    if (width < 768) return 'mobile';
    if (width < 1024) return 'tablet';
    return 'desktop';
  }

  /**
   * üîÑ –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
   */
  private handleResize() {
    const newDeviceType = this.detectDeviceType();
    if (newDeviceType !== this.state.deviceType) {
      this.setState({ deviceType: newDeviceType });
    }
  }

  /**
   * üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
   */
  private setState(newState: Partial<AdminPanelState>) {
    this.state = { ...this.state, ...newState };
    this.notifyListeners();
  }

  /**
   * üì° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø—Ä–æ –∑–º—ñ–Ω–∏
   */
  private notifyListeners() {
    this.listeners.forEach(listener => listener(this.state));
  }

  /**
   * üéØ –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏
   */
  
  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
  getState(): AdminPanelState {
    return { ...this.state };
  }

  // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏
  subscribe(listener: (state: AdminPanelState) => void): () => void {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ
  togglePanel(forceState?: boolean) {
    const newState = forceState !== undefined ? forceState : !this.state.isVisible;
    this.setState({ isVisible: newState });
  }

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ–π
  switchVersion(version: AdminPanelVersion) {
    this.setState({ currentVersion: version });
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if (typeof localStorage !== 'undefined') {
      localStorage.setItem('adminPanelVersion', version);
    }
    
    console.log(`üîÑ Admin Panel switched to ${version.toUpperCase()}`);
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
  setActiveTab(tab: string) {
    this.setState({ activeTab: tab });
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  setAuthenticated(isAuthenticated: boolean) {
    this.setState({ isAuthenticated });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
  getDeviceConfig(): AdminPanelConfig {
    return this.configs[this.state.deviceType];
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∫–∞–∑—É –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞
  shouldShowAdminButton(): boolean {
    if (typeof window === 'undefined') return false;
    
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.has('admin') || window.location.port === '8081';
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
  getOptimalDimensions() {
    const { deviceType } = this.state;
    return {
      isMobile: deviceType === 'mobile',
      isTablet: deviceType === 'tablet',
      isDesktop: deviceType === 'desktop',
      config: this.configs[deviceType]
    };
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
  initialize() {
    if (typeof localStorage !== 'undefined') {
      const savedVersion = localStorage.getItem('adminPanelVersion') as AdminPanelVersion;
      if (savedVersion && (savedVersion === 'v1' || savedVersion === 'v2')) {
        this.setState({ currentVersion: savedVersion });
      }
    }
  }
}

// üéØ –ï–∫—Å–ø–æ—Ä—Ç singleton instance
export const adminManager = new AdminManager();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if (typeof window !== 'undefined') {
  adminManager.initialize();
} 