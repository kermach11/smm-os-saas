import { useState, useEffect, useCallback } from 'react';

interface AdminSessionData {
  timestamp: number;
  expiry: number;
}

export const useSimpleAdminSession = () => {
  const [isAdmin, setIsAdmin] = useState(false);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—ó —Å–µ—Å—ñ—ó –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è showAdminButton
    try {
      const savedData = localStorage.getItem('immersiveExperienceData');
      if (savedData) {
        const data = JSON.parse(savedData);
        if (data.adminSettings?.showAdminButton) {
          delete data.adminSettings.showAdminButton;
          localStorage.setItem('immersiveExperienceData', JSON.stringify(data));
          console.log('üîß –û—á–∏—â–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É showAdminButton');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–æ–∫:', error);
    }

    const hasValidSession = checkExistingSession();
    if (hasValidSession) {
      setIsAdmin(true);
      console.log('‚úÖ Admin session: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω—É —Å–µ—Å—ñ—é');
    }
    checkAdminUrlParameter();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π logout –ø—Ä–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó
  useEffect(() => {
    if (isAdmin) {
      const sessionData = localStorage.getItem('adminSession');
      if (sessionData) {
        try {
          const session = JSON.parse(sessionData) as AdminSessionData;
          const now = new Date().getTime();
          const timeLeft = session.expiry - now;
          
          if (timeLeft > 0) {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ logout
            const timer = setTimeout(() => {
              console.log('‚è∞ Admin session: –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏—Ö—ñ–¥');
              logout();
            }, timeLeft);
            
            return () => clearTimeout(timer);
          } else {
            // –°–µ—Å—ñ—è –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
            logout();
          }
        } catch (error) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ logout:', error);
          logout();
        }
      }
    }
  }, [isAdmin]);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ admin
  const checkAdminUrlParameter = useCallback(() => {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.has('admin');
  }, []);

  const checkExistingSession = useCallback(() => {
    try {
      const sessionData = localStorage.getItem('adminSession');
      if (sessionData) {
        const session = JSON.parse(sessionData) as AdminSessionData;
        const now = new Date().getTime();
        
        if (now < session.expiry) {
          console.log('‚úÖ Admin session: –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω—É —Å–µ—Å—ñ—é, –∑–∞–ª–∏—à–∏–ª–æ—Å—å:', Math.round((session.expiry - now) / 1000 / 60), '—Ö–≤–∏–ª–∏–Ω');
          return true;
        } else {
          console.log('‚è∞ Admin session: –°–µ—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞, –≤–∏–¥–∞–ª—è—î–º–æ');
          localStorage.removeItem('adminSession');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–µ—Å—ñ—ó:', error);
      localStorage.removeItem('adminSession');
    }
    return false;
  }, []);

  const login = useCallback(() => {
    setIsAdmin(true);
    console.log('üîê Admin session: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–≤—ñ–π—à–æ–≤');
  }, []);

  const logout = useCallback(() => {
    localStorage.removeItem('adminSession');
    setIsAdmin(false);
    console.log('üîê Admin session: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–π—à–æ–≤');
  }, []);

  const shouldShowAdminButton = useCallback((): boolean => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('admin')) {
      // console.log('üîß Admin button: –ü–æ–∫–∞–∑—É—é —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä ?admin');
      return true;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ—Ä—Ç 8081 (–∞–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä)
    if (window.location.port === '8081') {
      // console.log('üîß Admin button: –ü–æ–∫–∞–∑—É—é —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç 8081');
      return true;
    }
    
    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –º–∞—î –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ?admin –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É –ª–∏—à–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    
    // console.log('üîß Admin button: –ü—Ä–∏—Ö–æ–≤—É—é - –Ω–µ–º–∞—î –ø—ñ–¥—Å—Ç–∞–≤ –¥–ª—è –ø–æ–∫–∞–∑—É');
    return false;
  }, []);

  return {
    isAdmin,
    login,
    logout,
    checkExistingSession,
    shouldShowAdminButton,
    checkAdminUrlParameter
  };
}; 