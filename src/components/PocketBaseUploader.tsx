import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Upload, Cloud, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { pocketbaseStorageService, UploadedFile } from '../services/PocketBaseStorageService';
import { Button } from './ui/button';
import { Progress } from './ui/progress';

interface PocketBaseUploaderProps {
  onUpload: (files: UploadedFile[]) => void;
  allowedTypes?: ('image' | 'video' | 'audio' | 'document')[];
  maxFiles?: number;
  maxSize?: number; // MB
}

const PocketBaseUploader: React.FC<PocketBaseUploaderProps> = ({
  onUpload,
  allowedTypes = ['image', 'video', 'audio'],
  maxFiles = 10,
  maxSize = 50
}) => {
  const [isDragging, setIsDragging] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<'checking' | 'connected' | 'error'>('checking');

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  React.useEffect(() => {
    checkConnection();
  }, []);

  const checkConnection = async () => {
    try {
      const isConnected = await pocketbaseStorageService.checkConnection();
      setConnectionStatus(isConnected ? 'connected' : 'error');
      
      if (!isConnected) {
        const serviceInfo = pocketbaseStorageService.getServiceInfo();
        if (!serviceInfo.hasCredentials) {
          setError('PocketBase URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –î–æ–¥–∞–π—Ç–µ VITE_POCKETBASE_URL –≤ environment variables.');
        } else {
          setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ PocketBase Storage. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
        }
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:', error);
      setConnectionStatus('error');
      setError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó PocketBase Storage');
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    handleFiles(files);
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      handleFiles(files);
    }
  };

  const handleFiles = async (files: File[]) => {
    setError(null);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ (—Ç–æ–π —Å–∞–º–∏–π –∫–æ–¥ —â–æ –≤ SupabaseUploader)
    const validFiles = files.filter(file => validateFile(file));
    
    if (validFiles.length === 0) {
      setError('–ù–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É');
      return;
    }

    if (validFiles.length > maxFiles) {
      setError(`–ú–æ–∂–Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–∞–∫—Å–∏–º—É–º ${maxFiles} —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–∞–∑`);
      return;
    }

    await uploadFiles(validFiles);
  };

  const validateFile = (file: File): boolean => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É
    if (file.size > maxSize * 1024 * 1024) {
      setError(`–§–∞–π–ª ${file.name} –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä ${maxSize}MB`);
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É
    const fileType = getFileType(file);
    if (!allowedTypes.includes(fileType)) {
      setError(`–¢–∏–ø —Ñ–∞–π–ª—É ${file.name} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –î–æ–∑–≤–æ–ª–µ–Ω—ñ: ${allowedTypes.join(', ')}`);
      return false;
    }

    return true;
  };

  const getFileType = (file: File): 'image' | 'video' | 'audio' | 'document' => {
    const mimeType = file.type.toLowerCase();
    
    if (mimeType.startsWith('image/')) return 'image';
    if (mimeType.startsWith('video/')) return 'video';
    if (mimeType.startsWith('audio/')) return 'audio';
    
    return 'document';
  };

  const uploadFiles = async (files: File[]) => {
    setIsUploading(true);
    setUploadProgress(0);
    setUploadedFiles([]);

    try {
      console.log(`üöÄ PocketBaseUploader: –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${files.length} —Ñ–∞–π–ª—ñ–≤`);
      
      const results: UploadedFile[] = [];
      
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        console.log(`üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${i + 1}/${files.length}: ${file.name}`);
        setUploadProgress((i / files.length) * 100);
        
        try {
          const uploadedFile = await pocketbaseStorageService.uploadFile(file);
          results.push(uploadedFile);
          
          console.log(`‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${uploadedFile.name}`);
        } catch (fileError) {
          console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${file.name}:`, fileError);
          setError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${file.name}: ${fileError}`);
        }
      }
      
      setUploadProgress(100);
      setUploadedFiles(results);
      
      if (results.length > 0) {
        console.log(`üéâ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${results.length} —Ñ–∞–π–ª—ñ–≤`);
        onUpload(results);
      }
      
    } catch (error) {
      console.error('‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
      setError(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error}`);
    } finally {
      setIsUploading(false);
    }
  };

  const getAcceptTypes = (): string => {
    const mimeTypes: { [key: string]: string } = {
      image: '.jpg,.jpeg,.png,.gif,.bmp,.webp,.svg,image/*',
      video: '.mp4,.avi,.mov,.wmv,.mkv,.webm,.m4v,video/*',
      audio: '.mp3,.wav,.ogg,.m4a,.aac,.flac,.wma,audio/*',
      document: '.pdf,.doc,.docx,.txt'
    };
    
    return allowedTypes.map(type => mimeTypes[type]).join(',');
  };

  // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PocketBase
  if (connectionStatus === 'error') {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <div className="flex items-center gap-2 text-red-700">
          <AlertCircle size={20} />
          <span className="font-medium">PocketBase Storage –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π</span>
        </div>
        {error && (
          <p className="text-red-600 text-sm mt-2">{error}</p>
        )}
        <Button
          variant="outline"
          size="sm"
          onClick={checkConnection}
          className="mt-3"
        >
          –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
        </Button>
      </div>
    );
  }

  if (connectionStatus === 'checking') {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="animate-spin mr-2" size={20} />
        <span>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PocketBase...</span>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Upload Area - –Ü–î–ï–ù–¢–ò–ß–ù–ò–ô UI —è–∫ –≤ SupabaseUploader */}
      <motion.div
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
          isDragging
            ? 'border-blue-400 bg-blue-50'
            : 'border-gray-300 hover:border-gray-400'
        }`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <Cloud className="mx-auto mb-4 text-gray-400" size={48} />
        
        <h3 className="text-lg font-medium mb-2">
          –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ Cloud Storage
        </h3>
        
        <p className="text-gray-600 mb-4">
          –ü–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å —Ñ–∞–π–ª–∏ —Å—é–¥–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –≤–∏–±–æ—Ä—É
        </p>
        
        <input
          type="file"
          id="pocketbase-file-upload"
          multiple
          accept={getAcceptTypes()}
          onChange={handleFileSelect}
          className="hidden"
          disabled={isUploading}
        />
        
        <label htmlFor="pocketbase-file-upload">
          <Button
            variant="outline"
            disabled={isUploading}
            className="cursor-pointer"
            asChild
          >
            <span>
              {isUploading ? (
                <>
                  <Loader2 className="animate-spin mr-2" size={16} />
                  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
                </>
              ) : (
                <>
                  <Upload className="mr-2" size={16} />
                  –í–∏–±—Ä–∞—Ç–∏ —Ñ–∞–π–ª–∏
                </>
              )}
            </span>
          </Button>
        </label>
        
        <p className="text-xs text-gray-500 mt-2">
          –ú–∞–∫—Å–∏–º—É–º {maxFiles} —Ñ–∞–π–ª—ñ–≤, –¥–æ {maxSize}MB –∫–æ–∂–µ–Ω
        </p>
        <p className="text-xs text-gray-500">
          –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ç–∏–ø–∏: {allowedTypes.join(', ')}
        </p>
      </motion.div>

      {/* Progress - –Ü–î–ï–ù–¢–ò–ß–ù–ò–ô UI */}
      {isUploading && (
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
            <span>{Math.round(uploadProgress)}%</span>
          </div>
          <Progress value={uploadProgress} className="w-full" />
        </div>
      )}

      {/* Success - –Ü–î–ï–ù–¢–ò–ß–ù–ò–ô UI */}
      {uploadedFiles.length > 0 && !isUploading && (
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center gap-2 text-green-700">
            <CheckCircle size={20} />
            <span className="font-medium">
              –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {uploadedFiles.length} —Ñ–∞–π–ª—ñ–≤ –≤ Cloud Storage
            </span>
          </div>
          <div className="mt-2 space-y-1">
            {uploadedFiles.map((file, index) => (
              <div key={index} className="text-sm text-green-600">
                ‚úì {file.originalName} ({Math.round(file.size / 1024)}KB)
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Error - –Ü–î–ï–ù–¢–ò–ß–ù–ò–ô UI */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center gap-2 text-red-700">
            <AlertCircle size={20} />
            <span className="font-medium">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</span>
          </div>
          <p className="text-red-600 text-sm mt-2">{error}</p>
        </div>
      )}
    </div>
  );
};

export default PocketBaseUploader;


