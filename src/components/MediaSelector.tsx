import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FileItem } from '../types/contentManager';
import indexedDBService from '../services/IndexedDBService';

interface MediaSelectorProps {
  isOpen: boolean;
  onClose: () => void;
  onSelect: (file: FileItem) => void;
  allowedTypes?: ('image' | 'audio' | 'video')[];
  title?: string;
  description?: string;
}

const MediaSelector: React.FC<MediaSelectorProps> = ({
  isOpen,
  onClose,
  onSelect,
  allowedTypes = ['image', 'audio', 'video'],
  title = '–í–∏–±—Ä–∞—Ç–∏ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª',
  description = '–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ –≤–∞—à–æ—ó –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏'
}) => {
  const [files, setFiles] = useState<FileItem[]>([]);
  const [selectedType, setSelectedType] = useState<'all' | 'image' | 'audio' | 'video'>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [loadingFileId, setLoadingFileId] = useState<string | null>(null);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ localStorage
  useEffect(() => {
    if (isOpen) {
      console.log('üîÑ MediaSelector –≤—ñ–¥–∫—Ä–∏—Ç–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤');
      console.log('üéØ –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏:', allowedTypes);
      loadFiles();
    }
  }, [isOpen]);

  const loadFiles = async () => {
    try {
      setIsLoading(true);
      console.log('üîÑ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —á–µ—Ä–µ–∑ IndexedDBService...');
      console.log('üéØ –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤:', allowedTypes);
      
      // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ IndexedDB —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
      const indexedDBFiles = await indexedDBService.loadFiles();
      
      if (indexedDBFiles.length > 0) {
        console.log(`üìÇ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${indexedDBFiles.length} —Ñ–∞–π–ª—ñ–≤ –∑ IndexedDB`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏
        const correctedFiles = await fixIncorrectFileTypes(indexedDBFiles);
        setFiles(correctedFiles);
      } else {
        // –Ø–∫—â–æ IndexedDB –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–±—É—î–º–æ localStorage —è–∫ —Ä–µ–∑–µ—Ä–≤
        console.log('‚ÑπÔ∏è MediaSelector: IndexedDB –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage...');
        
        const savedFiles = localStorage.getItem('smartContentManager_v2');
        if (savedFiles) {
          const allFiles = JSON.parse(savedFiles) as FileItem[];
          console.log(`üìÇ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª—ñ–≤ –∑ localStorage`);
          
          // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª–∏ —Ç–∞ –º—ñ–≥—Ä—É—î–º–æ –≤ IndexedDB
          const correctedFiles = await fixIncorrectFileTypes(allFiles);
          await indexedDBService.saveFiles(correctedFiles);
          
          setFiles(correctedFiles);
          console.log('‚úÖ MediaSelector: –ú—ñ–≥—Ä–∞—Ü—ñ—è —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } else {
          console.log('üìÇ MediaSelector: –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤');
          setFiles([]);
        }
      }
    } catch (error) {
      console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
      
      // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø—Ä–æ–±—É—î–º–æ localStorage
      try {
        const savedFiles = localStorage.getItem('smartContentManager_v2');
        if (savedFiles) {
          const allFiles = JSON.parse(savedFiles) as FileItem[];
          const correctedFiles = await fixIncorrectFileTypes(allFiles);
          setFiles(correctedFiles);
          console.log('‚úÖ MediaSelector: –†–µ–∑–µ—Ä–≤–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ localStorage —É—Å–ø—ñ—à–Ω–µ');
        } else {
          setFiles([]);
        }
      } catch (localStorageError) {
        console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', localStorageError);
        setFiles([]);
      }
    } finally {
      setIsLoading(false);
      console.log('üèÅ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
  const fixIncorrectFileTypes = async (files: FileItem[]): Promise<FileItem[]> => {
    console.log('üîß MediaSelector: –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...');
    
    const correctedFiles: FileItem[] = [];
    let fixedCount = 0;
    let deletedCount = 0;
    
    for (const file of files) {
      if (!file.url || !file.url.startsWith('data:')) {
        correctedFiles.push(file);
        continue;
      }
      
      const mimeType = file.url.split(';')[0].replace('data:', '');
      let shouldFix = false;
      let correctType: 'image' | 'audio' | 'video' | null = null;
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ñ–∞–π–ª—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º –≤—ñ–¥–µ–æ
      const isVideoExtension = file.originalName && /\.(mp4|mov|avi|webm|mkv|wmv|flv|m4v)$/i.test(file.originalName);
      const isAudioExtension = file.originalName && /\.(mp3|wav|ogg|aac|m4a|flac|wma)$/i.test(file.originalName);
      const isImageExtension = file.originalName && /\.(jpg|jpeg|png|gif|webp|svg|bmp)$/i.test(file.originalName);
      
      console.log(`üîç –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É: ${file.name}`, {
        originalName: file.originalName,
        storedType: file.type,
        mimeType: mimeType,
        isVideoExtension,
        isAudioExtension,
        isImageExtension
      });
      
      // –í–∏—è–≤–ª—è—î–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–∏–ø–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ç–∞ MIME-—Ç–∏–ø—É
      if (isVideoExtension && file.type !== 'video') {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –º–∞—î –≤—ñ–¥–µ–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è, –∞–ª–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ ${file.type}`);
        correctType = 'video';
        shouldFix = true;
      } else if (isAudioExtension && file.type !== 'audio') {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –º–∞—î –∞—É–¥—ñ–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è, –∞–ª–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ ${file.type}`);
        correctType = 'audio';
        shouldFix = true;
      } else if (isImageExtension && file.type !== 'image') {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è, –∞–ª–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ ${file.type}`);
        correctType = 'image';
        shouldFix = true;
      } else if (file.type === 'video' && mimeType.startsWith('image/') && !isImageExtension) {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤—ñ–¥–µ–æ, –∞–ª–µ MIME-—Ç–∏–ø –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${mimeType})`);
        // –Ø–∫—â–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –≤–∫–∞–∑—É—î –Ω–∞ –≤—ñ–¥–µ–æ, –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ –≤—ñ–¥–µ–æ
        if (isVideoExtension) {
          console.log(`üìπ –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É`);
          correctedFiles.push(file); // –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
          continue;
        } else {
          correctType = 'image';
          shouldFix = true;
        }
      } else if (file.type === 'image' && mimeType.startsWith('video/')) {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ —Ü–µ –≤—ñ–¥–µ–æ (${mimeType})`);
        correctType = 'video';
        shouldFix = true;
      } else if (file.type === 'audio' && (mimeType.startsWith('image/') || mimeType.startsWith('video/'))) {
        console.log(`üîß –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ: ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∞—É–¥—ñ–æ, –∞–ª–µ —Ü–µ ${mimeType.split('/')[0]}`);
        correctType = mimeType.startsWith('image/') ? 'image' : 'video';
        shouldFix = true;
      }
      
      // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ –∑ SVG placeholder –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
      if (file.type === 'video' && file.url.includes('data:image/svg+xml') && file.url.includes('üé¨')) {
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ SVG placeholder –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: ${file.name}`);
        deletedCount++;
        continue; // –ù–µ –¥–æ–¥–∞—î–º–æ —Ü–µ–π —Ñ–∞–π–ª –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      }
      
      // –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ñ–∞–π–ª—ñ–≤ (—è–∫—â–æ —î —Ñ–∞–π–ª –∑ —Ç–∏–º –∂–µ —ñ–º'—è–º –∞–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–∏–ø–æ–º)
      const duplicateFile = correctedFiles.find(f => 
        f.originalName === file.originalName && f.name === file.name && f.type !== file.type
      );
      if (duplicateFile) {
        console.log(`üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç: ${file.name} (${file.type}), –∑–∞–ª–∏—à–∞—î–º–æ (${duplicateFile.type})`);
        deletedCount++;
        continue;
      }
      
      if (shouldFix && correctType) {
        const fixedFile = {
          ...file,
          type: correctType
        };
        correctedFiles.push(fixedFile);
        fixedCount++;
        console.log(`‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∏–ø —Ñ–∞–π–ª—É: ${file.name} (${file.originalName}) ‚Üí ${file.type} ‚Üí ${correctType}`);
      } else {
        correctedFiles.push(file);
      }
    }
    
    if (fixedCount > 0 || deletedCount > 0) {
      console.log(`‚úÖ MediaSelector: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}, –≤–∏–¥–∞–ª–µ–Ω–æ: ${deletedCount}`);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏ –Ω–∞–∑–∞–¥ –≤ IndexedDB
      try {
        await indexedDBService.saveFiles(correctedFiles);
        console.log('üíæ MediaSelector: –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ IndexedDB');
        
        // LocalStorage —Ç—ñ–ª—å–∫–∏ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–±–µ–∑ –≤–µ–ª–∏–∫–∏—Ö URL)
        const minimalFiles = correctedFiles.map(file => ({
          ...file,
          url: file.url && file.url.length > 100000 ? '' : file.url // –û—á–∏—â–∞—î–º–æ –≤–µ–ª–∏–∫—ñ URL
        }));
        localStorage.setItem('smartContentManager_v2', JSON.stringify(minimalFiles));
        console.log('üíæ MediaSelector: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ localStorage');
      } catch (saveError) {
        console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:', saveError);
      }
    } else {
      console.log('‚úÖ MediaSelector: –í—Å—ñ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø');
    }
    
    return correctedFiles;
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑ IndexedDB
  const loadFullFilesFromIndexedDB = async (currentFiles: FileItem[]): Promise<void> => {
    return new Promise((resolve, reject) => {
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—è
      const timeout = setTimeout(() => {
        console.warn('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ IndexedDB (5 —Å–µ–∫—É–Ω–¥)');
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ IndexedDB'));
      }, 5000);

      try {
        const request = indexedDB.open('ContentManagerDB', 2); // –û–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å—ñ—ó 2
        
        request.onupgradeneeded = (event) => {
          console.log('üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ IndexedDB –≤ MediaSelector');
          const db = (event.target as IDBOpenDBRequest).result;
          
          // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ —Å—Ö–æ–≤–∏—â–µ —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
          if (db.objectStoreNames.contains('files')) {
            db.deleteObjectStore('files');
            console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –æ–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ –≤ MediaSelector');
          }
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
          const store = db.createObjectStore('files', { keyPath: 'id' });
          console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ "files" –≤ MediaSelector');
        };
        
        request.onsuccess = (event) => {
          clearTimeout(timeout);
          const db = (event.target as IDBOpenDBRequest).result;
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –æ–±'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ
          if (!db.objectStoreNames.contains('files')) {
            console.warn('‚ö†Ô∏è –û–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ "files" –Ω–µ —ñ—Å–Ω—É—î –≤ MediaSelector');
            db.close();
            resolve();
            return;
          }
          
          try {
            const transaction = db.transaction(['files'], 'readonly');
            const store = transaction.objectStore('files');
            const getAllRequest = store.getAll();
            
            getAllRequest.onsuccess = () => {
              const indexedDBFiles = getAllRequest.result as FileItem[];
              console.log(`üìÇ MediaSelector: –ó–Ω–∞–π–¥–µ–Ω–æ ${indexedDBFiles.length} —Ñ–∞–π–ª—ñ–≤ –≤ IndexedDB`);
              
              // –û–±'—î–¥–Ω—É—î–º–æ —Ñ–∞–π–ª–∏ –∑ localStorage —Ç–∞ IndexedDB
              const mergedFiles = currentFiles.map(localFile => {
                // –î–ª—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤
                if (localFile.type === 'audio' && (localFile.isHeavy || !localFile.url || localFile.url.length < 500 * 1024)) {
                  const fullFile = indexedDBFiles.find(dbFile => dbFile.id === localFile.id);
                  if (fullFile && fullFile.url && fullFile.url.length > 1000) {
                    console.log(`‚úÖ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª –∑ IndexedDB: ${fullFile.name} (${(fullFile.url.length / 1024).toFixed(2)} KB)`);
                    return fullFile;
                  } else {
                    console.warn(`‚ö†Ô∏è MediaSelector: –ê—É–¥—ñ–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–ø–æ–≤–Ω–∏–π –≤ IndexedDB: ${localFile.name}`, {
                      foundInDB: !!fullFile,
                      hasUrl: !!fullFile?.url,
                      urlLength: fullFile?.url?.length || 0
                    });
                    return localFile;
                  }
                }
                
                // –î–ª—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤
                if (localFile.type === 'video') {
                  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø—Ä–µ–≤—å—é (SVG –∞–±–æ –º–∞–ª–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è) –∑–∞–º—ñ—Å—Ç—å –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ
                  const isPreview = localFile.url && (
                    localFile.url.includes('data:image/svg+xml') ||
                    localFile.url.includes('data:image/') ||
                    localFile.url.length < 50000 // –ú–µ–Ω—à–µ 50KB —Ü–µ —Å–∫–æ—Ä—ñ—à–µ –ø—Ä–µ–≤—å—é
                  );
                  
                  if (isPreview) {
                    const fullFile = indexedDBFiles.find(dbFile => dbFile.id === localFile.id);
                    if (fullFile && fullFile.url && fullFile.url.length > localFile.url.length && 
                        fullFile.url.startsWith('data:video/')) {
                      console.log(`‚úÖ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –∑ IndexedDB: ${fullFile.name} (${(fullFile.url.length / 1024 / 1024).toFixed(2)} MB)`);
                      return { ...fullFile, fullVideoUrl: fullFile.url };
                    } else {
                      console.warn(`‚ö†Ô∏è MediaSelector: –ü–æ–≤–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB: ${localFile.name}`, {
                        foundInDB: !!fullFile,
                        hasUrl: !!fullFile?.url,
                        fullUrlLength: fullFile?.url?.length || 0,
                        localUrlLength: localFile.url?.length || 0,
                        isVideoMime: fullFile?.url?.startsWith('data:video/') || false
                      });
                      return localFile;
                    }
                  } else {
                    // –Ø–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –≤–∂–µ –º–∞—î –ø–æ–≤–Ω–µ –≤—ñ–¥–µ–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                    console.log(`‚úÖ MediaSelector: –õ–æ–∫–∞–ª—å–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –≤–∂–µ –ø–æ–≤–Ω–∏–π: ${localFile.name}`);
                    return localFile;
                  }
                }
                
                return localFile;
              });
              
              setFiles(mergedFiles);
              console.log(`‚úÖ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ –∑ IndexedDB`);
              db.close();
              resolve();
            };
            
            getAllRequest.onerror = () => {
              clearTimeout(timeout);
              console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ IndexedDB');
              db.close();
              reject(new Error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ IndexedDB'));
            };
            
            transaction.onerror = () => {
              clearTimeout(timeout);
              console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó IndexedDB');
              db.close();
              reject(new Error('–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó IndexedDB'));
            };
            
            transaction.onabort = () => {
              clearTimeout(timeout);
              console.error('‚ùå MediaSelector: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è IndexedDB –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞');
              db.close();
              reject(new Error('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è IndexedDB –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞'));
            };
          } catch (transactionError) {
            clearTimeout(timeout);
            console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', transactionError);
            db.close();
            reject(new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ${transactionError.message}`));
          }
        };
        
        request.onerror = () => {
          clearTimeout(timeout);
          console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è IndexedDB');
          reject(new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è IndexedDB'));
        };
        
        request.onblocked = () => {
          clearTimeout(timeout);
          console.warn('‚ö†Ô∏è MediaSelector: IndexedDB –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞');
          reject(new Error('IndexedDB –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞'));
        };
      } catch (error) {
        clearTimeout(timeout);
        console.error('‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ IndexedDB:', error);
        reject(error);
      }
    });
  };

  // –§—É–Ω–∫—Ü—ñ—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∏–ø—É —Ñ–∞–π–ª—É (–ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º)
  const validateFileType = (file: FileItem): boolean => {
    if (!file.url) return true; // –Ø–∫—â–æ –Ω–µ–º–∞—î URL, –Ω–µ –º–æ–∂–µ–º–æ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ data URL
    if (file.url.startsWith('data:')) {
      const mimeType = file.url.split(';')[0].replace('data:', '');
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤ –∑ –ø—Ä–µ–≤—å—é
      const isVideoExtension = file.originalName && /\.(mp4|mov|avi|webm|mkv|wmv|flv|m4v)$/i.test(file.originalName);
      const isAudioExtension = file.originalName && /\.(mp3|wav|ogg|aac|m4a|flac|wma)$/i.test(file.originalName);
      const isImageExtension = file.originalName && /\.(jpg|jpeg|png|gif|webp|svg|bmp)$/i.test(file.originalName);
      
      // –Ø–∫—â–æ —Ñ–∞–π–ª –º–∞—î –≤—ñ–¥–µ–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤—ñ–¥–µ–æ, –∞–ª–µ MIME-—Ç–∏–ø –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (–ø—Ä–µ–≤—å—é)
      if (file.type === 'video' && mimeType.startsWith('image/') && isVideoExtension) {
        console.log(`üìπ –§–∞–π–ª ${file.name} - –≤—ñ–¥–µ–æ –∑ –ø—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
        return true; // –¶–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –≤—ñ–¥–µ–æ –∑ –ø—Ä–µ–≤—å—é
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å MIME-—Ç–∏–ø—É —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ç–∏–ø—É
      if (file.type === 'video' && mimeType.startsWith('image/') && !isVideoExtension) {
        console.error(`‚ùå –§–∞–π–ª ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –≤—ñ–¥–µ–æ, –∞–ª–µ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (${mimeType})`);
        return false;
      }
      
      if (file.type === 'image' && mimeType.startsWith('video/')) {
        console.error(`‚ùå –§–∞–π–ª ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ —Ü–µ –≤—ñ–¥–µ–æ (${mimeType})`);
        return false;
      }
      
      if (file.type === 'audio' && (mimeType.startsWith('image/') || mimeType.startsWith('video/'))) {
        console.error(`‚ùå –§–∞–π–ª ${file.name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ –∞—É–¥—ñ–æ, –∞–ª–µ —Ü–µ ${mimeType.split('/')[0]}`);
        return false;
      }
    }
    
    return true;
  };

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é —Ç–∏–ø—É
  const filteredFiles = files.filter(file => {
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É —Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ URL
    const isValidType = validateFileType(file);
    if (!isValidType) {
      console.warn(`‚ö†Ô∏è MediaSelector: –§–∞–π–ª ${file.name} –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø. –ó–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ ${file.type}, –∞–ª–µ URL –≤–∫–∞–∑—É—î –Ω–∞ —ñ–Ω—à–∏–π —Ç–∏–ø`);
      return false;
    }
    
    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º
    if (selectedType !== 'all' && file.type !== selectedType) return false;
    
    // –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏
    if (!allowedTypes.includes(file.type)) return false;
    
    // –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º
    if (searchQuery && !file.name.toLowerCase().includes(searchQuery.toLowerCase())) return false;
    
    return true;
  });

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤
  useEffect(() => {
    if (files.length > 0) {
      console.log(`üîç –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤:`, {
        totalFiles: files.length,
        selectedType,
        allowedTypes,
        searchQuery,
        filteredCount: filteredFiles.length,
        filteredFiles: filteredFiles.map(f => `${f.name} (${f.type})`)
      });
      
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤
      const audioFiles = files.filter(f => f.type === 'audio');
      if (audioFiles.length > 0) {
        console.log(`üéµ –ó–Ω–∞–π–¥–µ–Ω–æ ${audioFiles.length} –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤:`, audioFiles.map(f => ({
          name: f.name,
          hasUrl: !!f.url,
          size: f.size,
          isHeavy: f.size > 2 * 1024 * 1024,
          urlLength: f.url?.length || 0
        })));
        
        // –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        console.log(`üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê: –í—Å—ñ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—ñ:`, audioFiles.map(f => ({
          id: f.id,
          name: f.name,
          type: f.type,
          hasUrl: !!f.url,
          urlLength: f.url?.length || 0,
          size: f.size,
          isHeavy: f.isHeavy,
          passesTypeFilter: selectedType === 'all' || f.type === selectedType,
          passesAllowedTypesFilter: allowedTypes.includes(f.type),
          passesSearchFilter: !searchQuery || f.name.toLowerCase().includes(searchQuery.toLowerCase())
        })));
      }
    }
  }, [files, selectedType, allowedTypes, searchQuery, filteredFiles]);

  const getFileIcon = (type: string) => {
    switch (type) {
      case 'image': return 'üñºÔ∏è';
      case 'audio': return 'üéµ';
      case 'video': return 'üé¨';
      default: return 'üìÅ';
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const handleSelect = async (file: FileItem) => {
    console.log(`üîÑ MediaSelector: –°–ø—Ä–æ–±–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É: ${file.name} (${file.type})`);
    console.log(`üìä MediaSelector: –§–∞–π–ª - ID: ${file.id}, hasUrl: ${!!file.url}, urlLength: ${file.url?.length || 0}, isHeavy: ${file.isHeavy}`);
    
    // –î–ª—è –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑ IndexedDB
    if (file.type === 'video') {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≤–∂–µ –ø–æ–≤–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª
      const isFullVideo = file.url && file.url.startsWith('data:video/') && file.url.length > 100000; // –ë—ñ–ª—å—à–µ 100KB
      
      if (isFullVideo) {
        console.log(`‚úÖ MediaSelector: –§–∞–π–ª –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –ø–æ–≤–Ω–µ –≤—ñ–¥–µ–æ: ${file.name}`);
        onSelect(file);
        onClose();
        return;
      }
      
      // –Ø–∫—â–æ —Ü–µ –ø—Ä–µ–≤—å—é, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ñ–∞–π–ª
      console.log(`üé¨ MediaSelector: –í—ñ–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Ç—Ä–µ–±—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ IndexedDB: ${file.name}`);
      
      setLoadingFileId(file.id); // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      
      try {
        const fullVideoFile = await loadSingleFileFromIndexedDB(file.id);
        if (fullVideoFile && fullVideoFile.url && 
            fullVideoFile.url.startsWith('data:video/') && 
            fullVideoFile.url.length > (file.url?.length || 0)) {
          console.log(`‚úÖ MediaSelector: –ü–æ–≤–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ IndexedDB: ${fullVideoFile.name}`);
          console.log(`üìä –†–æ–∑–º—ñ—Ä –ø—Ä–µ–≤—å—é: ${((file.url?.length || 0) / 1024).toFixed(2)} KB`);
          console.log(`üìä –†–æ–∑–º—ñ—Ä –ø–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É: ${(fullVideoFile.url.length / 1024 / 1024).toFixed(2)} MB`);
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ –ø—Ä–µ–≤—å—é —Ç–∞ –ø–æ–≤–Ω–∏–º —Ñ–∞–π–ª–æ–º
          const videoFileWithFull: FileItem = {
            ...file,
            url: fullVideoFile.url, // –û—Å–Ω–æ–≤–Ω–∏–π URL - –ø–æ–≤–Ω–∏–π —Ñ–∞–π–ª
            fullVideoUrl: fullVideoFile.url // –î–æ–¥–∞—Ç–∫–æ–≤–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
          };
          
          onSelect(videoFileWithFull);
          onClose();
          return;
        } else {
          console.warn(`‚ö†Ô∏è MediaSelector: –ü–æ–≤–Ω–∏–π –≤—ñ–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π:`, {
            hasFullFile: !!fullVideoFile,
            hasUrl: !!fullVideoFile?.url,
            isVideoMime: fullVideoFile?.url?.startsWith('data:video/') || false,
            fullUrlLength: fullVideoFile?.url?.length || 0,
            previewUrlLength: file.url?.length || 0
          });
          
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–µ–≤—å—é —è–∫—â–æ –ø–æ–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
          onSelect(file);
          onClose();
          return;
        }
      } catch (error) {
        console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É –∑ IndexedDB:`, error);
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–µ–≤—å—é —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        onSelect(file);
        onClose();
        return;
      } finally {
        setLoadingFileId(null); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      }
    }
    
    // –Ø–∫—â–æ —Ñ–∞–π–ª –º–∞—î URL, –≤–∏–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –≤—ñ–¥—Ä–∞–∑—É
    if (file.url && file.url.length > 100) {
      console.log(`‚úÖ MediaSelector: –§–∞–π–ª –º–∞—î –ø–æ–≤–Ω–∏–π URL, –≤–∏–±–∏—Ä–∞—î–º–æ: ${file.name}`);
      onSelect(file);
      onClose();
      return;
    }
    
    // –î–ª—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ IndexedDB
    if (file.type === 'audio' && (file.isHeavy || !file.url || file.url.length < 500 * 1024)) {
      console.log(`üîÑ MediaSelector: –ê—É–¥—ñ–æ —Ñ–∞–π–ª –ø–æ—Ç—Ä–µ–±—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ IndexedDB: ${file.name}`);
      
      setLoadingFileId(file.id); // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      
      try {
        const fullFile = await loadSingleFileFromIndexedDB(file.id);
        if (fullFile && fullFile.url && fullFile.url.length > 1000) {
          console.log(`‚úÖ MediaSelector: –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ IndexedDB: ${fullFile.name}`);
          console.log(`üìä –†–æ–∑–º—ñ—Ä URL: ${(fullFile.url.length / 1024).toFixed(2)} KB`);
          onSelect(fullFile);
          onClose();
          return;
        } else {
          console.warn(`‚ö†Ô∏è MediaSelector: –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∞–ª–µ URL –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π:`, {
            hasFile: !!fullFile,
            hasUrl: !!fullFile?.url,
            urlLength: fullFile?.url?.length || 0
          });
        }
      } catch (error) {
        console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ IndexedDB:`, error);
      } finally {
        setLoadingFileId(null); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      }
      
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
      alert(`‚ùå –§–∞–π–ª "${file.name}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Content Manager.`);
      return;
    }
    
    // –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ —Ñ–∞–π–ª—ñ–≤ –±–µ–∑ URL
    console.warn(`‚ùå MediaSelector: –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π:`, {
      name: file.name,
      type: file.type,
      hasUrl: !!file.url,
      urlLength: file.url?.length || 0
    });
    alert(`‚ùå –§–∞–π–ª "${file.name}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Content Manager.`);
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –∑ IndexedDB
  const loadSingleFileFromIndexedDB = async (fileId: string): Promise<FileItem | null> => {
    return new Promise((resolve, reject) => {
      try {
        console.log(`üîÑ MediaSelector: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ IndexedDB: ${fileId}`);
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—è
        const timeout = setTimeout(() => {
          console.warn(`‚è∞ MediaSelector: –¢–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${fileId} (5 —Å–µ–∫—É–Ω–¥)`);
          resolve(null);
        }, 5000);
        
        const request = indexedDB.open('ContentManagerDB', 2); // –û–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–µ—Ä—Å—ñ—ó 2
        
        request.onupgradeneeded = (event) => {
          console.log('üîß MediaSelector: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ IndexedDB –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É');
          const db = (event.target as IDBOpenDBRequest).result;
          
          // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ —Å—Ö–æ–≤–∏—â–µ —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
          if (db.objectStoreNames.contains('files')) {
            db.deleteObjectStore('files');
            console.log('üóëÔ∏è MediaSelector: –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–µ –æ–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ –¥–ª—è —Ñ–∞–π–ª—É');
          }
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
          const store = db.createObjectStore('files', { keyPath: 'id' });
          console.log('‚úÖ MediaSelector: –°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ "files" –¥–ª—è —Ñ–∞–π–ª—É');
        };
        
        request.onsuccess = (event) => {
          clearTimeout(timeout);
          const db = (event.target as IDBOpenDBRequest).result;
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –æ–±'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ
          if (!db.objectStoreNames.contains('files')) {
            console.warn(`‚ö†Ô∏è MediaSelector: –û–±\'—î–∫—Ç-—Å—Ö–æ–≤–∏—â–µ "files" –Ω–µ —ñ—Å–Ω—É—î –¥–ª—è —Ñ–∞–π–ª—É ${fileId}`);
            db.close();
            resolve(null);
            return;
          }
          
          try {
            const transaction = db.transaction(['files'], 'readonly');
            const store = transaction.objectStore('files');
            const getRequest = store.get(fileId);
            
            getRequest.onsuccess = () => {
              const file = getRequest.result;
              if (file && file.url && file.id && file.name) {
                console.log(`üìÇ MediaSelector: –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª –≤ IndexedDB: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
                db.close();
                resolve(file);
              } else if (file) {
                console.warn(`‚ö†Ô∏è MediaSelector: –§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –≤—ñ–Ω –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π: ${fileId}`, file);
                db.close();
                resolve(null);
              } else {
                console.warn(`‚ö†Ô∏è MediaSelector: –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –±–µ–∑ URL –≤ IndexedDB: ${fileId}`);
                db.close();
                resolve(null);
              }
            };
            
            getRequest.onerror = () => {
              console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É ${fileId} –∑ IndexedDB`, getRequest.error);
              db.close();
              resolve(null);
            };
            
            transaction.onerror = () => {
              console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É ${fileId} –∑ IndexedDB`, transaction.error);
              db.close();
              resolve(null);
            };
            
            transaction.onabort = () => {
              console.error(`‚ùå MediaSelector: –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${fileId} –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞`);
              db.close();
              resolve(null);
            };
          } catch (transactionError) {
            console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ñ–∞–π–ª—É ${fileId}:`, transactionError);
            db.close();
            resolve(null);
          }
        };
        
        request.onerror = () => {
          clearTimeout(timeout);
          console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è IndexedDB –¥–ª—è —Ñ–∞–π–ª—É ${fileId}`, request.error);
          resolve(null);
        };
        
        request.onblocked = () => {
          clearTimeout(timeout);
          console.warn(`‚ö†Ô∏è MediaSelector: IndexedDB –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É ${fileId}`);
          resolve(null);
        };
      } catch (error) {
        console.error(`‚ùå MediaSelector: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${fileId} –∑ IndexedDB:`, error);
        resolve(null);
      }
    });
  };

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          className="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden"
          onClick={(e) => e.stopPropagation()}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="bg-gradient-to-r from-blue-500 to-purple-500 p-6 text-white">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold">{title}</h2>
                <p className="text-blue-100 mt-1">{description}</p>
              </div>
              <button
                onClick={onClose}
                className="w-10 h-10 bg-white/20 hover:bg-white/30 rounded-xl flex items-center justify-center transition-colors"
              >
                <span className="text-xl">‚úï</span>
              </button>
            </div>
          </div>

          {/* –§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø–æ—à—É–∫ */}
          <div className="p-6 border-b border-slate-200">
            <div className="flex flex-col sm:flex-row gap-4">
              {/* –ü–æ—à—É–∫ */}
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="–ü–æ—à—É–∫ —Ñ–∞–π–ª—ñ–≤..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-3 bg-slate-50 border border-slate-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                />
              </div>

              {/* –§—ñ–ª—å—Ç—Ä–∏ –∑–∞ —Ç–∏–ø–æ–º */}
              <div className="flex gap-2">
                {['all', ...allowedTypes].map((type) => (
                  <button
                    key={type}
                    onClick={() => setSelectedType(type as any)}
                    className={`px-4 py-3 rounded-xl font-medium transition-all duration-200 whitespace-nowrap ${
                      selectedType === type
                        ? 'bg-blue-500 text-white shadow-md'
                        : 'bg-slate-100 text-slate-600 hover:bg-slate-200'
                    }`}
                  >
                    {type === 'all' ? 'üóÇÔ∏è –í—Å—ñ' : 
                     type === 'image' ? 'üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è' :
                     type === 'audio' ? 'üéµ –ê—É–¥—ñ–æ' : 'üé¨ –í—ñ–¥–µ–æ'}
                  </button>
                ))}
                
                {/* –ö–Ω–æ–ø–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ */}
                <button
                  onClick={async () => {
                    console.log('üîß –†—É—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...');
                    setIsLoading(true);
                    try {
                      const correctedFiles = await fixIncorrectFileTypes(files);
                      setFiles(correctedFiles);
                      console.log('‚úÖ –†—É—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                    } catch (error) {
                      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:', error);
                    } finally {
                      setIsLoading(false);
                    }
                  }}
                  className="px-4 py-3 bg-orange-500 text-white rounded-xl hover:bg-orange-600 transition-all duration-200 whitespace-nowrap font-medium shadow-md hover:shadow-lg"
                  title="–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏"
                >
                  üîß –í–∏–ø—Ä–∞–≤–∏—Ç–∏
                </button>
              </div>
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="flex flex-wrap gap-4 mt-4 text-sm">
              <span className="text-slate-600">–ó–Ω–∞–π–¥–µ–Ω–æ: <span className="font-medium text-slate-800">{filteredFiles.length}</span></span>
              <span className="text-slate-400">‚Ä¢</span>
              <span className="text-slate-600">–í—Å—å–æ–≥–æ: <span className="font-medium text-slate-800">{files.length}</span></span>
              
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ */}
              {(() => {
                const problematicFiles = files.filter(file => {
                  if (!file.url || !file.url.startsWith('data:')) return false;
                  const mimeType = file.url.split(';')[0].replace('data:', '');
                  const isVideoExtension = file.originalName && /\.(mp4|mov|avi|webm|mkv|wmv|flv|m4v)$/i.test(file.originalName);
                  
                  // –§–∞–π–ª–∏ –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ç–∏–ø–æ–º
                  if (file.type === 'video' && mimeType.startsWith('image/') && !isVideoExtension) return true;
                  if (file.type === 'image' && mimeType.startsWith('video/')) return true;
                  if (file.type === 'audio' && (mimeType.startsWith('image/') || mimeType.startsWith('video/'))) return true;
                  
                  // SVG placeholder –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ
                  if (file.type === 'video' && file.url.includes('data:image/svg+xml') && file.url.includes('üé¨')) return true;
                  
                  return false;
                });
                
                if (problematicFiles.length > 0) {
                  return (
                    <>
                      <span className="text-slate-400">‚Ä¢</span>
                      <span className="text-orange-600">
                        ‚ö†Ô∏è {problematicFiles.length} –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                      </span>
                    </>
                  );
                }
                return null;
              })()}
              
              {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö —Ñ–∞–π–ª—ñ–≤ */}
              {files.length > 0 && (
                <>
                  <span className="text-slate-400">‚Ä¢</span>
                  {allowedTypes.map(type => {
                    const count = files.filter(f => f.type === type).length;
                    if (count === 0) return null;
                    return (
                      <span key={type} className="text-slate-600">
                        {type === 'image' ? 'üñºÔ∏è' : type === 'audio' ? 'üéµ' : 'üé¨'} {count}
                      </span>
                    );
                  })}
                </>
              )}
              
              {/* –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—ñ–≤ */}
              {allowedTypes.includes('audio') && files.filter(f => f.type === 'audio').length > 0 && (
                <>
                  <span className="text-slate-400">‚Ä¢</span>
                  <span className="text-blue-600">
                    üíæ {files.filter(f => f.type === 'audio' && !f.url && f.size > 2 * 1024 * 1024).length} –≤ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
                  </span>
                </>
              )}
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ */}
          <div className="p-6 overflow-y-auto max-h-96">
            {isLoading ? (
              <div className="text-center py-12">
                <div className="text-4xl mb-4">‚è≥</div>
                <div className="text-lg font-medium text-slate-600">
                  –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...
                </div>
                <div className="text-sm text-slate-500 mt-2">
                  –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
                </div>
              </div>
            ) : filteredFiles.length === 0 ? (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">üì≠</div>
                <div className="text-xl font-medium text-slate-600 mb-2">
                  {files.length === 0 ? '–ú–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ—Ä–æ–∂–Ω—è' : '–§–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}
                </div>
                <div className="text-slate-500 mb-4">
                  {files.length === 0 
                    ? '–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª–∏ —á–µ—Ä–µ–∑ Smart Content Manager' 
                    : '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏ –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç'
                  }
                </div>
                {files.length === 0 && (
                  <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 max-w-md mx-auto">
                    <div className="text-sm text-blue-700">
                      <div className="font-medium mb-2">üìö –Ø–∫ –¥–æ–¥–∞—Ç–∏ —Ñ–∞–π–ª–∏:</div>
                      <ol className="text-left space-y-1">
                        <li>1. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ Smart Content Manager</li>
                        <li>2. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∞—É–¥—ñ–æ —Ñ–∞–π–ª–∏</li>
                        <li>3. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —Å—é–¥–∏ —Ç–∞ –æ–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª</li>
                      </ol>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredFiles.map((file) => (
                  <motion.div
                    key={file.id}
                    layout
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className={`bg-slate-50 rounded-xl p-4 border border-slate-200 hover:border-blue-300 hover:shadow-md transition-all duration-200 cursor-pointer group ${
                      file.type === 'audio' && !file.url ? 'opacity-50' : ''
                    } ${loadingFileId === file.id ? 'pointer-events-none' : ''}`}
                    onClick={() => handleSelect(file)}
                  >
                    {/* –ü—Ä–µ–≤—å—é —Ñ–∞–π–ª—É */}
                    <div className="aspect-square bg-white rounded-lg mb-3 overflow-hidden relative">
                      {file.type === 'image' ? (
                        <img
                          src={file.url}
                          alt={file.name}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <span className="text-4xl">{getFileIcon(file.type)}</span>
                          {file.type === 'audio' && !file.url && file.size > 2 * 1024 * 1024 && loadingFileId !== file.id && (
                            <div className="absolute top-2 right-2 bg-blue-500 text-white text-xs px-2 py-1 rounded">
                              –†–æ–∑—à–∏—Ä–µ–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                            </div>
                          )}
                          {loadingFileId === file.id && (
                            <div className="absolute inset-0 bg-blue-500/20 flex items-center justify-center">
                              <div className="bg-white/90 px-3 py-2 rounded-lg font-medium text-blue-600">
                                ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                      
                      {/* –û–≤–µ—Ä–ª–µ–π –ø—Ä–∏ —Ö–æ–≤–µ—Ä—ñ */}
                      {loadingFileId !== file.id && (
                        <div className="absolute inset-0 bg-blue-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center">
                          <div className="bg-white/90 px-3 py-2 rounded-lg font-medium text-blue-600">
                            {file.type === 'audio' && !file.url && file.size > 2 * 1024 * 1024 ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏' : '–í–∏–±—Ä–∞—Ç–∏'}
                          </div>
                        </div>
                      )}
                    </div>

                    {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª */}
                    <div className="space-y-2">
                      <div className="font-medium text-slate-800 truncate" title={file.name}>
                        {file.name}
                      </div>
                      <div className="text-sm text-slate-500 space-y-1">
                        <div className="flex items-center gap-2">
                          <span>{getFileIcon(file.type)}</span>
                          <span className="capitalize">{file.type}</span>
                          {file.optimized && <span className="text-green-500" title="–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ">‚ú®</span>}
                          {file.type === 'audio' && !file.url && file.size > 2 * 1024 * 1024 && (
                            <span className="text-blue-500" title="–ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ">üíæ</span>
                          )}
                        </div>
                        <div className="flex justify-between">
                          <span>{formatFileSize(file.size)}</span>
                          <span>{new Date(file.uploadDate).toLocaleDateString()}</span>
                        </div>
                        {file.type === 'audio' && !file.url && file.size > 2 * 1024 * 1024 && (
                          <div className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                            –†–æ–∑—à–∏—Ä–µ–Ω–µ —Å—Ö–æ–≤–∏—â–µ
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}
              </div>
            )}
          </div>

          {/* –§—É—Ç–µ—Ä */}
          <div className="p-6 border-t border-slate-200 bg-slate-50">
            <div className="flex justify-between items-center">
              <div className="text-sm text-slate-600">
                –§–∞–π–ª–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –≤–∞—à—ñ–π –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ
              </div>
              <button
                onClick={onClose}
                className="px-6 py-3 bg-slate-200 text-slate-700 rounded-xl hover:bg-slate-300 transition-colors font-medium"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
            </div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
};

export default MediaSelector; 