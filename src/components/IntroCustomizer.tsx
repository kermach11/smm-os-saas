import React, { useState, useRef, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import IntroScreenPreview from './IntroScreenPreview';
import indexedDBService from '../services/IndexedDBService';
import syncService from '../services/SyncService';
import SyncButton from './SyncButton';
import MediaSelector from './MediaSelector';

// –¢–∏–ø–∏ –¥–ª—è MediaSelector
interface FileItem {
  id: string;
  name: string;
  url: string;
  type: 'image' | 'audio' | 'video';
  size: number;
  uploadDate: string;
}

interface IntroSettings {
  // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  title: string;
  subtitle: string;
  description: string;
  buttonText: string;
  buttonUrl: string;
  logoUrl: string;
  
  // –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞
  titleFontSize: number;
  subtitleFontSize: number;
  descriptionFontSize: number;
  titleFontFamily: string;
  subtitleFontFamily: string;
  descriptionFontFamily: string;
  titleFontWeight: number;
  subtitleFontWeight: number;
  descriptionFontWeight: number;
  titleFontStyle: string;
  subtitleFontStyle: string;
  descriptionFontStyle: string;
  
  // –ê–Ω—ñ–º–∞—Ü—ñ—ó
  titleAnimation: 'none' | 'fadeIn' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomIn' | 'zoomOut' | 'rotateIn' | 'bounce' | 'typewriter' | 'glow';
  subtitleAnimation: 'none' | 'fadeIn' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomIn' | 'zoomOut' | 'rotateIn' | 'bounce' | 'typewriter' | 'glow';
  descriptionAnimation: 'none' | 'fadeIn' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomIn' | 'zoomOut' | 'rotateIn' | 'bounce' | 'typewriter' | 'glow';
  titleExitAnimation: 'none' | 'fadeOut' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomOut' | 'zoomIn' | 'rotateOut' | 'dissolve';
  subtitleExitAnimation: 'none' | 'fadeOut' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomOut' | 'zoomIn' | 'rotateOut' | 'dissolve';
  descriptionExitAnimation: 'none' | 'fadeOut' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'zoomOut' | 'zoomIn' | 'rotateOut' | 'dissolve';
  
  // –¢—ñ–Ω—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏
  title3DDepth: number;
  subtitle3DDepth: number;
  description3DDepth: number;
  titleShadowIntensity: number;
  subtitleShadowIntensity: number;
  descriptionShadowIntensity: number;
  titleShadowColor: string;
  subtitleShadowColor: string;
  descriptionShadowColor: string;
  animationDuration: number;
  animationDelay: number;
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  mobile: {
    titleFontSize: number;
    subtitleFontSize: number;
    descriptionFontSize: number;
    titleMarginBottom: number;
    subtitleMarginBottom: number;
    descriptionMarginBottom: number;
    titleLineHeight: number;
    subtitleLineHeight: number;
    descriptionLineHeight: number;
    titleLetterSpacing: number;
    subtitleLetterSpacing: number;
    descriptionLetterSpacing: number;
    containerPadding: number;
    containerMarginTop: number;
    containerMarginBottom: number;
  };
  
  tablet: {
    titleFontSize: number;
    subtitleFontSize: number;
    descriptionFontSize: number;
    titleMarginBottom: number;
    subtitleMarginBottom: number;
    descriptionMarginBottom: number;
    titleLineHeight: number;
    subtitleLineHeight: number;
    descriptionLineHeight: number;
    titleLetterSpacing: number;
    subtitleLetterSpacing: number;
    descriptionLetterSpacing: number;
    containerPadding: number;
    containerMarginTop: number;
    containerMarginBottom: number;
  };
  
  desktop: {
    titleFontSize: number;
    subtitleFontSize: number;
    descriptionFontSize: number;
    titleMarginBottom: number;
    subtitleMarginBottom: number;
    descriptionMarginBottom: number;
    titleLineHeight: number;
    subtitleLineHeight: number;
    descriptionLineHeight: number;
    titleLetterSpacing: number;
    subtitleLetterSpacing: number;
    descriptionLetterSpacing: number;
    containerPadding: number;
    containerMarginTop: number;
    containerMarginBottom: number;
  };
  
  // –î–∏–∑–∞–π–Ω
  device: 'mobile' | 'tablet' | 'desktop';
  brandColor: string;
  accentColor: string;
  textColor: string;
  backgroundType: 'color' | 'gradient' | 'image' | 'video';
  backgroundColor: string;
  gradientFrom: string;
  gradientTo: string;
  backgroundImage: string;
  backgroundVideo: string;
  
  // –ó–≤—É–∫
  hasMusic: boolean;
  musicUrl: string;
  audioSettings: {
    backgroundMusic: {
      enabled: boolean;
      url: string;
      volume: number;
      loop: boolean;
      autoPlay: boolean;
    };
    hoverSounds: {
      enabled: boolean;
      url: string;
      volume: number;
    };
    clickSounds: {
      enabled: boolean;
      url: string;
      volume: number;
    };
  };
  
  // –ï—Ñ–µ–∫—Ç–∏
  showParticles: boolean;
  particleColor: string;
  animationSpeed: 'slow' | 'normal' | 'fast';
  autoPlay: boolean;
}

const defaultSettings: IntroSettings = {
  // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
  title: "–£—Å–µ —â–æ —Ç—Ä–µ–±–∞",
  subtitle: "–¥–ª—è —Ç–≤–æ–≥–æ SMM",
  description: "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ",
  buttonText: "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É",
  buttonUrl: "#start",
  logoUrl: "",
  
  // –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞
  titleFontSize: 48,
  subtitleFontSize: 36,
  descriptionFontSize: 20,
  titleFontFamily: 'Inter',
  subtitleFontFamily: 'Inter',
  descriptionFontFamily: 'Inter',
  titleFontWeight: 700,
  subtitleFontWeight: 600,
  descriptionFontWeight: 400,
  titleFontStyle: 'normal',
  subtitleFontStyle: 'normal',
  descriptionFontStyle: 'normal',
  
  // –ê–Ω—ñ–º–∞—Ü—ñ—ó
  titleAnimation: 'fadeIn',
  subtitleAnimation: 'slideUp',
  descriptionAnimation: 'fadeIn',
  titleExitAnimation: 'fadeOut',
  subtitleExitAnimation: 'slideDown',
  descriptionExitAnimation: 'fadeOut',
  
  // –¢—ñ–Ω—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏
  title3DDepth: 0,
  subtitle3DDepth: 0,
  description3DDepth: 0,
  titleShadowIntensity: 0.3,
  subtitleShadowIntensity: 0.2,
  descriptionShadowIntensity: 0.1,
  titleShadowColor: '#000000',
  subtitleShadowColor: '#000000',
  descriptionShadowColor: '#000000',
  animationDuration: 800,
  animationDelay: 200,
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  mobile: {
    titleFontSize: 36,
    subtitleFontSize: 24,
    descriptionFontSize: 16,
    titleMarginBottom: 16,
    subtitleMarginBottom: 12,
    descriptionMarginBottom: 8,
    titleLineHeight: 1.5,
    subtitleLineHeight: 1.5,
    descriptionLineHeight: 1.5,
    titleLetterSpacing: 0.5,
    subtitleLetterSpacing: 0.5,
    descriptionLetterSpacing: 0.5,
    containerPadding: 24,
    containerMarginTop: 24,
    containerMarginBottom: 24
  },
  
  tablet: {
    titleFontSize: 48,
    subtitleFontSize: 36,
    descriptionFontSize: 20,
    titleMarginBottom: 16,
    subtitleMarginBottom: 12,
    descriptionMarginBottom: 8,
    titleLineHeight: 1.5,
    subtitleLineHeight: 1.5,
    descriptionLineHeight: 1.5,
    titleLetterSpacing: 0.5,
    subtitleLetterSpacing: 0.5,
    descriptionLetterSpacing: 0.5,
    containerPadding: 24,
    containerMarginTop: 24,
    containerMarginBottom: 24
  },
  
  desktop: {
    titleFontSize: 60,
    subtitleFontSize: 48,
    descriptionFontSize: 24,
    titleMarginBottom: 16,
    subtitleMarginBottom: 12,
    descriptionMarginBottom: 8,
    titleLineHeight: 1.5,
    subtitleLineHeight: 1.5,
    descriptionLineHeight: 1.5,
    titleLetterSpacing: 0.5,
    subtitleLetterSpacing: 0.5,
    descriptionLetterSpacing: 0.5,
    containerPadding: 24,
    containerMarginTop: 24,
    containerMarginBottom: 24
  },
  
  // –î–∏–∑–∞–π–Ω
  device: 'desktop',
  brandColor: "#4a4b57",
  accentColor: "#3b82f6",
  textColor: "#ffffff",
  backgroundType: 'gradient',
  backgroundColor: "#1a1a1a",
  gradientFrom: "#f9fafb",
  gradientTo: "#f7f8fa",
  backgroundImage: "",
  backgroundVideo: "",
  
  // –ó–≤—É–∫
  hasMusic: false,
  musicUrl: "",
  audioSettings: {
    backgroundMusic: {
      enabled: false,
      url: "",
      volume: 0.5,
      loop: true,
      autoPlay: false
    },
    hoverSounds: {
      enabled: false,
      url: "",
      volume: 0.5
    },
    clickSounds: {
      enabled: false,
      url: "",
      volume: 0.5
    }
  },
  
  // –ï—Ñ–µ–∫—Ç–∏
  showParticles: false,
  particleColor: "#ffffff",
  animationSpeed: 'normal',
  autoPlay: true
};

type DeviceType = 'mobile' | 'tablet' | 'desktop';
type TabId = 'header' | 'design' | 'background' | 'audio';

const IntroCustomizer: React.FC = () => {
  const [settings, setSettings] = useState<IntroSettings>(defaultSettings);
  const [activeTab, setActiveTab] = useState<TabId>('header');
  const [deviceType, setDeviceType] = useState<DeviceType>('desktop');
  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'synced' | 'error'>('idle');
  const [activeTypographyElement, setActiveTypographyElement] = useState<'title' | 'subtitle' | 'description'>('title');
  
  // Refs removed - using MediaSelector instead

  // Smart Content Manager —Å—Ç–∞–Ω
  const [isMediaSelectorOpen, setIsMediaSelectorOpen] = useState(false);
  const [mediaSelectorType, setMediaSelectorType] = useState<'backgroundImage' | 'backgroundVideo' | 'logo' | 'backgroundMusic' | 'hoverSound' | 'clickSound'>('backgroundImage');

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  useEffect(() => {
    const loadSettings = async () => {
      try {
        console.log('üîÑ IntroCustomizer: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —á–µ—Ä–µ–∑ IndexedDBService...');
        
        // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ IndexedDB
        let savedSettings = await indexedDBService.loadSettings('introSettings');
        
        if (!savedSettings) {
          // –Ø–∫—â–æ IndexedDB –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–±—É—î–º–æ localStorage —è–∫ —Ä–µ–∑–µ—Ä–≤
          console.log('‚ÑπÔ∏è IntroCustomizer: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ IndexedDB, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage...');
          const localSettings = localStorage.getItem('introSettings');
          if (localSettings) {
            savedSettings = JSON.parse(localSettings);
            console.log('‚úÖ IntroCustomizer: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage');
            
            // –ú—ñ–≥—Ä—É—î–º–æ –≤ IndexedDB
            await indexedDBService.saveSettings('introSettings', savedSettings, 'project');
            console.log('‚úÖ IntroCustomizer: –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          }
        } else {
          console.log('‚úÖ IntroCustomizer: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ IndexedDB');
        }
        
        if (savedSettings) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –¥–∞–Ω—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è IntroSettings
          const typedSettings = savedSettings as IntroSettings;
          setSettings(typedSettings);
        }
      } catch (error) {
        console.error('‚ùå IntroCustomizer: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', error);
      }
    };

    loadSettings();
  }, []);

  const updateSettings = useCallback(async (updates: Partial<IntroSettings>) => {
    setSyncStatus('syncing');
    
    const newSettings = { ...settings, ...updates };
    setSettings(newSettings);
    
    try {
      console.log('üîÑ IntroCustomizer: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...', Object.keys(updates));
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ IndexedDB
      await indexedDBService.saveSettings('introSettings', newSettings, 'project');
      console.log('‚úÖ IntroCustomizer: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ IndexedDB');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      const syncEvent = new CustomEvent('introSettingsUpdated', { detail: newSettings });
      window.dispatchEvent(syncEvent);
      
      setSyncStatus('synced');
      setTimeout(() => setSyncStatus('idle'), 800);
      
    } catch (error) {
      console.error('‚ùå IntroCustomizer: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      setSyncStatus('error');
      setTimeout(() => setSyncStatus('idle'), 2000);
    }
  }, [settings]);

  const handleFileUpload = useCallback(async (file: File, type: 'logo' | 'backgroundImage' | 'backgroundVideo' | 'music' | 'backgroundMusic' | 'hoverSound' | 'clickSound') => {
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª –≤ Base64
    const base64Url = await new Promise<string>((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target?.result as string);
      reader.readAsDataURL(file);
    });
    
    switch (type) {
      case 'logo':
        updateSettings({ logoUrl: base64Url });
        break;
      case 'backgroundImage':
        updateSettings({ backgroundImage: base64Url, backgroundType: 'image' });
        break;
      case 'backgroundVideo':
        updateSettings({ backgroundVideo: base64Url, backgroundType: 'video' });
        break;
      case 'music':
        updateSettings({ musicUrl: base64Url, hasMusic: true });
        break;
      case 'backgroundMusic':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            backgroundMusic: { 
              ...settings.audioSettings.backgroundMusic, 
              url: base64Url, 
              enabled: true 
            } 
          } 
        });
        break;
      case 'hoverSound':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            hoverSounds: { 
              ...settings.audioSettings.hoverSounds, 
              url: base64Url, 
              enabled: true 
            } 
          } 
        });
        break;
      case 'clickSound':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            clickSounds: { 
              ...settings.audioSettings.clickSounds, 
              url: base64Url, 
              enabled: true 
            } 
          } 
        });
        break;
    }
  }, [updateSettings, settings.audioSettings]);

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ MediaSelector (Smart Content Manager)
  const openMediaSelector = (type: typeof mediaSelectorType, allowedTypes?: ('image' | 'audio' | 'video')[]) => {
    setMediaSelectorType(type);
    setIsMediaSelectorOpen(true);
  };

  const handleMediaSelect = (file: FileItem) => {
    console.log('üîÑ IntroCustomizer: –í–∏–±—Ä–∞–Ω–æ —Ñ–∞–π–ª –∑ Smart Content Manager:', file.name, file.type);
    
    switch (mediaSelectorType) {
      case 'logo':
        updateSettings({ logoUrl: file.url });
        break;
      case 'backgroundImage':
        updateSettings({ backgroundImage: file.url, backgroundType: 'image' });
        break;
      case 'backgroundVideo':
        updateSettings({ backgroundVideo: file.url, backgroundType: 'video' });
        break;
      case 'backgroundMusic':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            backgroundMusic: { 
              ...settings.audioSettings.backgroundMusic, 
              url: file.url, 
              enabled: true 
            } 
          } 
        });
        break;
      case 'hoverSound':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            hoverSounds: { 
              ...settings.audioSettings.hoverSounds, 
              url: file.url, 
              enabled: true 
            } 
          } 
        });
        break;
      case 'clickSound':
        updateSettings({ 
          audioSettings: { 
            ...settings.audioSettings, 
            clickSounds: { 
              ...settings.audioSettings.clickSounds, 
              url: file.url, 
              enabled: true 
            } 
          } 
        });
        break;
    }
    
    setIsMediaSelectorOpen(false);
    console.log('‚úÖ IntroCustomizer: –§–∞–π–ª –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Smart Content Manager');
  };

  const getDeviceClasses = () => {
    switch (deviceType) {
      case 'mobile':
        return 'w-[375px] h-[667px]';
      case 'tablet':
        return 'w-[768px] h-[1024px]';
      default:
        return 'w-full h-full';
    }
  };

  const getBackgroundStyle = () => {
    switch (settings.backgroundType) {
      case 'color':
        return { backgroundColor: settings.backgroundColor };
      case 'gradient':
        return { 
          background: `linear-gradient(135deg, ${settings.gradientFrom} 0%, ${settings.gradientTo} 100%)` 
        };
      case 'image':
        return settings.backgroundImage ? {
          backgroundImage: `url(${settings.backgroundImage})`,
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        } : { backgroundColor: settings.backgroundColor };
      case 'video':
        return { backgroundColor: settings.backgroundColor };
      default:
        return { backgroundColor: settings.backgroundColor };
    }
  };

  const saveSettings = () => {
    localStorage.setItem('introSettings', JSON.stringify(settings));
    
    // –¢–∞–∫–æ–∂ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    const legacyData = {
      introSettings: {
        titleTop: settings.title,
        titleMiddle: settings.subtitle,
        description: settings.description,
        buttonText: settings.buttonText
      }
    };
    localStorage.setItem('immersiveExperienceData', JSON.stringify(legacyData));
    
    // Dispatch event to update main screen
    window.dispatchEvent(new CustomEvent('introSettingsUpdated', { detail: settings }));
    alert('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
  };

  const exportSettings = () => {
    const dataStr = JSON.stringify(settings, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'intro-settings.json';
    link.click();
  };

  const importSettings = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const imported = JSON.parse(e.target?.result as string);
          setSettings(imported);
        } catch (error) {
          alert('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ–∞–π–ª—É');
        }
      };
      reader.readAsText(file);
    }
  };

  const getTypographyValue = (property: 'fontFamily' | 'fontWeight' | 'fontStyle') => {
    switch (activeTypographyElement) {
      case 'title':
        return property === 'fontFamily' ? settings.titleFontFamily :
               property === 'fontWeight' ? settings.titleFontWeight :
               settings.titleFontStyle;
      case 'subtitle':
        return property === 'fontFamily' ? settings.subtitleFontFamily :
               property === 'fontWeight' ? settings.subtitleFontWeight :
               settings.subtitleFontStyle;
      case 'description':
        return property === 'fontFamily' ? settings.descriptionFontFamily :
               property === 'fontWeight' ? settings.descriptionFontWeight :
               settings.descriptionFontStyle;
    }
  };

  const updateTypographyValue = (property: 'fontFamily' | 'fontWeight' | 'fontStyle', value: string | number) => {
    switch (activeTypographyElement) {
      case 'title':
        if (property === 'fontFamily') updateSettings({ titleFontFamily: value as string });
        else if (property === 'fontWeight') updateSettings({ titleFontWeight: value as number });
        else updateSettings({ titleFontStyle: value as string });
        break;
      case 'subtitle':
        if (property === 'fontFamily') updateSettings({ subtitleFontFamily: value as string });
        else if (property === 'fontWeight') updateSettings({ subtitleFontWeight: value as number });
        else updateSettings({ subtitleFontStyle: value as string });
        break;
      case 'description':
        if (property === 'fontFamily') updateSettings({ descriptionFontFamily: value as string });
        else if (property === 'fontWeight') updateSettings({ descriptionFontWeight: value as number });
        else updateSettings({ descriptionFontStyle: value as string });
        break;
    }
  };

  return (
    <>
      <div className="flex h-full bg-gradient-to-br from-slate-50 to-slate-100">
        {/* Modern Sidebar with controls */}
        <div className="w-96 bg-white/80 backdrop-blur-xl border-r border-slate-200/60 flex flex-col shadow-xl">
          {/* Modern Header */}
          <div className="p-8 border-b border-slate-200/60 bg-gradient-to-r from-blue-600 to-purple-600">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-2xl font-bold text-white mb-2">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ü–Ω—Ç—Ä–æ</h2>
                <p className="text-blue-100 text-sm">–°—Ç–≤–æ—Ä—ñ—Ç—å –∑–∞—Ö–æ–ø–ª—é—é—á—É –≤—Å—Ç—É–ø–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É</p>
              </div>
              <div className="flex items-center gap-3">
                {syncStatus === 'syncing' && (
                  <div className="flex items-center gap-2 text-white/90">
                    <div className="w-4 h-4 border-2 border-white/60 border-t-white rounded-full animate-spin"></div>
                    <span className="text-sm">–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è...</span>
                  </div>
                )}
                {syncStatus === 'synced' && (
                  <div className="flex items-center gap-2 text-green-100">
                    <div className="w-4 h-4 bg-green-400 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs">‚úì</span>
                    </div>
                    <span className="text-sm">–ó–±–µ—Ä–µ–∂–µ–Ω–æ</span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Modern Tabs */}
          <div className="flex bg-slate-50/80 border-b border-slate-200/60">
            {[
              { id: 'header', label: '–ö–æ–Ω—Ç–µ–Ω—Ç', icon: '‚úçÔ∏è', color: 'blue' },
              { id: 'design', label: '–°—Ç–∏–ª—å', icon: 'üé®', color: 'purple' },
              { id: 'background', label: '–§–æ–Ω', icon: 'üåÖ', color: 'indigo' },
              { id: 'audio', label: '–ó–≤—É–∫', icon: 'üéµ', color: 'green' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as TabId)}
                className={`flex-1 px-3 py-4 text-sm font-medium transition-all duration-300 relative group ${
                  activeTab === tab.id
                    ? `text-${tab.color}-600 bg-white shadow-sm`
                    : 'text-slate-500 hover:text-slate-700 hover:bg-white/50'
                }`}
              >
                <div className="flex flex-col items-center gap-2">
                  <span className="text-lg">{tab.icon}</span>
                  <span className="text-xs font-semibold">{tab.label}</span>
                </div>
                {activeTab === tab.id && (
                  <div className={`absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-${tab.color}-400 to-${tab.color}-600`}></div>
                )}
              </button>
            ))}
          </div>

          {/* Modern Tab Content */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6">
            {activeTab === 'header' && (
              <div className="space-y-6">
                {/* 1. –õ–æ–≥–æ—Ç–∏–ø - –ü–ï–†–®–ò–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-amber-50 to-orange-50 rounded-2xl p-6 border border-amber-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üñºÔ∏è</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–õ–æ–≥–æ—Ç–∏–ø</h3>
                      <p className="text-sm text-slate-600">–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤–∞—à –ª–æ–≥–æ—Ç–∏–ø</p>
                    </div>
                  </div>
                  
                  <div className="flex gap-3">
                    <button
                      onClick={() => openMediaSelector('logo', ['image'])}
                      className="flex-1 px-4 py-3 bg-gradient-to-r from-amber-500 to-orange-500 text-white rounded-xl hover:from-amber-600 hover:to-orange-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl"
                    >
                      üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                    </button>
                    {settings.logoUrl && (
                      <button
                        onClick={() => updateSettings({ logoUrl: '' })}
                        className="px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-200 border border-red-200 hover:border-red-300"
                      >
                        ‚úï
                      </button>
                    )}
                  </div>
                  {settings.logoUrl && (
                    <div className="mt-4 p-3 bg-white/60 rounded-xl border border-amber-100">
                      <div className="flex items-center gap-3">
                        <img src={settings.logoUrl} alt="–õ–æ–≥–æ—Ç–∏–ø" className="w-12 h-12 object-contain rounded-lg border border-amber-200" />
                        <div>
                          <p className="text-sm font-medium text-slate-700">–õ–æ–≥–æ—Ç–∏–ø –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</p>
                          <p className="text-xs text-slate-500">–í—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏</p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* 2. –¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç - –î–†–£–ì–ò–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üìù</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</h3>
                      <p className="text-sm text-slate-600">–û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏</p>
                    </div>
                  </div>
                  
                  <div className="space-y-5">
                    <div className="group">
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                        –ó–∞–≥–æ–ª–æ–≤–æ–∫
                      </label>
                      <input
                        type="text"
                        value={settings.title}
                        onChange={(e) => updateSettings({ title: e.target.value })}
                        className="w-full px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-slate-800 placeholder-slate-400"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫..."
                      />
                    </div>

                    <div className="group">
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                        –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                      </label>
                      <input
                        type="text"
                        value={settings.subtitle}
                        onChange={(e) => updateSettings({ subtitle: e.target.value })}
                        className="w-full px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200 text-slate-800 placeholder-slate-400"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫..."
                      />
                    </div>

                    <div className="group">
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                        –û–ø–∏—Å
                      </label>
                      <textarea
                        value={settings.description}
                        onChange={(e) => updateSettings({ description: e.target.value })}
                        rows={3}
                        className="w-full px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all duration-200 text-slate-800 placeholder-slate-400 resize-none"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å..."
                      />
                    </div>

                    <div className="group">
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                        –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                      </label>
                      <input
                        type="text"
                        value={settings.buttonText}
                        onChange={(e) => updateSettings({ buttonText: e.target.value })}
                        className="w-full px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 text-slate-800 placeholder-slate-400"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏..."
                      />
                    </div>

                    <div className="group">
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                        –ü–æ—Å–∏–ª–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
                      </label>
                      <input
                        type="text"
                        value={settings.buttonUrl}
                        onChange={(e) => updateSettings({ buttonUrl: e.target.value })}
                        className="w-full px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 text-slate-800 placeholder-slate-400"
                        placeholder="–í–≤–µ–¥—ñ—Ç—å URL..."
                      />
                    </div>
                  </div>
                </div>

                {/* 3. –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ - –¢–†–ï–¢–Ü–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-6 border border-purple-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üî§</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞</h3>
                      <p className="text-sm text-slate-600">–°—Ç–∏–ª—å —Ç–∞ –≤–∏–≥–ª—è–¥ —à—Ä–∏—Ñ—Ç—ñ–≤</p>
                    </div>
                  </div>

                  {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
                  <div className="mb-6">
                    <label className="block text-sm font-semibold text-slate-700 mb-4">–û–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { type: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üî§', color: 'blue' },
                        { type: 'subtitle', label: '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üìù', color: 'purple' },
                        { type: 'description', label: '–û–ø–∏—Å', icon: 'üìÑ', color: 'green' }
                      ].map((element) => (
                        <button
                          key={element.type}
                          onClick={() => setActiveTypographyElement(element.type as 'title' | 'subtitle' | 'description')}
                          className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                            activeTypographyElement === element.type
                              ? `border-${element.color}-500 bg-${element.color}-100 text-${element.color}-700 shadow-lg scale-105`
                              : 'border-slate-200 hover:border-slate-300 bg-white/60'
                          }`}
                        >
                          <div className="text-2xl mb-2">{element.icon}</div>
                          <div className="text-xs font-semibold">{element.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* –°–ø—ñ–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ */}
                  <div className="bg-white/60 rounded-xl p-5 border border-purple-100">
                    <div className="flex items-center gap-3 mb-5">
                      <div className={`w-4 h-4 rounded-full ${
                        activeTypographyElement === 'title' ? 'bg-blue-500' :
                        activeTypographyElement === 'subtitle' ? 'bg-purple-500' : 'bg-green-500'
                      }`}></div>
                      <h4 className="font-semibold text-slate-800">
                        –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è: {
                          activeTypographyElement === 'title' ? '–ó–∞–≥–æ–ª–æ–≤–∫–∞' :
                          activeTypographyElement === 'subtitle' ? '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞' : '–û–ø–∏—Å—É'
                        }
                      </h4>
                    </div>
                    
                    <div className="space-y-5">
                      {/* –°—ñ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç—ñ–≤ */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-3">–°—ñ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç—ñ–≤</label>
                        <select
                          value={getTypographyValue('fontFamily') as string}
                          onChange={(e) => updateTypographyValue('fontFamily', e.target.value)}
                          className="w-full px-4 py-3 bg-white border border-slate-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent text-sm transition-all duration-200"
                        >
                          <option value="Inter">Inter</option>
                          <option value="Arial">Arial</option>
                          <option value="Helvetica">Helvetica</option>
                          <option value="Times New Roman">Times New Roman</option>
                          <option value="Georgia">Georgia</option>
                          <option value="Roboto">Roboto</option>
                          <option value="Open Sans">Open Sans</option>
                          <option value="Lato">Lato</option>
                          <option value="Montserrat">Montserrat</option>
                          <option value="Poppins">Poppins</option>
                          <option value="Playfair Display">Playfair Display</option>
                          <option value="Oswald">Oswald</option>
                        </select>
                      </div>

                      {/* –¢–æ–≤—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç—É */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-4">–¢–æ–≤—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç—É</label>
                        <div className="grid grid-cols-3 gap-3">
                          {[
                            { value: 400, label: '–ó–≤–∏—á–∞–π–Ω–∏–π', weight: 'font-normal' },
                            { value: 600, label: '–ù–∞–ø—ñ–≤–∂–∏—Ä–Ω–∏–π', weight: 'font-semibold' },
                            { value: 700, label: '–ñ–∏—Ä–Ω–∏–π', weight: 'font-bold' }
                          ].map((weight) => (
                            <button
                              key={weight.value}
                              onClick={() => updateTypographyValue('fontWeight', weight.value)}
                              className={`p-3 rounded-xl border-2 transition-all duration-200 text-center ${
                                getTypographyValue('fontWeight') === weight.value
                                  ? 'border-purple-500 bg-purple-100 text-purple-700 shadow-md'
                                  : 'border-slate-200 hover:border-slate-300 bg-white/60 hover:bg-white/80'
                              }`}
                            >
                              <div className={`${weight.weight} text-lg mb-1`}>Aa</div>
                              <div className="text-xs font-semibold leading-tight break-words">{weight.label}</div>
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* –°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç—É */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-4">–°—Ç–∏–ª—å —Ç–µ–∫—Å—Ç—É</label>
                        <div className="grid grid-cols-2 gap-3">
                          {[
                            { value: 'normal', label: '–ó–≤–∏—á–∞–π–Ω–∏–π', style: 'font-normal' },
                            { value: 'italic', label: '–ö—É—Ä—Å–∏–≤', style: 'italic' }
                          ].map((style) => (
                            <button
                              key={style.value}
                              onClick={() => updateTypographyValue('fontStyle', style.value)}
                              className={`p-3 rounded-xl border-2 transition-all duration-200 text-center ${
                                getTypographyValue('fontStyle') === style.value
                                  ? 'border-purple-500 bg-purple-100 text-purple-700 shadow-md'
                                  : 'border-slate-200 hover:border-slate-300 bg-white/60 hover:bg-white/80'
                              }`}
                            >
                              <div className={`${style.style} text-base mb-1 truncate`}>
                                {activeTypographyElement === 'title' ? '–ó–∞–≥–æ–ª–æ–≤–æ–∫' :
                                 activeTypographyElement === 'subtitle' ? '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫' : '–û–ø–∏—Å'}
                              </div>
                              <div className="text-xs font-semibold leading-tight">{style.label}</div>
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 4. –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å - –ß–ï–¢–í–ï–†–¢–ò–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-emerald-50 to-teal-50 rounded-2xl p-6 border border-emerald-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-teal-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üì±</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å</h3>
                      <p className="text-sm text-slate-600">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤</p>
                    </div>
                  </div>
                  
                  {/* –í–∏–±—ñ—Ä –ø—Ä–∏—Å—Ç—Ä–æ—é */}
                  <div className="mb-6">
                    <label className="block text-sm font-semibold text-slate-700 mb-4">–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—Å—Ç—Ä—ñ–π:</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { type: 'mobile', label: '–ú–æ–±—ñ–ª—å–Ω–∏–π', icon: 'üì±', color: 'emerald' },
                        { type: 'tablet', label: '–ü–ª–∞–Ω—à–µ—Ç', icon: 'üìü', color: 'teal' },
                        { type: 'desktop', label: '–î–µ—Å–∫—Ç–æ–ø', icon: 'üñ•Ô∏è', color: 'cyan' }
                      ].map((device) => (
                        <button
                          key={device.type}
                          onClick={() => setDeviceType(device.type as DeviceType)}
                          className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                            deviceType === device.type
                              ? `border-${device.color}-500 bg-${device.color}-100 text-${device.color}-700 shadow-lg scale-105`
                              : 'border-slate-200 hover:border-slate-300 bg-white/60'
                          }`}
                        >
                          <div className="text-2xl mb-2">{device.icon}</div>
                          <div className="text-xs font-semibold">{device.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é */}
                  <div className="space-y-5">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="bg-white/60 rounded-xl p-4 border border-emerald-100">
                      <h4 className="font-semibold text-slate-800 mb-4 flex items-center gap-2">
                        <span className="w-3 h-3 bg-blue-500 rounded-full"></span>
                        –ó–∞–≥–æ–ª–æ–≤–æ–∫
                      </h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –†–æ–∑–º—ñ—Ä: {settings[deviceType].titleFontSize}px
                          </label>
                          <input
                            type="range"
                            min="16"
                            max="120"
                            value={settings[deviceType].titleFontSize}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                titleFontSize: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –í—ñ–¥—Å—Ç—É–ø: {settings[deviceType].titleMarginBottom}px
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="50"
                            value={settings[deviceType].titleMarginBottom}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                titleMarginBottom: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                      </div>
                    </div>

                    {/* –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                    <div className="bg-white/60 rounded-xl p-4 border border-emerald-100">
                      <h4 className="font-semibold text-slate-800 mb-4 flex items-center gap-2">
                        <span className="w-3 h-3 bg-purple-500 rounded-full"></span>
                        –ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                      </h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –†–æ–∑–º—ñ—Ä: {settings[deviceType].subtitleFontSize}px
                          </label>
                          <input
                            type="range"
                            min="14"
                            max="100"
                            value={settings[deviceType].subtitleFontSize}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                subtitleFontSize: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –í—ñ–¥—Å—Ç—É–ø: {settings[deviceType].subtitleMarginBottom}px
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="40"
                            value={settings[deviceType].subtitleMarginBottom}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                subtitleMarginBottom: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                      </div>
                    </div>

                    {/* –û–ø–∏—Å */}
                    <div className="bg-white/60 rounded-xl p-4 border border-emerald-100">
                      <h4 className="font-semibold text-slate-800 mb-4 flex items-center gap-2">
                        <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                        –û–ø–∏—Å
                      </h4>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –†–æ–∑–º—ñ—Ä: {settings[deviceType].descriptionFontSize}px
                          </label>
                          <input
                            type="range"
                            min="12"
                            max="72"
                            value={settings[deviceType].descriptionFontSize}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                descriptionFontSize: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                        <div>
                          <label className="block text-xs font-medium text-slate-600 mb-2">
                            –í—ñ–¥—Å—Ç—É–ø: {settings[deviceType].descriptionMarginBottom}px
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="30"
                            value={settings[deviceType].descriptionMarginBottom}
                            onChange={(e) => updateSettings({
                              [deviceType]: {
                                ...settings[deviceType],
                                descriptionMarginBottom: parseInt(e.target.value)
                              }
                            })}
                            className="w-full h-2 bg-emerald-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 5. –¢—ñ–Ω—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏ - –ü'–Ø–¢–ò–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-indigo-50 to-blue-50 rounded-2xl p-6 border border-indigo-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-blue-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üåü</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–¢—ñ–Ω—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏</h3>
                      <p className="text-sm text-slate-600">3D –≥–ª–∏–±–∏–Ω–∞ —Ç–∞ —Ç—ñ–Ω—ñ –¥–ª—è —Ç–µ–∫—Å—Ç—É</p>
                    </div>
                  </div>

                  {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
                  <div className="mb-6">
                    <label className="block text-sm font-semibold text-slate-700 mb-4">–û–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { type: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üî§', color: 'blue' },
                        { type: 'subtitle', label: '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üìù', color: 'purple' },
                        { type: 'description', label: '–û–ø–∏—Å', icon: 'üìÑ', color: 'green' }
                      ].map((element) => (
                        <button
                          key={element.type}
                          onClick={() => setActiveTypographyElement(element.type as 'title' | 'subtitle' | 'description')}
                          className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                            activeTypographyElement === element.type
                              ? `border-${element.color}-500 bg-${element.color}-100 text-${element.color}-700 shadow-lg scale-105`
                              : 'border-slate-200 hover:border-slate-300 bg-white/60'
                          }`}
                        >
                          <div className="text-2xl mb-2">{element.icon}</div>
                          <div className="text-xs font-semibold">{element.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* –°–ø—ñ–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ */}
                  <div className="bg-white/60 rounded-xl p-5 border border-indigo-100">
                    <div className="flex items-center gap-3 mb-5">
                      <div className={`w-4 h-4 rounded-full ${
                        activeTypographyElement === 'title' ? 'bg-blue-500' :
                        activeTypographyElement === 'subtitle' ? 'bg-purple-500' : 'bg-green-500'
                      }`}></div>
                      <h4 className="font-semibold text-slate-800">
                        –ï—Ñ–µ–∫—Ç–∏ –¥–ª—è: {
                          activeTypographyElement === 'title' ? '–ó–∞–≥–æ–ª–æ–≤–∫–∞' :
                          activeTypographyElement === 'subtitle' ? '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞' : '–û–ø–∏—Å—É'
                        }
                      </h4>
                    </div>
                    
                    <div className="space-y-5">
                      {/* 3D –ì–ª–∏–±–∏–Ω–∞ */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-3">
                          3D –ì–ª–∏–±–∏–Ω–∞: {
                            activeTypographyElement === 'title' ? settings.title3DDepth :
                            activeTypographyElement === 'subtitle' ? settings.subtitle3DDepth :
                            settings.description3DDepth
                          }px
                        </label>
                        <input
                          type="range"
                          min="0"
                          max="20"
                          value={
                            activeTypographyElement === 'title' ? settings.title3DDepth :
                            activeTypographyElement === 'subtitle' ? settings.subtitle3DDepth :
                            settings.description3DDepth
                          }
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            if (activeTypographyElement === 'title') {
                              updateSettings({ title3DDepth: value });
                            } else if (activeTypographyElement === 'subtitle') {
                              updateSettings({ subtitle3DDepth: value });
                            } else {
                              updateSettings({ description3DDepth: value });
                            }
                          }}
                          className="w-full h-2 bg-indigo-200 rounded-lg appearance-none cursor-pointer modern-slider"
                        />
                      </div>

                      {/* –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Ç—ñ–Ω—ñ */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-3">
                          –Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å —Ç—ñ–Ω—ñ: {
                            Math.round((
                              activeTypographyElement === 'title' ? settings.titleShadowIntensity :
                              activeTypographyElement === 'subtitle' ? settings.subtitleShadowIntensity :
                              settings.descriptionShadowIntensity
                            ) * 100)
                          }%
                        </label>
                        <input
                          type="range"
                          min="0"
                          max="1"
                          step="0.1"
                          value={
                            activeTypographyElement === 'title' ? settings.titleShadowIntensity :
                            activeTypographyElement === 'subtitle' ? settings.subtitleShadowIntensity :
                            settings.descriptionShadowIntensity
                          }
                          onChange={(e) => {
                            const value = parseFloat(e.target.value);
                            if (activeTypographyElement === 'title') {
                              updateSettings({ titleShadowIntensity: value });
                            } else if (activeTypographyElement === 'subtitle') {
                              updateSettings({ subtitleShadowIntensity: value });
                            } else {
                              updateSettings({ descriptionShadowIntensity: value });
                            }
                          }}
                          className="w-full h-2 bg-indigo-200 rounded-lg appearance-none cursor-pointer modern-slider"
                        />
                      </div>

                      {/* –ö–æ–ª—ñ—Ä —Ç—ñ–Ω—ñ */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-3">–ö–æ–ª—ñ—Ä —Ç—ñ–Ω—ñ</label>
                        <div className="flex gap-3">
                          <input
                            type="color"
                            value={
                              activeTypographyElement === 'title' ? settings.titleShadowColor :
                              activeTypographyElement === 'subtitle' ? settings.subtitleShadowColor :
                              settings.descriptionShadowColor
                            }
                            onChange={(e) => {
                              const value = e.target.value;
                              if (activeTypographyElement === 'title') {
                                updateSettings({ titleShadowColor: value });
                              } else if (activeTypographyElement === 'subtitle') {
                                updateSettings({ subtitleShadowColor: value });
                              } else {
                                updateSettings({ descriptionShadowColor: value });
                              }
                            }}
                            className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                          />
                          <input
                            type="text"
                            value={
                              activeTypographyElement === 'title' ? settings.titleShadowColor :
                              activeTypographyElement === 'subtitle' ? settings.subtitleShadowColor :
                              settings.descriptionShadowColor
                            }
                            onChange={(e) => {
                              const value = e.target.value;
                              if (activeTypographyElement === 'title') {
                                updateSettings({ titleShadowColor: value });
                              } else if (activeTypographyElement === 'subtitle') {
                                updateSettings({ subtitleShadowColor: value });
                              } else {
                                updateSettings({ descriptionShadowColor: value });
                              }
                            }}
                            className="flex-1 px-4 py-3 bg-white border border-slate-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 text-slate-800"
                            placeholder="–ö–æ–ª—ñ—Ä —Ç—ñ–Ω—ñ"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 6. –ê–Ω—ñ–º–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É - –®–û–°–¢–ò–ô –ë–õ–û–ö */}
                <div className="bg-gradient-to-br from-rose-50 to-pink-50 rounded-2xl p-6 border border-rose-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-rose-500 to-pink-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">‚ú®</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–ê–Ω—ñ–º–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É</h3>
                      <p className="text-sm text-slate-600">–î–∏–Ω–∞–º—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –ø–æ—è–≤–∏ —Ç–∞ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è</p>
                    </div>
                  </div>

                  {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –º—ñ–∂ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
                  <div className="mb-6">
                    <label className="block text-sm font-semibold text-slate-700 mb-4">–û–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó:</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { type: 'title', label: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üî§', color: 'blue' },
                        { type: 'subtitle', label: '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'üìù', color: 'purple' },
                        { type: 'description', label: '–û–ø–∏—Å', icon: 'üìÑ', color: 'green' }
                      ].map((element) => (
                        <button
                          key={element.type}
                          onClick={() => setActiveTypographyElement(element.type as 'title' | 'subtitle' | 'description')}
                          className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                            activeTypographyElement === element.type
                              ? `border-${element.color}-500 bg-${element.color}-100 text-${element.color}-700 shadow-lg scale-105`
                              : 'border-slate-200 hover:border-slate-300 bg-white/60'
                          }`}
                        >
                          <div className="text-2xl mb-2">{element.icon}</div>
                          <div className="text-xs font-semibold">{element.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* –°–ø—ñ–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ */}
                  <div className="bg-white/60 rounded-xl p-5 border border-rose-100">
                    <div className="flex items-center gap-3 mb-5">
                      <div className={`w-4 h-4 rounded-full ${
                        activeTypographyElement === 'title' ? 'bg-blue-500' :
                        activeTypographyElement === 'subtitle' ? 'bg-purple-500' : 'bg-green-500'
                      }`}></div>
                      <h4 className="font-semibold text-slate-800">
                        –ê–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è: {
                          activeTypographyElement === 'title' ? '–ó–∞–≥–æ–ª–æ–≤–∫–∞' :
                          activeTypographyElement === 'subtitle' ? '–ü—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞' : '–û–ø–∏—Å—É'
                        }
                      </h4>
                    </div>
                    
                    <div className="space-y-5">
                      {/* –ê–Ω—ñ–º–∞—Ü—ñ—è –≤—Ö–æ–¥—É */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-4">–ê–Ω—ñ–º–∞—Ü—ñ—è –≤—Ö–æ–¥—É</label>
                        <div className="grid grid-cols-2 gap-3">
                          {[
                            { value: 'none', label: '–ë–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ—ó', icon: '‚ö™' },
                            { value: 'fadeIn', label: '–ü–æ—è–≤–∞', icon: 'üåÖ' },
                            { value: 'slideUp', label: '–ó–Ω–∏–∑—É –≤–≥–æ—Ä—É', icon: '‚¨ÜÔ∏è' },
                            { value: 'slideDown', label: '–ó–≥–æ—Ä–∏ –≤–Ω–∏–∑', icon: '‚¨áÔ∏è' },
                            { value: 'slideLeft', label: '–°–ø—Ä–∞–≤–∞ –≤–ª—ñ–≤–æ', icon: '‚¨ÖÔ∏è' },
                            { value: 'slideRight', label: '–ó–ª—ñ–≤–∞ –≤–ø—Ä–∞–≤–æ', icon: '‚û°Ô∏è' },
                            { value: 'zoomIn', label: '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è', icon: 'üîç' },
                            { value: 'zoomOut', label: '–ó–º–µ–Ω—à–µ–Ω–Ω—è', icon: 'üîé' },
                            { value: 'rotateIn', label: '–û–±–µ—Ä—Ç–∞–Ω–Ω—è', icon: 'üîÑ' },
                            { value: 'bounce', label: '–ü—ñ–¥—Å—Ç—Ä–∏–±—É–≤–∞–Ω–Ω—è', icon: '‚ö°' },
                            { value: 'typewriter', label: '–î—Ä—É–∫–∞—Ä—Å—å–∫–∞ –º–∞—à–∏–Ω–∫–∞', icon: '‚å®Ô∏è' },
                            { value: 'glow', label: '–°–≤—ñ—Ç—ñ–Ω–Ω—è', icon: '‚ú®' }
                          ].map((animation) => (
                            <button
                              key={animation.value}
                              onClick={() => {
                                if (activeTypographyElement === 'title') {
                                  updateSettings({ titleAnimation: animation.value as any });
                                } else if (activeTypographyElement === 'subtitle') {
                                  updateSettings({ subtitleAnimation: animation.value as any });
                                } else {
                                  updateSettings({ descriptionAnimation: animation.value as any });
                                }
                              }}
                              className={`p-3 rounded-xl border-2 transition-all duration-200 text-center ${
                                (activeTypographyElement === 'title' ? settings.titleAnimation :
                                 activeTypographyElement === 'subtitle' ? settings.subtitleAnimation :
                                 settings.descriptionAnimation) === animation.value
                                  ? 'border-rose-500 bg-rose-100 text-rose-700 shadow-md'
                                  : 'border-slate-200 hover:border-slate-300 bg-white/60 hover:bg-white/80'
                              }`}
                            >
                              <div className="text-lg mb-1">{animation.icon}</div>
                              <div className="text-xs font-semibold leading-tight break-words">{animation.label}</div>
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* –ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏—Ö–æ–¥—É */}
                      <div>
                        <label className="block text-sm font-medium text-slate-600 mb-4">–ê–Ω—ñ–º–∞—Ü—ñ—è –≤–∏—Ö–æ–¥—É</label>
                        <div className="grid grid-cols-2 gap-3">
                          {[
                            { value: 'none', label: '–ë–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ—ó', icon: '‚ö™' },
                            { value: 'fadeOut', label: '–ó–Ω–∏–∫–Ω–µ–Ω–Ω—è', icon: 'üåá' },
                            { value: 'slideUp', label: '–í–≥–æ—Ä—É', icon: '‚¨ÜÔ∏è' },
                            { value: 'slideDown', label: '–í–Ω–∏–∑', icon: '‚¨áÔ∏è' },
                            { value: 'slideLeft', label: '–í–ª—ñ–≤–æ', icon: '‚¨ÖÔ∏è' },
                            { value: 'slideRight', label: '–í–ø—Ä–∞–≤–æ', icon: '‚û°Ô∏è' },
                            { value: 'zoomOut', label: '–ó–º–µ–Ω—à–µ–Ω–Ω—è', icon: 'üîé' },
                            { value: 'zoomIn', label: '–ó–±—ñ–ª—å—à–µ–Ω–Ω—è', icon: 'üîç' },
                            { value: 'rotateOut', label: '–û–±–µ—Ä—Ç–∞–Ω–Ω—è', icon: 'üîÑ' },
                            { value: 'dissolve', label: '–†–æ–∑—á–∏–Ω–µ–Ω–Ω—è', icon: 'üí´' }
                          ].map((animation) => (
                            <button
                              key={animation.value}
                              onClick={() => {
                                if (activeTypographyElement === 'title') {
                                  updateSettings({ titleExitAnimation: animation.value as any });
                                } else if (activeTypographyElement === 'subtitle') {
                                  updateSettings({ subtitleExitAnimation: animation.value as any });
                                } else {
                                  updateSettings({ descriptionExitAnimation: animation.value as any });
                                }
                              }}
                              className={`p-3 rounded-xl border-2 transition-all duration-200 text-center ${
                                (activeTypographyElement === 'title' ? settings.titleExitAnimation :
                                 activeTypographyElement === 'subtitle' ? settings.subtitleExitAnimation :
                                 settings.descriptionExitAnimation) === animation.value
                                  ? 'border-rose-500 bg-rose-100 text-rose-700 shadow-md'
                                  : 'border-slate-200 hover:border-slate-300 bg-white/60 hover:bg-white/80'
                              }`}
                            >
                              <div className="text-lg mb-1">{animation.icon}</div>
                              <div className="text-xs font-semibold leading-tight break-words">{animation.label}</div>
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É */}
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-slate-600 mb-3">
                            –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {settings.animationDuration}–º—Å
                          </label>
                          <input
                            type="range"
                            min="200"
                            max="2000"
                            step="100"
                            value={settings.animationDuration}
                            onChange={(e) => updateSettings({ animationDuration: parseInt(e.target.value) })}
                            className="w-full h-2 bg-rose-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-slate-600 mb-3">
                            –ó–∞—Ç—Ä–∏–º–∫–∞: {settings.animationDelay}–º—Å
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="1000"
                            step="50"
                            value={settings.animationDelay}
                            onChange={(e) => updateSettings({ animationDelay: parseInt(e.target.value) })}
                            className="w-full h-2 bg-rose-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'design' && (
              <div className="space-y-6">
                {/* –ö–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞ */}
                <div className="bg-gradient-to-br from-pink-50 to-rose-50 rounded-2xl p-6 border border-pink-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-pink-500 to-rose-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üé®</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–ö–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞</h3>
                      <p className="text-sm text-slate-600">–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–æ–ª—å–æ—Ä–∏ –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É</p>
                    </div>
                  </div>

                  <div className="space-y-5">
                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                        –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä –±—Ä–µ–Ω–¥—É
                      </label>
                      <div className="flex gap-3">
                        <input
                          type="color"
                          value={settings.brandColor}
                          onChange={(e) => updateSettings({ brandColor: e.target.value })}
                          className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                        />
                        <input
                          type="text"
                          value={settings.brandColor}
                          onChange={(e) => updateSettings({ brandColor: e.target.value })}
                          className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all duration-200 text-slate-800"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                        –ê–∫—Ü–µ–Ω—Ç–Ω–∏–π –∫–æ–ª—ñ—Ä
                      </label>
                      <div className="flex gap-3">
                        <input
                          type="color"
                          value={settings.accentColor}
                          onChange={(e) => updateSettings({ accentColor: e.target.value })}
                          className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                        />
                        <input
                          type="text"
                          value={settings.accentColor}
                          onChange={(e) => updateSettings({ accentColor: e.target.value })}
                          className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-slate-800"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-slate-500 rounded-full"></span>
                        –ö–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É
                      </label>
                      <div className="flex gap-3">
                        <input
                          type="color"
                          value={settings.textColor}
                          onChange={(e) => updateSettings({ textColor: e.target.value })}
                          className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                        />
                        <input
                          type="text"
                          value={settings.textColor}
                          onChange={(e) => updateSettings({ textColor: e.target.value })}
                          className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-slate-500 focus:border-transparent transition-all duration-200 text-slate-800"
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* –ï—Ñ–µ–∫—Ç–∏ */}
                <div className="bg-gradient-to-br from-cyan-50 to-blue-50 rounded-2xl p-6 border border-cyan-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">‚ú®</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–í—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏</h3>
                      <p className="text-sm text-slate-600">–î–æ–¥–∞–π—Ç–µ –º–∞–≥—ñ—ó –≤–∞—à–æ–º—É —Å–∞–π—Ç—É</p>
                    </div>
                  </div>

                  <div className="space-y-5">
                    <div className="flex items-center justify-between p-4 bg-white/60 rounded-xl border border-cyan-100">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">‚ú®</span>
                        <div>
                          <h4 className="font-semibold text-slate-800">–ß–∞—Å—Ç–∏–Ω–∫–∏</h4>
                          <p className="text-sm text-slate-600">–ê–Ω—ñ–º–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –Ω–∞ —Ñ–æ–Ω—ñ</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.showParticles}
                          onChange={(e) => updateSettings({ showParticles: e.target.checked })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-cyan-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-cyan-500"></div>
                      </label>
                    </div>

                    {settings.showParticles && (
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                          <span className="w-2 h-2 bg-cyan-500 rounded-full"></span>
                          –ö–æ–ª—ñ—Ä —á–∞—Å—Ç–∏–Ω–æ–∫
                        </label>
                        <div className="flex gap-3">
                          <input
                            type="color"
                            value={settings.particleColor}
                            onChange={(e) => updateSettings({ particleColor: e.target.value })}
                            className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                          />
                          <input
                            type="text"
                            value={settings.particleColor}
                            onChange={(e) => updateSettings({ particleColor: e.target.value })}
                            className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-200 text-slate-800"
                            placeholder="–ö–æ–ª—ñ—Ä —á–∞—Å—Ç–∏–Ω–æ–∫"
                          />
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'background' && (
              <div className="space-y-6">
                {/* –¢–∏–ø —Ñ–æ–Ω—É */}
                <div className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-2xl p-6 border border-indigo-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üåÖ</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–§–æ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏</h3>
                      <p className="text-sm text-slate-600">–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ñ–æ–Ω—É –¥–ª—è –≤–∞—à–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏</p>
                    </div>
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-semibold text-slate-700 mb-4">–¢–∏–ø —Ñ–æ–Ω—É:</label>
                    <div className="grid grid-cols-2 gap-3">
                      {[
                        { value: 'color', label: '–ö–æ–ª—ñ—Ä', icon: 'üé®', color: 'red' },
                        { value: 'gradient', label: '–ì—Ä–∞–¥—ñ—î–Ω—Ç', icon: 'üåà', color: 'orange' },
                        { value: 'image', label: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è', icon: 'üñºÔ∏è', color: 'green' },
                        { value: 'video', label: '–í—ñ–¥–µ–æ', icon: 'üé¨', color: 'blue' }
                      ].map((type) => (
                        <button
                          key={type.value}
                          onClick={() => updateSettings({ backgroundType: type.value as IntroSettings['backgroundType'] })}
                          className={`p-4 rounded-xl border-2 transition-all duration-300 ${
                            settings.backgroundType === type.value
                              ? `border-${type.color}-500 bg-${type.color}-100 text-${type.color}-700 shadow-lg scale-105`
                              : 'border-slate-200 hover:border-slate-300 bg-white/60'
                          }`}
                        >
                          <div className="text-2xl mb-2">{type.icon}</div>
                          <div className="text-sm font-semibold">{type.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ–Ω—É */}
                  {settings.backgroundType === 'color' && (
                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                        –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É
                      </label>
                      <div className="flex gap-3">
                        <input
                          type="color"
                          value={settings.backgroundColor}
                          onChange={(e) => updateSettings({ backgroundColor: e.target.value })}
                          className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                        />
                        <input
                          type="text"
                          value={settings.backgroundColor}
                          onChange={(e) => updateSettings({ backgroundColor: e.target.value })}
                          className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 text-slate-800"
                        />
                      </div>
                    </div>
                  )}

                  {settings.backgroundType === 'gradient' && (
                    <div className="space-y-5">
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                          <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                          –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
                        </label>
                        <div className="flex gap-3">
                          <input
                            type="color"
                            value={settings.gradientFrom}
                            onChange={(e) => updateSettings({ gradientFrom: e.target.value })}
                            className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                          />
                          <input
                            type="text"
                            value={settings.gradientFrom}
                            onChange={(e) => updateSettings({ gradientFrom: e.target.value })}
                            className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 text-slate-800"
                          />
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                          <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                          –ö—ñ–Ω—Ü–µ–≤–∏–π –∫–æ–ª—ñ—Ä
                        </label>
                        <div className="flex gap-3">
                          <input
                            type="color"
                            value={settings.gradientTo}
                            onChange={(e) => updateSettings({ gradientTo: e.target.value })}
                            className="w-16 h-12 border-2 border-slate-200 rounded-xl cursor-pointer shadow-sm"
                          />
                          <input
                            type="text"
                            value={settings.gradientTo}
                            onChange={(e) => updateSettings({ gradientTo: e.target.value })}
                            className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-all duration-200 text-slate-800"
                          />
                        </div>
                      </div>
                    </div>
                  )}

                  {settings.backgroundType === 'image' && (
                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                        –§–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                      </label>
                      <div className="flex gap-3">
                        <button
                          onClick={() => openMediaSelector('backgroundImage', ['image'])}
                          className="flex-1 px-4 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl hover:from-green-600 hover:to-emerald-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl"
                        >
                          üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                        </button>
                        {settings.backgroundImage && (
                          <button
                            onClick={() => updateSettings({ backgroundImage: '' })}
                            className="px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-200 border border-red-200 hover:border-red-300"
                          >
                            ‚úï
                          </button>
                        )}
                      </div>
                      
                      {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
                      {settings.backgroundImage && (
                        <div className="mt-3 p-3 bg-green-50 rounded-xl border border-green-200">
                          <div className="flex items-center gap-3">
                            <div className="w-12 h-12 bg-green-100 rounded-lg border border-green-300 overflow-hidden">
                              <img src={settings.backgroundImage} alt="–§–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è" className="w-full h-full object-cover" />
                            </div>
                            <div>
                              <p className="text-sm font-medium text-green-700">–§–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ</p>
                              <p className="text-xs text-green-600">–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–∫ —Ñ–æ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫–∏</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                  {settings.backgroundType === 'video' && (
                    <div>
                      <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                        –§–æ–Ω–æ–≤–µ –≤—ñ–¥–µ–æ
                      </label>
                      <div className="flex gap-3">
                        <button
                          onClick={() => openMediaSelector('backgroundVideo', ['video'])}
                          className="flex-1 px-4 py-3 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-xl hover:from-blue-600 hover:to-purple-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl"
                        >
                          üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                        </button>
                        {settings.backgroundVideo && (
                          <button
                            onClick={() => updateSettings({ backgroundVideo: '' })}
                            className="px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-200 border border-red-200 hover:border-red-300"
                          >
                            ‚úï
                          </button>
                        )}
                      </div>
                      
                      {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–µ –≤—ñ–¥–µ–æ */}
                      {settings.backgroundVideo && (
                        <div className="mt-3 p-3 bg-blue-50 rounded-xl border border-blue-200">
                          <div className="flex items-center gap-3">
                            <div className="w-12 h-12 bg-blue-100 rounded-lg border border-blue-300 flex items-center justify-center">
                              <span className="text-blue-600 text-lg">üé¨</span>
                            </div>
                            <div>
                              <p className="text-sm font-medium text-blue-700">–§–æ–Ω–æ–≤–µ –≤—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–µ</p>
                              <p className="text-xs text-blue-600">–í—ñ–¥–µ–æ –±—É–¥–µ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –Ω–∞ —Ñ–æ–Ω—ñ</p>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === 'audio' && (
              <div className="space-y-6">
                {/* –§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞ */}
                <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl p-6 border border-green-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üéµ</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞</h3>
                      <p className="text-sm text-slate-600">–î–æ–¥–∞–π—Ç–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∑–≤—É–∫–æ–º</p>
                    </div>
                  </div>

                  <div className="space-y-5">
                    <div className="flex items-center justify-between p-4 bg-white/60 rounded-xl border border-green-100">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">üéµ</span>
                        <div>
                          <h4 className="font-semibold text-slate-800">–§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞</h4>
                          <p className="text-sm text-slate-600">–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏</p>
                        </div>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={settings.audioSettings.backgroundMusic.enabled}
                          onChange={(e) => updateSettings({ 
                            audioSettings: { 
                              ...settings.audioSettings, 
                              backgroundMusic: { 
                                ...settings.audioSettings.backgroundMusic, 
                                enabled: e.target.checked 
                              } 
                            } 
                          })}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-500"></div>
                      </label>
                    </div>

                    {settings.audioSettings.backgroundMusic.enabled && (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-3 flex items-center gap-2">
                            <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                            –ê—É–¥—ñ–æ —Ñ–∞–π–ª
                          </label>
                          <div className="flex gap-3">
                            <button
                              onClick={() => openMediaSelector('backgroundMusic', ['audio'])}
                              className="flex-1 px-4 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl hover:from-green-600 hover:to-emerald-600 transition-all duration-200 font-medium shadow-lg hover:shadow-xl"
                            >
                              üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                            </button>
                            {settings.audioSettings.backgroundMusic.url && (
                              <button
                                onClick={() => updateSettings({ 
                                  audioSettings: { 
                                    ...settings.audioSettings, 
                                    backgroundMusic: { 
                                      ...settings.audioSettings.backgroundMusic, 
                                      url: '', 
                                      enabled: false 
                                    } 
                                  } 
                                })}
                                className="px-4 py-3 text-red-600 hover:bg-red-50 rounded-xl transition-all duration-200 border border-red-200 hover:border-red-300"
                              >
                                ‚úï
                              </button>
                            )}
                          </div>
                          
                          {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª */}
                          {settings.audioSettings.backgroundMusic.url && (
                            <div className="mt-3 p-3 bg-green-50 rounded-xl border border-green-200">
                              <div className="flex items-center gap-3">
                                <div className="w-12 h-12 bg-green-100 rounded-lg border border-green-300 flex items-center justify-center">
                                  <span className="text-green-600 text-lg">üéµ</span>
                                </div>
                                <div>
                                  <p className="text-sm font-medium text-green-700">–§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞</p>
                                  <p className="text-xs text-green-600">–ú—É–∑–∏–∫–∞ –±—É–¥–µ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –Ω–∞ —Ñ–æ–Ω—ñ</p>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-slate-600 mb-3">
                            –ì—É—á–Ω—ñ—Å—Ç—å: {Math.round(settings.audioSettings.backgroundMusic.volume * 100)}%
                          </label>
                          <input
                            type="range"
                            min="0"
                            max="1"
                            step="0.1"
                            value={settings.audioSettings.backgroundMusic.volume}
                            onChange={(e) => updateSettings({ 
                              audioSettings: { 
                                ...settings.audioSettings, 
                                backgroundMusic: { 
                                  ...settings.audioSettings.backgroundMusic, 
                                  volume: parseFloat(e.target.value) 
                                } 
                              } 
                            })}
                            className="w-full h-2 bg-green-200 rounded-lg appearance-none cursor-pointer modern-slider"
                          />
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div className="flex items-center justify-between p-3 bg-white/60 rounded-xl border border-green-100">
                            <div>
                              <h5 className="font-medium text-slate-800">–ó–∞—Ü–∏–∫–ª–∏—Ç–∏</h5>
                              <p className="text-xs text-slate-600">–ü–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –º—É–∑–∏–∫—É</p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                checked={settings.audioSettings.backgroundMusic.loop}
                                onChange={(e) => updateSettings({ 
                                  audioSettings: { 
                                    ...settings.audioSettings, 
                                    backgroundMusic: { 
                                      ...settings.audioSettings.backgroundMusic, 
                                      loop: e.target.checked 
                                    } 
                                  } 
                                })}
                                className="sr-only peer"
                              />
                              <div className="w-9 h-5 bg-slate-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-green-500"></div>
                            </label>
                          </div>

                          <div className="flex items-center justify-between p-3 bg-white/60 rounded-xl border border-green-100">
                            <div>
                              <h5 className="font-medium text-slate-800">–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫</h5>
                              <p className="text-xs text-slate-600">–ì—Ä–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
                            </div>
                            <label className="relative inline-flex items-center cursor-pointer">
                              <input
                                type="checkbox"
                                checked={settings.audioSettings.backgroundMusic.autoPlay}
                                onChange={(e) => updateSettings({ 
                                  audioSettings: { 
                                    ...settings.audioSettings, 
                                    backgroundMusic: { 
                                      ...settings.audioSettings.backgroundMusic, 
                                      autoPlay: e.target.checked 
                                    } 
                                  } 
                                })}
                                className="sr-only peer"
                              />
                              <div className="w-9 h-5 bg-slate-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-green-500"></div>
                            </label>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* –ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏ */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-100 shadow-sm">
                  <div className="flex items-center gap-3 mb-6">
                    <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-xl flex items-center justify-center">
                      <span className="text-white text-lg">üîä</span>
                    </div>
                    <div>
                      <h3 className="text-lg font-bold text-slate-800">–ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏</h3>
                      <p className="text-sm text-slate-600">–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–≤—É–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫</p>
                    </div>
                  </div>

                  <div className="space-y-5">
                    {/* –ó–≤—É–∫–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è */}
                    <div className="bg-white/60 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <span className="text-xl">üñ±Ô∏è</span>
                          <div>
                            <h4 className="font-semibold text-slate-800">–ó–≤—É–∫–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è</h4>
                            <p className="text-sm text-slate-600">–ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏</p>
                          </div>
                        </div>
                        <label className="relative inline-flex items-center cursor-pointer">
                          <input
                            type="checkbox"
                            checked={settings.audioSettings.hoverSounds.enabled}
                            onChange={(e) => updateSettings({ 
                              audioSettings: { 
                                ...settings.audioSettings, 
                                hoverSounds: { 
                                  ...settings.audioSettings.hoverSounds, 
                                  enabled: e.target.checked 
                                } 
                              } 
                            })}
                            className="sr-only peer"
                          />
                          <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                        </label>
                      </div>

                      {settings.audioSettings.hoverSounds.enabled && (
                        <div className="space-y-3">
                          <div className="flex gap-3">
                            <button
                              onClick={() => openMediaSelector('hoverSound', ['audio'])}
                              className="flex-1 px-3 py-2 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-lg hover:from-blue-600 hover:to-indigo-600 transition-all duration-200 text-sm font-medium"
                            >
                              üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                            </button>
                            {settings.audioSettings.hoverSounds.url && (
                              <button
                                onClick={() => updateSettings({ 
                                  audioSettings: { 
                                    ...settings.audioSettings, 
                                    hoverSounds: { 
                                      ...settings.audioSettings.hoverSounds, 
                                      url: '', 
                                      enabled: false 
                                    } 
                                  } 
                                })}
                                className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200 border border-red-200 text-sm"
                              >
                                ‚úï
                              </button>
                            )}
                          </div>
                          
                          {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª */}
                          {settings.audioSettings.hoverSounds.url && (
                            <div className="mt-3 p-3 bg-blue-50 rounded-xl border border-blue-200">
                              <div className="flex items-center gap-3">
                                <div className="w-12 h-12 bg-blue-100 rounded-lg border border-blue-300 flex items-center justify-center">
                                  <span className="text-blue-600 text-lg">üñ±Ô∏è</span>
                                </div>
                                <div>
                                  <p className="text-sm font-medium text-blue-700">–ó–≤—É–∫ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π</p>
                                  <p className="text-xs text-blue-600">–ó–≤—É–∫ –±—É–¥–µ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ</p>
                                </div>
                              </div>
                            </div>
                          )}
                          <div>
                            <label className="block text-xs font-medium text-slate-600 mb-2">
                              –ì—É—á–Ω—ñ—Å—Ç—å: {Math.round(settings.audioSettings.hoverSounds.volume * 100)}%
                            </label>
                            <input
                              type="range"
                              min="0"
                              max="1"
                              step="0.1"
                              value={settings.audioSettings.hoverSounds.volume}
                              onChange={(e) => updateSettings({ 
                                audioSettings: { 
                                  ...settings.audioSettings, 
                                  hoverSounds: { 
                                    ...settings.audioSettings.hoverSounds, 
                                    volume: parseFloat(e.target.value) 
                                  } 
                                } 
                              })}
                              className="w-full h-1.5 bg-blue-200 rounded-lg appearance-none cursor-pointer"
                            />
                          </div>
                        </div>
                      )}
                    </div>

                    {/* –ó–≤—É–∫–∏ –∫–ª—ñ–∫—ñ–≤ */}
                    <div className="bg-white/60 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-3">
                          <span className="text-xl">üëÜ</span>
                          <div>
                            <h4 className="font-semibold text-slate-800">–ó–≤—É–∫–∏ –∫–ª—ñ–∫—ñ–≤</h4>
                            <p className="text-sm text-slate-600">–ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–æ–∫</p>
                          </div>
                        </div>
                        <label className="relative inline-flex items-center cursor-pointer">
                          <input
                            type="checkbox"
                            checked={settings.audioSettings.clickSounds.enabled}
                            onChange={(e) => updateSettings({ 
                              audioSettings: { 
                                ...settings.audioSettings, 
                                clickSounds: { 
                                  ...settings.audioSettings.clickSounds, 
                                  enabled: e.target.checked 
                                } 
                              } 
                            })}
                            className="sr-only peer"
                          />
                          <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-500"></div>
                        </label>
                      </div>

                      {settings.audioSettings.clickSounds.enabled && (
                        <div className="space-y-3">
                          <div className="flex gap-3">
                            <button
                              onClick={() => openMediaSelector('clickSound', ['audio'])}
                              className="flex-1 px-3 py-2 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-lg hover:from-blue-600 hover:to-indigo-600 transition-all duration-200 text-sm font-medium"
                            >
                              üìö –í–∏–±—Ä–∞—Ç–∏ –∑ –º–µ–¥—ñ–∞-–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
                            </button>
                            {settings.audioSettings.clickSounds.url && (
                              <button
                                onClick={() => updateSettings({ 
                                  audioSettings: { 
                                    ...settings.audioSettings, 
                                    clickSounds: { 
                                      ...settings.audioSettings.clickSounds, 
                                      url: '', 
                                      enabled: false 
                                    } 
                                  } 
                                })}
                                className="px-3 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200 border border-red-200 text-sm"
                              >
                                ‚úï
                              </button>
                            )}
                          </div>
                          
                          {/* –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª */}
                          {settings.audioSettings.clickSounds.url && (
                            <div className="mt-3 p-3 bg-blue-50 rounded-xl border border-blue-200">
                              <div className="flex items-center gap-3">
                                <div className="w-12 h-12 bg-blue-100 rounded-lg border border-blue-300 flex items-center justify-center">
                                  <span className="text-blue-600 text-lg">üëÜ</span>
                                </div>
                                <div>
                                  <p className="text-sm font-medium text-blue-700">–ó–≤—É–∫ –∫–ª—ñ–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π</p>
                                  <p className="text-xs text-blue-600">–ó–≤—É–∫ –±—É–¥–µ –≤—ñ–¥—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è –ø—Ä–∏ –∫–ª—ñ–∫—É</p>
                                </div>
                              </div>
                            </div>
                          )}
                          <div>
                            <label className="block text-xs font-medium text-slate-600 mb-2">
                              –ì—É—á–Ω—ñ—Å—Ç—å: {Math.round(settings.audioSettings.clickSounds.volume * 100)}%
                            </label>
                            <input
                              type="range"
                              min="0"
                              max="1"
                              step="0.1"
                              value={settings.audioSettings.clickSounds.volume}
                              onChange={(e) => updateSettings({ 
                                audioSettings: { 
                                  ...settings.audioSettings, 
                                  clickSounds: { 
                                    ...settings.audioSettings.clickSounds, 
                                    volume: parseFloat(e.target.value) 
                                  } 
                                } 
                              })}
                              className="w-full h-1.5 bg-blue-200 rounded-lg appearance-none cursor-pointer"
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Modern Actions */}
          <div className="p-6 border-t border-slate-200/60 bg-gradient-to-r from-slate-50 to-slate-100">
            <div className="space-y-4">
              <div className="flex gap-3">
                <button
                  onClick={saveSettings}
                  className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl flex items-center justify-center gap-2"
                >
                  <span>üíæ</span>
                  <span>–ó–±–µ—Ä–µ–≥—Ç–∏</span>
                </button>
              </div>


              
              {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó */}
              <SyncButton className="w-full" />
              
              <div className="flex gap-3">
                <button
                  onClick={exportSettings}
                  className="flex-1 bg-white/80 text-slate-700 px-4 py-3 rounded-xl hover:bg-white transition-all duration-200 text-sm font-medium border border-slate-200 hover:border-slate-300 shadow-sm hover:shadow-md flex items-center justify-center gap-2"
                >
                  <span>üì§</span>
                  <span>–ï–∫—Å–ø–æ—Ä—Ç</span>
                </button>
                <label className="flex-1 bg-white/80 text-slate-700 px-4 py-3 rounded-xl hover:bg-white transition-all duration-200 text-sm font-medium cursor-pointer border border-slate-200 hover:border-slate-300 shadow-sm hover:shadow-md flex items-center justify-center gap-2">
                  <span>üì•</span>
                  <span>–Ü–º–ø–æ—Ä—Ç</span>
                  <input
                    type="file"
                    accept=".json"
                    onChange={importSettings}
                    className="hidden"
                  />
                </label>
              </div>
            </div>
          </div>
        </div>

        {/* Preview Area */}
        <div className="flex-1 bg-gradient-to-br from-slate-100 to-slate-200 p-8">
          <div className="h-full flex flex-col">
            {/* Device selector */}
            <div className="flex items-center justify-between mb-8">
              <div>
                <h3 className="text-2xl font-bold text-slate-800 mb-2">–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥</h3>
                <p className="text-slate-600">–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —è–∫ –≤–∏–≥–ª—è–¥–∞—Ç–∏–º–µ –≤–∞—à–∞ —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞</p>
              </div>
              <div className="flex bg-white/80 backdrop-blur-sm rounded-2xl p-2 shadow-lg border border-white/20">
                {[
                  { type: 'mobile' as DeviceType, icon: 'üì±', label: '–ú–æ–±—ñ–ª—å–Ω–∏–π' },
                  { type: 'tablet' as DeviceType, icon: 'üì±', label: '–ü–ª–∞–Ω—à–µ—Ç' },
                  { type: 'desktop' as DeviceType, icon: 'üíª', label: '–ö–æ–º–ø\'—é—Ç–µ—Ä' }
                ].map((device) => (
                  <button
                    key={device.type}
                    onClick={() => setDeviceType(device.type)}
                    className={`px-4 py-3 rounded-xl text-sm font-semibold transition-all duration-200 ${
                      deviceType === device.type
                        ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg scale-105'
                        : 'text-slate-600 hover:text-slate-800 hover:bg-white/60'
                    }`}
                  >
                    {device.icon} {device.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Preview container */}
            <div className="flex-1 flex items-center justify-center">
              <div 
                className={`${getDeviceClasses()} bg-white rounded-3xl shadow-2xl overflow-hidden relative border border-white/20`}
                style={{ maxHeight: '85vh' }}
              >
                {/* Real IntroScreen Preview */}
                <div className="w-full h-full relative">
                  <div className="w-full h-full relative overflow-hidden">
                    <IntroScreenPreview />
                  </div>
                  
                  {/* Overlay to prevent interaction */}
                  <div className="absolute inset-0 bg-transparent pointer-events-none z-10" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Smart Content Manager */}
      {isMediaSelectorOpen && (
        <MediaSelector
          isOpen={isMediaSelectorOpen}
          onClose={() => setIsMediaSelectorOpen(false)}
          onSelect={handleMediaSelect}
          allowedTypes={
            mediaSelectorType === 'backgroundImage' ? ['image'] :
            mediaSelectorType === 'backgroundVideo' ? ['video'] :
            mediaSelectorType === 'logo' ? ['image'] :
            ['audio']
          }
          title={
            mediaSelectorType === 'backgroundImage' ? '–í–∏–±—Ä–∞—Ç–∏ —Ñ–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è' :
            mediaSelectorType === 'backgroundVideo' ? '–í–∏–±—Ä–∞—Ç–∏ —Ñ–æ–Ω–æ–≤–µ –≤—ñ–¥–µ–æ' :
            mediaSelectorType === 'logo' ? '–í–∏–±—Ä–∞—Ç–∏ –ª–æ–≥–æ—Ç–∏–ø' :
            mediaSelectorType === 'backgroundMusic' ? '–í–∏–±—Ä–∞—Ç–∏ —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É' :
            mediaSelectorType === 'hoverSound' ? '–í–∏–±—Ä–∞—Ç–∏ –∑–≤—É–∫ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è' :
            '–í–∏–±—Ä–∞—Ç–∏ –∑–≤—É–∫ –∫–ª—ñ–∫—É'
          }
          description={
            mediaSelectorType === 'backgroundImage' ? '–û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ñ–æ–Ω—É —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏' :
            mediaSelectorType === 'backgroundVideo' ? '–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ –¥–ª—è —Ñ–æ–Ω—É —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏' :
            mediaSelectorType === 'logo' ? '–û–±–µ—Ä—ñ—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏' :
            mediaSelectorType === 'backgroundMusic' ? '–û–±–µ—Ä—ñ—Ç—å —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É –¥–ª—è —ñ–Ω—Ç—Ä–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏' :
            mediaSelectorType === 'hoverSound' ? '–û–±–µ—Ä—ñ—Ç—å –∑–≤—É–∫ –¥–ª—è –µ—Ñ–µ–∫—Ç—É –Ω–∞–≤–µ–¥–µ–Ω–Ω—è' :
            '–û–±–µ—Ä—ñ—Ç—å –∑–≤—É–∫ –¥–ª—è –µ—Ñ–µ–∫—Ç—É –∫–ª—ñ–∫—É'
          }
        />
      )}
    </>
  );
};

export default IntroCustomizer; 