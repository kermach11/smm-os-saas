// Web Audio API —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥—É autoplay –ø–æ–ª—ñ—Ç–∏–∫–∏
export class WebAudioManager {
  private audioContext: AudioContext | null = null;
  private audioBuffers: Map<string, AudioBuffer> = new Map();
  private audioSources: Map<string, AudioBufferSourceNode> = new Map();
  private isInitialized = false;
  private activationListeners: Array<() => void> = [];

  constructor() {
    this.setupActivationListeners();
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Audio Context
  private async initializeContext() {
    if (this.audioContext) return;

    try {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      this.isInitialized = true;
      console.log('‚úÖ WebAudioManager: Context —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    } catch (error) {
      console.warn('‚ö†Ô∏è WebAudioManager: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:', error);
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
  async loadAudio(url: string, id: string): Promise<boolean> {
    if (!this.audioContext) {
      await this.initializeContext();
    }

    if (!this.audioContext) return false;

    try {
      const response = await fetch(url);
      const arrayBuffer = await response.arrayBuffer();
      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);
      
      this.audioBuffers.set(id, audioBuffer);
      console.log(`‚úÖ WebAudioManager: –ê—É–¥—ñ–æ ${id} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`);
      return true;
    } catch (error) {
      console.warn(`‚ö†Ô∏è WebAudioManager: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${id}:`, error);
      return false;
    }
  }

  // –ü—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ
  async playAudio(id: string, options: { loop?: boolean; volume?: number; singlePlay?: boolean } = {}): Promise<boolean> {
    if (!this.audioContext || !this.audioBuffers.has(id)) {
      console.warn(`‚ö†Ô∏è WebAudioManager: –ê—É–¥—ñ–æ ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      return false;
    }

    try {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume();
      }

      // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π source
      if (this.audioSources.has(id)) {
        this.audioSources.get(id)?.stop();
        this.audioSources.delete(id);
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π source
      const source = this.audioContext.createBufferSource();
      source.buffer = this.audioBuffers.get(id)!;
      source.loop = options.loop || false;
      
      // –î–æ–¥–∞—î–º–æ volume control
      if (options.volume !== undefined) {
        const gainNode = this.audioContext.createGain();
        gainNode.gain.value = options.volume;
        source.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
      } else {
        source.connect(this.audioContext.destination);
      }

      // üéµ –î–û–î–ê–Ñ–ú–û –°–õ–£–•–ê–ß –î–õ–Ø SINGLE PLAY
      if (options.singlePlay && !options.loop) {
        source.onended = () => {
          console.log(`üéµ WebAudioManager: [SINGLE PLAY] –ê—É–¥—ñ–æ ${id} –∑–∞–∫—ñ–Ω—á–∏–ª–æ—Å—è, –∑—É–ø–∏–Ω—è—î–º–æ —ñ –≤–∏–¥–∞–ª—è—î–º–æ`);
          this.audioSources.delete(id);
          // –î–æ–¥–∞—Ç–∫–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ source (—Ö–æ—á–∞ –≤—ñ–Ω —É–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è)
        };
      }

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ
      source.start(0);
      this.audioSources.set(id, source);
      
      console.log(`‚úÖ WebAudioManager: –ê—É–¥—ñ–æ ${id} –∑–∞–ø—É—â–µ–Ω–æ${options.singlePlay ? ' [SINGLE PLAY MODE]' : ''}`);
      
      // üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –Ø–∫—â–æ –∑–≤—É–∫ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è —É—Å–ø—ñ—à–Ω–æ, 
      // –∑–Ω–∞—á–∏—Ç—å —î user gesture - –º–æ–∂–µ–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–µ–æ!
      console.log(`üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –ó–≤—É–∫ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ç—Ä–∏–≥–µ—Ä–∏–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ!`);
      this.triggerVideoDominoEffect();
      
      return true;
    } catch (error) {
      console.warn(`‚ö†Ô∏è WebAudioManager: –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É ${id}:`, error);
      return false;
    }
  }

  // –ó—É–ø–∏–Ω–∫–∞ –∞—É–¥—ñ–æ
  stopAudio(id: string) {
    if (this.audioSources.has(id)) {
      this.audioSources.get(id)?.stop();
      this.audioSources.delete(id);
      console.log(`üõë WebAudioManager: –ê—É–¥—ñ–æ ${id} –∑—É–ø–∏–Ω–µ–Ω–æ`);
    }
  }

  // –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –∞—É–¥—ñ–æ
  stopAllAudio() {
    this.audioSources.forEach((source, id) => {
      source.stop();
      console.log(`üõë WebAudioManager: –ê—É–¥—ñ–æ ${id} –∑—É–ø–∏–Ω–µ–Ω–æ`);
    });
    this.audioSources.clear();
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≥—Ä–∞—î –∞—É–¥—ñ–æ
  isAudioPlaying(id: string): boolean {
    return this.audioSources.has(id);
  }

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
  private setupActivationListeners() {
    const activateAudio = async () => {
      if (!this.audioContext) {
        await this.initializeContext();
      }

      if (this.audioContext?.state === 'suspended') {
        await this.audioContext.resume();
        console.log('‚úÖ WebAudioManager: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –≤–∑–∞—î–º–æ–¥—ñ—é');
        
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ–ª–±–µ–∫–∏
        this.activationListeners.forEach(listener => listener());
      }
    };

    // –ê–≥—Ä–µ—Å–∏–≤–Ω–µ —Å–ª—É—Ö–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
    const events = [
      'mousemove', 'mousedown', 'mouseup', 'click',
      'touchstart', 'touchend', 'touchmove',
      'scroll', 'wheel', 'keydown', 'keyup',
      'resize', 'focus', 'blur'
    ];

    events.forEach(event => {
      document.addEventListener(event, activateAudio, { 
        once: true,
        passive: true 
      });
    });

    // –¢–∞–∫–æ–∂ —Å–ª—É—Ö–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
    const observer = new IntersectionObserver(activateAudio, { threshold: 0.1 });
    
    // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ body
    observer.observe(document.body);
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–ª–±–µ–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
  onActivation(callback: () => void) {
    this.activationListeners.push(callback);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É
  get isActive(): boolean {
    return this.audioContext?.state === 'running';
  }

  get isSupported(): boolean {
    return !!(window.AudioContext || (window as any).webkitAudioContext);
  }

  // üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –¢—Ä–∏–≥–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–µ–æ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –∑–≤—É–∫—É
  private triggerVideoDominoEffect() {
    try {
      console.log(`üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ videoManager...`);
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –≤—ñ–¥–µ–æ —á–µ—Ä–µ–∑ –ø—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥
      videoManager.playAllVideos().then(() => {
        console.log(`üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –í—Å—ñ –≤—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ`);
      }).catch((error) => {
        console.warn(`üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–µ–æ:`, error);
      });
      
    } catch (error) {
      console.warn(`üé¨ –î–û–ú–Ü–ù–û –ï–§–ï–ö–¢: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–∏–≥–µ—Ä—ñ –≤—ñ–¥–µ–æ:`, error);
    }
  }
}

// –ù–æ–≤–∏–π VideoManager –¥–ª—è –æ–±—Ö–æ–¥—É autoplay –ø–æ–ª—ñ—Ç–∏–∫–∏ –≤—ñ–¥–µ–æ
export class VideoManager {
  private videoElements: Map<string, HTMLVideoElement> = new Map();
  private isInitialized = false;
  private activationListeners: Array<() => void> = [];

  constructor() {
    this.setupActivationListeners();
  }

  // –°–ø—Ä–æ—â–µ–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ –∑ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–Æ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—Å—Ç—é
  createBackgroundVideo(url: string, id: string): HTMLVideoElement {
    console.log(`üé¨ VideoManager: [–£–õ–¨–¢–ê-–ê–ì–†–ï–°–ò–í–ù–ò–ô –ü–Ü–î–•–Ü–î] –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ–Ω–æ–≤–µ –≤—ñ–¥–µ–æ –∑ URL: ${url}`);
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –≤—ñ–¥–µ–æ —è–∫—â–æ —ñ—Å–Ω—É—î
    this.removeVideo(id);
    
    const video = document.createElement('video');
    video.id = `video-${id}`;
    video.src = url;
    
    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–ò–í–ù–Ü –ê–¢–†–ò–ë–£–¢–ò –î–õ–Ø –û–ë–•–û–î–£ AUTOPLAY –ë–õ–û–ö–£–í–ê–ù–ù–Ø
    video.autoplay = true;
    video.muted = true;
    video.loop = true;
    video.playsInline = true;
    video.volume = 0;
    video.defaultMuted = true;
    video.preload = 'auto';
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è iOS —Ç–∞ —ñ–Ω—à–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤
    video.setAttribute('webkit-playsinline', '');
    video.setAttribute('playsinline', '');
    video.setAttribute('x-webkit-airplay', 'allow');
    video.setAttribute('data-object-fit', 'cover');
    video.setAttribute('controls', 'false');
    video.setAttribute('disablePictureInPicture', 'true');
    video.setAttribute('disableRemotePlayback', 'true');
    
    // –°–¢–ê–ù–î–ê–†–¢–ù–Ü –°–¢–ò–õ–Ü –î–õ–Ø –§–û–ù–û–í–û–ì–û –í–Ü–î–ï–û
    video.style.cssText = `
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
      object-fit: cover !important;
      z-index: -1 !important;
      pointer-events: none !important;
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
    `;
    
    // –î–æ–¥–∞—î–º–æ CSS –∫–ª–∞—Å–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ
    video.className = 'background-video';
    video.setAttribute('data-video-id', id);
    
    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π
    video.addEventListener('loadstart', () => {
      console.log(`üé¨ VideoManager: [${id}] –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—á–∞–ª–∞—Å—å`);
    });
    
    video.addEventListener('canplay', () => {
      console.log(`üé¨ VideoManager: [${id}] –ì–æ—Ç–æ–≤–µ –¥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è`);
      this.ensureVideoIsVisible(video, id);
    });
    
    video.addEventListener('play', () => {
      console.log(`üé¨ VideoManager: [${id}] –ü–æ–¥—ñ—è PLAY`);
      this.logVideoInfo(video, id);
    });
    
    video.addEventListener('playing', () => {
      console.log(`üé¨ VideoManager: [${id}] üé¨ –§–ê–ö–¢–ò–ß–ù–û –ì–†–ê–Ñ!`);
      this.logVideoInfo(video, id);
    });
    
    video.addEventListener('error', (e) => {
      console.error(`üé¨ VideoManager: [${id}] –ü–û–ú–ò–õ–ö–ê:`, e, video.error);
    });
    
    // –î–æ–¥–∞—î–º–æ –ë–ï–ó–ü–û–°–ï–†–ï–î–ù–¨–û –≤ body –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
    document.body.insertBefore(video, document.body.firstChild);
    
    // –î–æ–¥–∞—î–º–æ CSS –ø—Ä–∞–≤–∏–ª–æ –≤ head –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ
    this.addBackgroundVideoCSS();
    
    this.videoElements.set(id, video);
    
    console.log(`üé¨ VideoManager: [${id}] –í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ –≤ DOM –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é 0`);
    this.logDOMInfo(video, id);
    
    // –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–ò–í–ù–ò–ô –ó–ê–ü–£–°–ö –í–Ü–î–ï–û - –ö–Ü–õ–¨–ö–ê –°–ü–†–û–ë
    setTimeout(() => {
      this.forcePlayVideo(id);
    }, 50);
    
    setTimeout(() => {
      this.forcePlayVideo(id);
    }, 200);
    
    setTimeout(() => {
      this.forcePlayVideo(id);
    }, 500);
    
    // –¢–∞–∫–æ–∂ –ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    video.addEventListener('loadedmetadata', () => {
      console.log(`üé¨ VideoManager: [${id}] –ú–µ—Ç–∞–¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å–∫`);
      this.forcePlayVideo(id);
    });
    
    // –Ü –ø—Ä–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    video.addEventListener('canplaythrough', () => {
      console.log(`üé¨ VideoManager: [${id}] –ì–æ—Ç–æ–≤–µ –¥–æ –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è, –ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å–∫`);
      this.forcePlayVideo(id);
    });
    
    return video;
  }

  // –î–æ–¥–∞—î–º–æ CSS –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤—ñ–¥–µ–æ
  private addBackgroundVideoCSS(): void {
    const existingStyle = document.getElementById('background-video-style');
    if (existingStyle) return;
    
    const style = document.createElement('style');
    style.id = 'background-video-style';
    style.textContent = `
      .background-video {
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        z-index: -1 !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        object-fit: cover !important;
        pointer-events: none !important;
      }
      
      /* –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è */
      video[data-video-id] {
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        width: 100% !important;
        height: 100% !important;
        z-index: -1 !important;
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
        object-fit: cover !important;
        pointer-events: none !important;
      }
    `;
    
    document.head.appendChild(style);
  }

  // –ü—Ä–∏–º—É—Å–æ–≤–µ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
  private async forcePlayVideo(id: string): Promise<void> {
    const video = this.videoElements.get(id);
    if (!video) return;
    
    console.log(`üé¨ VideoManager: [${id}] –ü–†–ò–ú–£–°–û–í–ò–ô –ó–ê–ü–£–°–ö`);
    
    try {
      await video.play();
      console.log(`üé¨ VideoManager: [${id}] ‚úÖ –ü—Ä–∏–º—É—Å–æ–≤–∏–π –∑–∞–ø—É—Å–∫ —É—Å–ø—ñ—à–Ω–∏–π`);
      this.ensureVideoIsVisible(video, id);
    } catch (error) {
      console.warn(`üé¨ VideoManager: [${id}] ‚ö†Ô∏è –ü—Ä–∏–º—É—Å–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ:`, error);
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ
  private ensureVideoIsVisible(video: HTMLVideoElement, id: string): void {
    console.log(`üé¨ VideoManager: [${id}] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –≤—ñ–¥–µ–æ`);
    
    const rect = video.getBoundingClientRect();
    const computedStyle = window.getComputedStyle(video);
    
    console.log(`üé¨ VideoManager: [${id}] –ü–æ–∑–∏—Ü—ñ—è:`, {
      top: rect.top,
      left: rect.left,
      width: rect.width,
      height: rect.height,
      zIndex: computedStyle.zIndex,
      display: computedStyle.display,
      visibility: computedStyle.visibility,
      opacity: computedStyle.opacity
    });
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å —â–æ —Å—Ç–∏–ª—ñ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (computedStyle.display === 'none' || computedStyle.visibility === 'hidden' || computedStyle.opacity === '0') {
      console.warn(`üé¨ VideoManager: [${id}] üö® –í–Ü–î–ï–û –ü–†–ò–•–û–í–ê–ù–û! –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ...`);
      video.style.display = 'block !important';
      video.style.visibility = 'visible !important';
      video.style.opacity = '1 !important';
    }
    
    if (rect.width === 0 || rect.height === 0) {
      console.warn(`üé¨ VideoManager: [${id}] üö® –í–Ü–î–ï–û –ë–ï–ó –†–û–ó–ú–Ü–†–Ü–í! –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ...`);
      video.style.width = '100vw !important';
      video.style.height = '100vh !important';
    }
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–µ–æ
  private logVideoInfo(video: HTMLVideoElement, id: string): void {
    console.log(`üé¨ VideoManager: [${id}] –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:`, {
      paused: video.paused,
      ended: video.ended,
      currentTime: video.currentTime,
      duration: video.duration,
      readyState: video.readyState,
      videoWidth: video.videoWidth,
      videoHeight: video.videoHeight,
      src: video.src
    });
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è DOM —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
  private logDOMInfo(video: HTMLVideoElement, id: string): void {
    console.log(`üé¨ VideoManager: [${id}] DOM —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:`, {
      inDocument: document.contains(video),
      parentElement: video.parentElement?.tagName,
      nextSibling: video.nextElementSibling?.tagName,
      previousSibling: video.previousElementSibling?.tagName,
      elementIndex: Array.from(document.body.children).indexOf(video)
    });
  }

  // –ü—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
  async playVideo(id: string): Promise<boolean> {
    const video = this.videoElements.get(id);
    if (!video) {
      console.warn(`üé¨ VideoManager: [${id}] –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      return false;
    }

    console.log(`üé¨ VideoManager: [${id}] –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –≤—ñ–¥–µ–æ`);
    
    try {
      if (!video.paused) {
        console.log(`üé¨ VideoManager: [${id}] –í—ñ–¥–µ–æ –≤–∂–µ –≥—Ä–∞—î`);
        this.ensureVideoIsVisible(video, id);
        return true;
      }

      await video.play();
      console.log(`üé¨ VideoManager: [${id}] ‚úÖ –í—ñ–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      this.ensureVideoIsVisible(video, id);
      return true;
    } catch (error: any) {
      console.error(`üé¨ VideoManager: [${id}] ‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:`, error);
      return false;
    }
  }

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
  removeVideo(id: string): void {
    const video = this.videoElements.get(id);
    if (video) {
      console.log(`üé¨ VideoManager: [${id}] –í–∏–¥–∞–ª—è—î–º–æ –≤—ñ–¥–µ–æ`);
      video.pause();
      video.remove();
      this.videoElements.delete(id);
    }
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
  getVideo(id: string): HTMLVideoElement | undefined {
    return this.videoElements.get(id);
  }

  // –°—Ç–∞—Ç—É—Å –≤—ñ–¥–µ–æ
  getVideoStatus(id: string): { exists: boolean; playing: boolean; paused: boolean; ended: boolean; currentTime: number; duration: number; visible: boolean } {
    const video = this.videoElements.get(id);
    if (!video) {
      return { exists: false, playing: false, paused: true, ended: false, currentTime: 0, duration: 0, visible: false };
    }
    
    const rect = video.getBoundingClientRect();
    const computedStyle = window.getComputedStyle(video);
    const visible = computedStyle.display !== 'none' && 
                   computedStyle.visibility !== 'hidden' && 
                   computedStyle.opacity !== '0' &&
                   rect.width > 0 && rect.height > 0;
    
    return {
      exists: true,
      playing: !video.paused && !video.ended,
      paused: video.paused,
      ended: video.ended,
      currentTime: video.currentTime,
      duration: video.duration || 0,
      visible: visible
    };
  }

  // –°–ª—É—Ö–∞—á—ñ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ
  private setupActivationListeners() {
    const activateVideo = async () => {
      // console.log('üé¨ VideoManager: üöÄ –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–ò–í–ù–ê –∞–∫—Ç–∏–≤–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –≤–∑–∞—î–º–æ–¥—ñ—é');
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –Ω–∞—è–≤–Ω—ñ –≤—ñ–¥–µ–æ
      for (const [id] of this.videoElements) {
        // console.log(`üé¨ VideoManager: –ü—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥–µ–æ ${id} —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é`);
        await this.playVideo(id);
      }
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –∫–æ–ª–±–µ–∫–∏
      this.activationListeners.forEach(listener => {
        try {
          listener();
        } catch (error) {
          console.warn('üé¨ VideoManager: –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–ª–±–µ–∫—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:', error);
        }
      });
    };

    // –ü—Ä–æ—Å—Ç–∏–π –Ω–∞–±—ñ—Ä –ø–æ–¥—ñ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ
    const events = [
      'click', 'touchstart', 'keydown'
    ];

    // –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–æ–¥—ñ—ó (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)
    events.forEach(event => {
      document.addEventListener(event, activateVideo, { 
        once: true, // –¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
        passive: true 
      });
    });

    // –ü—Ä–æ—Å—Ç–∏–π —Ç—Ä–∏–≥–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó
    setTimeout(activateVideo, 1000);
  }

  // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–ª–±–µ–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
  onActivation(callback: () => void) {
    this.activationListeners.push(callback);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—ñ–¥–µ–æ –≥—Ä–∞—î
  isVideoPlaying(id: string): boolean {
    const video = this.videoElements.get(id);
    return video ? !video.paused : false;
  }

  // –ó—É–ø–∏–Ω–∫–∞ –≤—ñ–¥–µ–æ
  stopVideo(id: string) {
    const video = this.videoElements.get(id);
    if (video && !video.paused) {
      video.pause();
      video.currentTime = 0;
    }
  }

  // –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ
  stopAllVideo() {
    this.videoElements.forEach((video, id) => {
      if (!video.paused) {
        video.pause();
        video.currentTime = 0;
      }
    });
  }

  // –ü—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –≤—ñ–¥–µ–æ
  async playAllVideos() {
    const promises: Promise<void>[] = [];
    
    this.videoElements.forEach(async (video, id) => {
      promises.push(
        (async () => {
          try {
            if (video.paused) {
              await video.play();
            }
          } catch (error) {
            // –¢–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É
          }
        })()
      );
    });
    
    await Promise.all(promises);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏
export const webAudioManager = new WebAudioManager();
export const videoManager = new VideoManager();

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—É–¥—ñ–æ
export const playWebAudio = async (url: string, options: { 
  loop?: boolean; 
  volume?: number; 
  id?: string;
  singlePlay?: boolean;
} = {}) => {
  const id = options.id || `audio_${Date.now()}`;
  
  if (!webAudioManager.isSupported) {
    console.warn('‚ö†Ô∏è WebAudioManager: Web Audio API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
    return false;
  }

  const loaded = await webAudioManager.loadAudio(url, id);
  if (!loaded) return false;

  return await webAudioManager.playAudio(id, options);
};

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
export const playWebVideo = async (url: string, options: { 
  loop?: boolean; 
  volume?: number; 
  id?: string;
  muted?: boolean;
} = {}) => {
  const id = options.id || `video_${Date.now()}`;
  
  videoManager.createBackgroundVideo(url, id);
  
  return await videoManager.playVideo(id);
};

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export default webAudioManager; 