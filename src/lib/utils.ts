import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// üöÄ Responsive font size utilities –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –±—Ä–∞—É–∑–µ—Ä—ñ–≤
export function responsiveFontSize(sizeInPx: number): string {
  // –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ px –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  return `${sizeInPx}px`;
}

// –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è responsive spacing
export function responsiveSpacing(sizeInPx: number): string {
  const remSize = sizeInPx / 16;
  return `clamp(${(remSize * 0.8).toFixed(2)}rem, ${(remSize * 0.9).toFixed(2)}rem + 1vw, ${remSize.toFixed(2)}rem)`;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–∏—Å—Ç—Ä–æ—é
export function getDeviceType(): 'mobile' | 'tablet' | 'desktop' {
  if (typeof window === 'undefined') return 'desktop';
  
  const width = window.innerWidth;
  if (width < 768) return 'mobile';
  if (width < 1024) return 'tablet';
  return 'desktop';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è CSS –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è responsive –¥–∏–∑–∞–π–Ω—É
export function createResponsiveCSS(element: HTMLElement, baseFontSize: number) {
  const deviceType = getDeviceType();
  const scale = deviceType === 'mobile' ? 0.9 : deviceType === 'tablet' ? 0.95 : 1;
  
  element.style.setProperty('--base-font-size', `${baseFontSize * scale}px`);
  element.style.setProperty('--device-type', deviceType);
}


