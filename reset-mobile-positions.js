// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–æ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
// –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó

async function resetMobilePositions() {
  console.log('üîÑ –°–∫–∏–¥–∞–Ω–Ω—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ–π –¥–æ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...');
  
  try {
    // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const dbRequest = indexedDB.open('SmartContentDB', 1);
    
    dbRequest.onsuccess = function(event) {
      const db = event.target.result;
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
      const transaction = db.transaction(['settings'], 'readwrite');
      const store = transaction.objectStore('settings');
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
      const getRequest = store.get('boxPositions');
      
      getRequest.onsuccess = function() {
        const result = getRequest.result;
        
        if (result && result.data) {
          const boxPositions = result.data;
          
          // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –º–æ–±—ñ–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó
          const keysToDelete = Object.keys(boxPositions).filter(key => key.includes('_mobile'));
          
          keysToDelete.forEach(key => {
            delete boxPositions[key];
          });
          
          console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –º–æ–±—ñ–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:', keysToDelete);
          
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
          const updatedData = {
            ...result,
            data: boxPositions,
            timestamp: Date.now()
          };
          
          const putRequest = store.put(updatedData);
          
          putRequest.onsuccess = function() {
            console.log('‚úÖ –ú–æ–±—ñ–ª—å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç—ñ –¥–æ –∑–∞–≤–æ–¥—Å—å–∫–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å!');
            console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          };
          
          putRequest.onerror = function() {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', putRequest.error);
          };
        } else {
          console.log('‚ÑπÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }
      };
      
      getRequest.onerror = function() {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:', getRequest.error);
      };
    };
    
    dbRequest.onerror = function() {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', dbRequest.error);
    };
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
resetMobilePositions(); 