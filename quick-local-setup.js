// –®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PocketBase
const PB_URL = 'http://127.0.0.1:8090';

async function quickSetup() {
  console.log('üöÄ –®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ PocketBase...');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π
  try {
    const response = await fetch(`${PB_URL}/api/health`);
    if (!response.ok) {
      console.log('‚ùå PocketBase —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      return;
    }
    console.log('‚úÖ PocketBase —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
  } catch (error) {
    console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PocketBase:', error.message);
    return;
  }

  // –°—Ç–≤–æ—Ä–∏–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–ø—É–±–ª—ñ—á–Ω—ñ)
  const collections = [
    'smm_os_images',
    'smm_os_videos', 
    'smm_os_audio',
    'smm_os_documents'
  ];

  for (const name of collections) {
    try {
      const collectionData = {
        name: name,
        type: 'base',
        schema: [
          {
            name: 'file',
            type: 'file',
            required: true,
            options: {
              maxSelect: 1,
              maxSize: 50000000,
              mimeTypes: []
            }
          },
          {
            name: 'site_id',
            type: 'text',
            required: false
          },
          {
            name: 'original_name',
            type: 'text',
            required: false
          },
          {
            name: 'file_type',
            type: 'text',
            required: false
          },
          {
            name: 'file_size',
            type: 'number',
            required: false
          },
          {
            name: 'mime_type',
            type: 'text',
            required: false
          },
          {
            name: 'file_path',
            type: 'text',
            required: false
          }
        ],
        listRule: '',
        viewRule: '',
        createRule: '',
        updateRule: '',
        deleteRule: ''
      };

      console.log(`–°—Ç–≤–æ—Ä—é—é –∫–æ–ª–µ–∫—Ü—ñ—é: ${name}...`);
      
      // –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      const response = await fetch(`${PB_URL}/api/collections`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(collectionData)
      });

      if (response.ok) {
        console.log(`‚úÖ –ö–æ–ª–µ–∫—Ü—ñ—è ${name} —Å—Ç–≤–æ—Ä–µ–Ω–∞`);
      } else {
        const error = await response.text();
        console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ${name}: ${error}`);
      }
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
  }
  
  console.log('üéØ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ –∑–Ω–æ–≤—É.');
}

quickSetup();
